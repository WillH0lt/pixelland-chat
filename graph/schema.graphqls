# ==============================================
# base types
type User {
  id: Uuid!
  uid: String!
  name: String!
  avatar: String!
  bio: String!
  instancesConnection(
    first: Int! = 0 @constraint(max: 50)
    after: String! = ""
  ): UserInstancesConnection!
  notificationsConnection(
    last: Int! = 0 @constraint(max: 50)
    before: String! = ""
  ): UserNotificationsConnection!
}

type Instance {
  id: Uuid!
  name: String!
  author: Author!
  readAccess: Access!
  icon: String!
  createdAt: Time!
  description: String!
  showAuthor: Boolean!
  showChat: Boolean!
  showComments: Boolean!
  showLikes: Boolean!
  likesCount: Int!
  commentsCount: Int!
  channelsConnection(
    first: Int! = 0 @constraint(max: 50)
    after: String! = ""
  ): InstanceChannelsConnection!
  likesConnection(
    first: Int! = 0 @constraint(max: 50)
    after: String! = ""
  ): InstanceLikesConnection!
  authorsConnection(
    roles: [Role!]!
    first: Int! = 0 @constraint(max: 50)
    after: String! = ""
  ): InstanceAuthorsConnection!
}

type Invite {
  id: Uuid!
  instanceId: Uuid!
  instance: Instance
  author: Author!
  code: String!
  createdAt: Time!
  expiresAt: Time
  redemptions: Int
}

type Channel {
  id: Uuid!
  rank: String!
  name: String!
  createdAt: Time!
  instanceId: Uuid!
  updatedAt: Time!
  lastMessageAddedAt: Time
  isCategory: Boolean!
  isComments: Boolean!
  messageCount: Int!
  messagesConnection(
    last: Int! = 0 @constraint(max: 50)
    before: String! = ""
  ): ChannelMessagesConnection!
  publishers: [Role!]!
  readers: [Role!]!
}

type Message {
  id: Uuid!
  text: String!
  author: Author!
  createdAt: Time!
  channelId: Uuid!
  repliedMessage: Message
  imageUrls: [String!]
}

type Badge {
  id: Uuid!
  name: String!
  icon: String!
}

type Author {
  id: Uuid!
  userId: Uuid!
  instanceId: Uuid!
  roles: [Role!]!
  name: String!
  avatar: String!
  bio: String!
  createdAt: Time!
  banReason: String
}

type Notification {
  id: Uuid!
  createdAt: Time!
  kind: NotificationKind!
  author: Author
  instance: Instance
  message: Message
  reply: Message
  badge: Badge
}

# ==============================================
# connections
type UserInstancesConnection {
  pageInfo: PageInfo!
  edges: [UserInstancesEdge!]!
}

type UserNotificationsConnection {
  pageInfo: PageInfo!
  edges: [UserNotificationsEdge!]!
  hasUnread: Boolean!
  # lastSeenAt: Time
}

type InstanceChannelsConnection {
  pageInfo: PageInfo!
  edges: [InstanceChannelsEdge!]!
}

type InstanceLikesConnection {
  pageInfo: PageInfo!
  edges: [InstanceLikesEdge!]!
}

type InstanceAuthorsConnection {
  pageInfo: PageInfo!
  edges: [InstanceAuthorsEdge!]!
}

type ChannelMessagesConnection {
  pageInfo: PageInfo!
  edges: [ChannelMessagesEdge!]!
}

type UserBadgesConnection {
  pageInfo: PageInfo!
  edges: [UserBadgesEdge!]!
}

type AppBadgesConnection {
  pageInfo: PageInfo!
  edges: [AppBadgesEdge!]!
}

# ==============================================
# edges
type UserInstancesEdge {
  cursor: String!
  node: Instance!
  instanceUser: Author!
  likedByMe: Boolean!
  rank: String!
  pinned: Boolean!
}

type UserNotificationsEdge {
  cursor: String!
  node: Notification!
}

type InstanceChannelsEdge {
  cursor: String!
  node: Channel!
}

type InstanceLikesEdge {
  cursor: String!
  likedAt: Time!
  node: Author!
}

type InstanceAuthorsEdge {
  cursor: String!
  node: Author!
}

type ChannelMessagesEdge {
  cursor: String!
  node: Message!
}

type UserBadgesEdge {
  cursor: String!
  node: Badge!
  count: Int!
  badgedAt: Time!
}

type AppBadgesEdge {
  cursor: String!
  node: Badge!
}

# ==============================================
# streams
type Notice {
  kind: NoticeKind!
  channelMessagesEdge: ChannelMessagesEdge
  userInstancesEdge: UserInstancesEdge
  instanceChannelsEdge: InstanceChannelsEdge
  instanceLikesEdge: InstanceLikesEdge
  userNotificationsEdge: UserNotificationsEdge
  instance: Instance
  user: User
  author: Author
  badge: Badge
}

# ==============================================
# misc
type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

# ==============================================
# API
type Query {
  user: User! @auth(accessLevel: "user")
  instance(id: Uuid!): UserInstancesEdge! @auth(accessLevel: "guest")
  channel(id: Uuid!): Channel! @auth(accessLevel: "guest")
  invite(instanceId: Uuid!): Invite! @auth(accessLevel: "guest")
  checkInvite(code: String!): Invite! @auth(accessLevel: "guest")
  author(id: Uuid!): Author! @auth(accessLevel: "guest")
  userBadges(
    userId: Uuid!
    first: Int! = 0 @constraint(max: 50)
    after: String! = ""
  ): UserBadgesConnection! @auth(accessLevel: "guest")
  badges(first: Int! = 0 @constraint(max: 50), after: String! = ""): AppBadgesConnection!
    @auth(accessLevel: "admin")
  instanceUserListByIds(
    instanceId: Uuid!
    instanceUserIds: [Uuid!]! @constraint(listMax: 100)
  ): [Author!]! @auth(accessLevel: "guest")
}

type Mutation {
  # user
  updateUser(input: UserInput!): User! @auth(accessLevel: "user")
  # instance
  addInstance(input: InstanceInput!): UserInstancesEdge! @auth(accessLevel: "user")
  updateInstance(instanceId: Uuid!, input: InstanceInput!): UserInstancesEdge!
    @auth(accessLevel: "user")
  removeInstance(instanceId: Uuid!): UserInstancesEdge! @auth(accessLevel: "user")
  reorderInstance(instanceId: Uuid!, input: InstanceReorderInput!): UserInstancesEdge!
    @auth(accessLevel: "user")
  pinInstance(instanceId: Uuid!, input: InstancePinInput!): UserInstancesEdge!
    @auth(accessLevel: "user")
  # channel
  addChannel(input: ChannelInput!): InstanceChannelsEdge! @auth(accessLevel: "user")
  updateChannel(channelId: Uuid!, input: ChannelInput!): InstanceChannelsEdge!
    @auth(accessLevel: "user")
  reorderChannel(channelId: Uuid!, input: ChannelReorderInput!): InstanceChannelsEdge!
    @auth(accessLevel: "user")
  removeChannel(channelId: Uuid!): InstanceChannelsEdge! @auth(accessLevel: "user")
  # message
  addMessage(input: MessageInput!): ChannelMessagesEdge! @auth(accessLevel: "user")
  removeMessage(messageId: Uuid!): ChannelMessagesEdge! @auth(accessLevel: "user")
  # author
  addRole(authorId: Uuid!, role: Role!, banReason: String): Author! @auth(accessLevel: "user")
  removeRole(authorId: Uuid!, role: Role!): Author! @auth(accessLevel: "user")
  # invite
  addInvite(input: InviteInput!): Invite! @auth(accessLevel: "user")
  removeInvite(inviteId: Uuid!): Invite! @auth(accessLevel: "user")
  redeemInvite(code: String!): Invite! @auth(accessLevel: "user")
  # like
  addLike(instanceId: Uuid!): InstanceLikesEdge! @auth(accessLevel: "user")
  removeLike(instanceId: Uuid!): InstanceLikesEdge! @auth(accessLevel: "user")
  # badge
  addBadge(input: BadgeInput!): Badge! @auth(accessLevel: "admin")
  assignBadge(userId: Uuid!, badgeId: Uuid!): Badge! @auth(accessLevel: "admin")
  unassignBadge(userId: Uuid!, badgeId: Uuid!): Badge! @auth(accessLevel: "admin")
  updateBadge(badgeId: Uuid!, input: BadgeInput!): Badge! @auth(accessLevel: "admin")
  removeBadge(badgeId: Uuid!): Badge! @auth(accessLevel: "admin")
}

type Subscription {
  stream(instanceId: Uuid!): Notice! @auth(accessLevel: "guest")
}

# ==============================================
# input
input InstanceInput {
  id: Uuid # used to create instance with custom ID
  name: String! @constraint(min: 0, max: 32)
  readAccess: Access!
  icon: String! @constraint(min: 0, max: 1024)
  description: String! @constraint(min: 0, max: 1024)
  showAuthor: Boolean!
  showChat: Boolean!
  showComments: Boolean!
  showLikes: Boolean!
}

input InstanceReorderInput {
  prevInstanceId: Uuid
}

input InstancePinInput {
  pinned: Boolean!
}

input ChannelInput {
  name: String! @constraint(min: 0, max: 32)
  instanceId: Uuid!
  publishers: [Role!]!
  readers: [Role!]!
  isCategory: Boolean!
}

input ChannelReorderInput {
  prevChannelId: Uuid
}

input MessageInput {
  text: String! @constraint(min: 0, max: 1024)
  channelId: Uuid!
  repliedMessageId: Uuid
  imageUrls: [String!] @constraint(min: 0, max: 1024, listMax: 4)
}

input UserInput {
  name: String! @constraint(min: 0, max: 32)
  avatar: String!
  bio: String! @constraint(min: 0, max: 1024)
}

input InviteInput {
  instanceId: Uuid!
  expiresAt: Time
  redemptions: Int
}

input BadgeInput {
  name: String! @constraint(min: 0, max: 64)
  icon: String! @constraint(min: 0, max: 1024)
}

# ==============================================
# enum
enum Access {
  PUBLIC
  PRIVATE
}

enum Role {
  ADMIN
  MODERATOR
  MEMBER
  BANNED
  ALL_USERS
}

enum NoticeKind {
  MESSAGE_ADDED
  MESSAGE_REMOVED
  CHANNEL_ADDED
  CHANNEL_UPDATED
  CHANNEL_REMOVED
  AUTHOR_UPDATED
  USER_UPDATED # TODO, this gets broadcast to everybody, need to limit to instanceUser update
  INSTANCE_UPDATED
  INSTANCE_REMOVED
  LIKE_ADDED
  LIKE_REMOVED
  NOTIFICATION_ADDED
  BADGE_ADDED
}

enum NotificationKind {
  LIKE_ADDED
  COMMENT_ADDED
  REPLY_ADDED
  BADGE_ADDED
}

# ==============================================
# scalars
scalar Time
scalar Uuid

# ==============================================
# directives
directive @constraint(
  min: Float! = 0
  max: Float! = 50
  listMax: Float! = 50
) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @auth(accessLevel: String!) on FIELD_DEFINITION
