// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package pixellandchat

import (
	"context"
	"encoding/json"
	"time"

	"github.com/Khan/genqlient/graphql"
	"github.com/google/uuid"
)

type Access string

const (
	AccessPublic  Access = "PUBLIC"
	AccessPrivate Access = "PRIVATE"
)

// AddChannelAddChannelInstanceChannelsEdge includes the requested fields of the GraphQL type InstanceChannelsEdge.
type AddChannelAddChannelInstanceChannelsEdge struct {
	InstanceChannelsEdgeFragment `json:"-"`
}

// GetCursor returns AddChannelAddChannelInstanceChannelsEdge.Cursor, and is useful for accessing the field via an interface.
func (v *AddChannelAddChannelInstanceChannelsEdge) GetCursor() string {
	return v.InstanceChannelsEdgeFragment.Cursor
}

// GetNode returns AddChannelAddChannelInstanceChannelsEdge.Node, and is useful for accessing the field via an interface.
func (v *AddChannelAddChannelInstanceChannelsEdge) GetNode() InstanceChannelsEdgeFragmentNodeChannel {
	return v.InstanceChannelsEdgeFragment.Node
}

func (v *AddChannelAddChannelInstanceChannelsEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddChannelAddChannelInstanceChannelsEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.AddChannelAddChannelInstanceChannelsEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstanceChannelsEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddChannelAddChannelInstanceChannelsEdge struct {
	Cursor string `json:"cursor"`

	Node InstanceChannelsEdgeFragmentNodeChannel `json:"node"`
}

func (v *AddChannelAddChannelInstanceChannelsEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddChannelAddChannelInstanceChannelsEdge) __premarshalJSON() (*__premarshalAddChannelAddChannelInstanceChannelsEdge, error) {
	var retval __premarshalAddChannelAddChannelInstanceChannelsEdge

	retval.Cursor = v.InstanceChannelsEdgeFragment.Cursor
	retval.Node = v.InstanceChannelsEdgeFragment.Node
	return &retval, nil
}

// AddChannelResponse is returned by AddChannel on success.
type AddChannelResponse struct {
	AddChannel AddChannelAddChannelInstanceChannelsEdge `json:"addChannel"`
}

// GetAddChannel returns AddChannelResponse.AddChannel, and is useful for accessing the field via an interface.
func (v *AddChannelResponse) GetAddChannel() AddChannelAddChannelInstanceChannelsEdge {
	return v.AddChannel
}

// AddInstanceAddInstanceUserInstancesEdge includes the requested fields of the GraphQL type UserInstancesEdge.
type AddInstanceAddInstanceUserInstancesEdge struct {
	UserInstancesEdgeFragment `json:"-"`
}

// GetCursor returns AddInstanceAddInstanceUserInstancesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *AddInstanceAddInstanceUserInstancesEdge) GetCursor() string {
	return v.UserInstancesEdgeFragment.Cursor
}

// GetNode returns AddInstanceAddInstanceUserInstancesEdge.Node, and is useful for accessing the field via an interface.
func (v *AddInstanceAddInstanceUserInstancesEdge) GetNode() UserInstancesEdgeFragmentNodeInstance {
	return v.UserInstancesEdgeFragment.Node
}

// GetInstanceUser returns AddInstanceAddInstanceUserInstancesEdge.InstanceUser, and is useful for accessing the field via an interface.
func (v *AddInstanceAddInstanceUserInstancesEdge) GetInstanceUser() UserInstancesEdgeFragmentInstanceUserAuthor {
	return v.UserInstancesEdgeFragment.InstanceUser
}

// GetRank returns AddInstanceAddInstanceUserInstancesEdge.Rank, and is useful for accessing the field via an interface.
func (v *AddInstanceAddInstanceUserInstancesEdge) GetRank() string {
	return v.UserInstancesEdgeFragment.Rank
}

// GetPinned returns AddInstanceAddInstanceUserInstancesEdge.Pinned, and is useful for accessing the field via an interface.
func (v *AddInstanceAddInstanceUserInstancesEdge) GetPinned() bool {
	return v.UserInstancesEdgeFragment.Pinned
}

// GetLikedByMe returns AddInstanceAddInstanceUserInstancesEdge.LikedByMe, and is useful for accessing the field via an interface.
func (v *AddInstanceAddInstanceUserInstancesEdge) GetLikedByMe() bool {
	return v.UserInstancesEdgeFragment.LikedByMe
}

func (v *AddInstanceAddInstanceUserInstancesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddInstanceAddInstanceUserInstancesEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.AddInstanceAddInstanceUserInstancesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserInstancesEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddInstanceAddInstanceUserInstancesEdge struct {
	Cursor string `json:"cursor"`

	Node UserInstancesEdgeFragmentNodeInstance `json:"node"`

	InstanceUser UserInstancesEdgeFragmentInstanceUserAuthor `json:"instanceUser"`

	Rank string `json:"rank"`

	Pinned bool `json:"pinned"`

	LikedByMe bool `json:"likedByMe"`
}

func (v *AddInstanceAddInstanceUserInstancesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddInstanceAddInstanceUserInstancesEdge) __premarshalJSON() (*__premarshalAddInstanceAddInstanceUserInstancesEdge, error) {
	var retval __premarshalAddInstanceAddInstanceUserInstancesEdge

	retval.Cursor = v.UserInstancesEdgeFragment.Cursor
	retval.Node = v.UserInstancesEdgeFragment.Node
	retval.InstanceUser = v.UserInstancesEdgeFragment.InstanceUser
	retval.Rank = v.UserInstancesEdgeFragment.Rank
	retval.Pinned = v.UserInstancesEdgeFragment.Pinned
	retval.LikedByMe = v.UserInstancesEdgeFragment.LikedByMe
	return &retval, nil
}

// AddInstanceResponse is returned by AddInstance on success.
type AddInstanceResponse struct {
	AddInstance AddInstanceAddInstanceUserInstancesEdge `json:"addInstance"`
}

// GetAddInstance returns AddInstanceResponse.AddInstance, and is useful for accessing the field via an interface.
func (v *AddInstanceResponse) GetAddInstance() AddInstanceAddInstanceUserInstancesEdge {
	return v.AddInstance
}

// AddInviteAddInvite includes the requested fields of the GraphQL type Invite.
type AddInviteAddInvite struct {
	InviteFragment `json:"-"`
}

// GetId returns AddInviteAddInvite.Id, and is useful for accessing the field via an interface.
func (v *AddInviteAddInvite) GetId() uuid.UUID { return v.InviteFragment.Id }

// GetInstanceId returns AddInviteAddInvite.InstanceId, and is useful for accessing the field via an interface.
func (v *AddInviteAddInvite) GetInstanceId() uuid.UUID { return v.InviteFragment.InstanceId }

// GetCode returns AddInviteAddInvite.Code, and is useful for accessing the field via an interface.
func (v *AddInviteAddInvite) GetCode() string { return v.InviteFragment.Code }

// GetCreatedAt returns AddInviteAddInvite.CreatedAt, and is useful for accessing the field via an interface.
func (v *AddInviteAddInvite) GetCreatedAt() time.Time { return v.InviteFragment.CreatedAt }

// GetExpiresAt returns AddInviteAddInvite.ExpiresAt, and is useful for accessing the field via an interface.
func (v *AddInviteAddInvite) GetExpiresAt() *time.Time { return v.InviteFragment.ExpiresAt }

// GetRedemptions returns AddInviteAddInvite.Redemptions, and is useful for accessing the field via an interface.
func (v *AddInviteAddInvite) GetRedemptions() *int { return v.InviteFragment.Redemptions }

// GetAuthor returns AddInviteAddInvite.Author, and is useful for accessing the field via an interface.
func (v *AddInviteAddInvite) GetAuthor() InviteFragmentAuthor { return v.InviteFragment.Author }

func (v *AddInviteAddInvite) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddInviteAddInvite
		graphql.NoUnmarshalJSON
	}
	firstPass.AddInviteAddInvite = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InviteFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddInviteAddInvite struct {
	Id uuid.UUID `json:"id"`

	InstanceId uuid.UUID `json:"instanceId"`

	Code string `json:"code"`

	CreatedAt time.Time `json:"createdAt"`

	ExpiresAt *time.Time `json:"expiresAt"`

	Redemptions *int `json:"redemptions"`

	Author InviteFragmentAuthor `json:"author"`
}

func (v *AddInviteAddInvite) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddInviteAddInvite) __premarshalJSON() (*__premarshalAddInviteAddInvite, error) {
	var retval __premarshalAddInviteAddInvite

	retval.Id = v.InviteFragment.Id
	retval.InstanceId = v.InviteFragment.InstanceId
	retval.Code = v.InviteFragment.Code
	retval.CreatedAt = v.InviteFragment.CreatedAt
	retval.ExpiresAt = v.InviteFragment.ExpiresAt
	retval.Redemptions = v.InviteFragment.Redemptions
	retval.Author = v.InviteFragment.Author
	return &retval, nil
}

// AddInviteResponse is returned by AddInvite on success.
type AddInviteResponse struct {
	AddInvite AddInviteAddInvite `json:"addInvite"`
}

// GetAddInvite returns AddInviteResponse.AddInvite, and is useful for accessing the field via an interface.
func (v *AddInviteResponse) GetAddInvite() AddInviteAddInvite { return v.AddInvite }

// AddLikeAddLikeInstanceLikesEdge includes the requested fields of the GraphQL type InstanceLikesEdge.
type AddLikeAddLikeInstanceLikesEdge struct {
	InstanceLikesEdgeFragment `json:"-"`
}

// GetCursor returns AddLikeAddLikeInstanceLikesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *AddLikeAddLikeInstanceLikesEdge) GetCursor() string {
	return v.InstanceLikesEdgeFragment.Cursor
}

// GetLikedAt returns AddLikeAddLikeInstanceLikesEdge.LikedAt, and is useful for accessing the field via an interface.
func (v *AddLikeAddLikeInstanceLikesEdge) GetLikedAt() time.Time {
	return v.InstanceLikesEdgeFragment.LikedAt
}

// GetNode returns AddLikeAddLikeInstanceLikesEdge.Node, and is useful for accessing the field via an interface.
func (v *AddLikeAddLikeInstanceLikesEdge) GetNode() InstanceLikesEdgeFragmentNodeAuthor {
	return v.InstanceLikesEdgeFragment.Node
}

func (v *AddLikeAddLikeInstanceLikesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddLikeAddLikeInstanceLikesEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.AddLikeAddLikeInstanceLikesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstanceLikesEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddLikeAddLikeInstanceLikesEdge struct {
	Cursor string `json:"cursor"`

	LikedAt time.Time `json:"likedAt"`

	Node InstanceLikesEdgeFragmentNodeAuthor `json:"node"`
}

func (v *AddLikeAddLikeInstanceLikesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddLikeAddLikeInstanceLikesEdge) __premarshalJSON() (*__premarshalAddLikeAddLikeInstanceLikesEdge, error) {
	var retval __premarshalAddLikeAddLikeInstanceLikesEdge

	retval.Cursor = v.InstanceLikesEdgeFragment.Cursor
	retval.LikedAt = v.InstanceLikesEdgeFragment.LikedAt
	retval.Node = v.InstanceLikesEdgeFragment.Node
	return &retval, nil
}

// AddLikeResponse is returned by AddLike on success.
type AddLikeResponse struct {
	AddLike AddLikeAddLikeInstanceLikesEdge `json:"addLike"`
}

// GetAddLike returns AddLikeResponse.AddLike, and is useful for accessing the field via an interface.
func (v *AddLikeResponse) GetAddLike() AddLikeAddLikeInstanceLikesEdge { return v.AddLike }

// AddMessageAddMessageChannelMessagesEdge includes the requested fields of the GraphQL type ChannelMessagesEdge.
type AddMessageAddMessageChannelMessagesEdge struct {
	ChannelMessagesEdgeFragment `json:"-"`
}

// GetCursor returns AddMessageAddMessageChannelMessagesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *AddMessageAddMessageChannelMessagesEdge) GetCursor() string {
	return v.ChannelMessagesEdgeFragment.Cursor
}

// GetNode returns AddMessageAddMessageChannelMessagesEdge.Node, and is useful for accessing the field via an interface.
func (v *AddMessageAddMessageChannelMessagesEdge) GetNode() ChannelMessagesEdgeFragmentNodeMessage {
	return v.ChannelMessagesEdgeFragment.Node
}

func (v *AddMessageAddMessageChannelMessagesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddMessageAddMessageChannelMessagesEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.AddMessageAddMessageChannelMessagesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ChannelMessagesEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddMessageAddMessageChannelMessagesEdge struct {
	Cursor string `json:"cursor"`

	Node ChannelMessagesEdgeFragmentNodeMessage `json:"node"`
}

func (v *AddMessageAddMessageChannelMessagesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddMessageAddMessageChannelMessagesEdge) __premarshalJSON() (*__premarshalAddMessageAddMessageChannelMessagesEdge, error) {
	var retval __premarshalAddMessageAddMessageChannelMessagesEdge

	retval.Cursor = v.ChannelMessagesEdgeFragment.Cursor
	retval.Node = v.ChannelMessagesEdgeFragment.Node
	return &retval, nil
}

// AddMessageResponse is returned by AddMessage on success.
type AddMessageResponse struct {
	AddMessage AddMessageAddMessageChannelMessagesEdge `json:"addMessage"`
}

// GetAddMessage returns AddMessageResponse.AddMessage, and is useful for accessing the field via an interface.
func (v *AddMessageResponse) GetAddMessage() AddMessageAddMessageChannelMessagesEdge {
	return v.AddMessage
}

// AddRoleAddRoleAuthor includes the requested fields of the GraphQL type Author.
type AddRoleAddRoleAuthor struct {
	AuthorFragment `json:"-"`
}

// GetId returns AddRoleAddRoleAuthor.Id, and is useful for accessing the field via an interface.
func (v *AddRoleAddRoleAuthor) GetId() uuid.UUID { return v.AuthorFragment.Id }

// GetUserId returns AddRoleAddRoleAuthor.UserId, and is useful for accessing the field via an interface.
func (v *AddRoleAddRoleAuthor) GetUserId() uuid.UUID { return v.AuthorFragment.UserId }

// GetInstanceId returns AddRoleAddRoleAuthor.InstanceId, and is useful for accessing the field via an interface.
func (v *AddRoleAddRoleAuthor) GetInstanceId() uuid.UUID { return v.AuthorFragment.InstanceId }

// GetName returns AddRoleAddRoleAuthor.Name, and is useful for accessing the field via an interface.
func (v *AddRoleAddRoleAuthor) GetName() string { return v.AuthorFragment.Name }

// GetAvatar returns AddRoleAddRoleAuthor.Avatar, and is useful for accessing the field via an interface.
func (v *AddRoleAddRoleAuthor) GetAvatar() string { return v.AuthorFragment.Avatar }

// GetBio returns AddRoleAddRoleAuthor.Bio, and is useful for accessing the field via an interface.
func (v *AddRoleAddRoleAuthor) GetBio() string { return v.AuthorFragment.Bio }

// GetRoles returns AddRoleAddRoleAuthor.Roles, and is useful for accessing the field via an interface.
func (v *AddRoleAddRoleAuthor) GetRoles() []Role { return v.AuthorFragment.Roles }

// GetCreatedAt returns AddRoleAddRoleAuthor.CreatedAt, and is useful for accessing the field via an interface.
func (v *AddRoleAddRoleAuthor) GetCreatedAt() time.Time { return v.AuthorFragment.CreatedAt }

func (v *AddRoleAddRoleAuthor) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*AddRoleAddRoleAuthor
		graphql.NoUnmarshalJSON
	}
	firstPass.AddRoleAddRoleAuthor = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AuthorFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalAddRoleAddRoleAuthor struct {
	Id uuid.UUID `json:"id"`

	UserId uuid.UUID `json:"userId"`

	InstanceId uuid.UUID `json:"instanceId"`

	Name string `json:"name"`

	Avatar string `json:"avatar"`

	Bio string `json:"bio"`

	Roles []Role `json:"roles"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *AddRoleAddRoleAuthor) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *AddRoleAddRoleAuthor) __premarshalJSON() (*__premarshalAddRoleAddRoleAuthor, error) {
	var retval __premarshalAddRoleAddRoleAuthor

	retval.Id = v.AuthorFragment.Id
	retval.UserId = v.AuthorFragment.UserId
	retval.InstanceId = v.AuthorFragment.InstanceId
	retval.Name = v.AuthorFragment.Name
	retval.Avatar = v.AuthorFragment.Avatar
	retval.Bio = v.AuthorFragment.Bio
	retval.Roles = v.AuthorFragment.Roles
	retval.CreatedAt = v.AuthorFragment.CreatedAt
	return &retval, nil
}

// AddRoleResponse is returned by AddRole on success.
type AddRoleResponse struct {
	AddRole AddRoleAddRoleAuthor `json:"addRole"`
}

// GetAddRole returns AddRoleResponse.AddRole, and is useful for accessing the field via an interface.
func (v *AddRoleResponse) GetAddRole() AddRoleAddRoleAuthor { return v.AddRole }

// AuthorFragment includes the GraphQL fields of Author requested by the fragment AuthorFragment.
type AuthorFragment struct {
	Id         uuid.UUID `json:"id"`
	UserId     uuid.UUID `json:"userId"`
	InstanceId uuid.UUID `json:"instanceId"`
	Name       string    `json:"name"`
	Avatar     string    `json:"avatar"`
	Bio        string    `json:"bio"`
	Roles      []Role    `json:"roles"`
	CreatedAt  time.Time `json:"createdAt"`
}

// GetId returns AuthorFragment.Id, and is useful for accessing the field via an interface.
func (v *AuthorFragment) GetId() uuid.UUID { return v.Id }

// GetUserId returns AuthorFragment.UserId, and is useful for accessing the field via an interface.
func (v *AuthorFragment) GetUserId() uuid.UUID { return v.UserId }

// GetInstanceId returns AuthorFragment.InstanceId, and is useful for accessing the field via an interface.
func (v *AuthorFragment) GetInstanceId() uuid.UUID { return v.InstanceId }

// GetName returns AuthorFragment.Name, and is useful for accessing the field via an interface.
func (v *AuthorFragment) GetName() string { return v.Name }

// GetAvatar returns AuthorFragment.Avatar, and is useful for accessing the field via an interface.
func (v *AuthorFragment) GetAvatar() string { return v.Avatar }

// GetBio returns AuthorFragment.Bio, and is useful for accessing the field via an interface.
func (v *AuthorFragment) GetBio() string { return v.Bio }

// GetRoles returns AuthorFragment.Roles, and is useful for accessing the field via an interface.
func (v *AuthorFragment) GetRoles() []Role { return v.Roles }

// GetCreatedAt returns AuthorFragment.CreatedAt, and is useful for accessing the field via an interface.
func (v *AuthorFragment) GetCreatedAt() time.Time { return v.CreatedAt }

// ChannelChannel includes the requested fields of the GraphQL type Channel.
type ChannelChannel struct {
	ChannelFragment `json:"-"`
}

// GetId returns ChannelChannel.Id, and is useful for accessing the field via an interface.
func (v *ChannelChannel) GetId() uuid.UUID { return v.ChannelFragment.Id }

// GetName returns ChannelChannel.Name, and is useful for accessing the field via an interface.
func (v *ChannelChannel) GetName() string { return v.ChannelFragment.Name }

// GetRank returns ChannelChannel.Rank, and is useful for accessing the field via an interface.
func (v *ChannelChannel) GetRank() string { return v.ChannelFragment.Rank }

// GetInstanceId returns ChannelChannel.InstanceId, and is useful for accessing the field via an interface.
func (v *ChannelChannel) GetInstanceId() uuid.UUID { return v.ChannelFragment.InstanceId }

// GetReaders returns ChannelChannel.Readers, and is useful for accessing the field via an interface.
func (v *ChannelChannel) GetReaders() []Role { return v.ChannelFragment.Readers }

// GetPublishers returns ChannelChannel.Publishers, and is useful for accessing the field via an interface.
func (v *ChannelChannel) GetPublishers() []Role { return v.ChannelFragment.Publishers }

// GetCreatedAt returns ChannelChannel.CreatedAt, and is useful for accessing the field via an interface.
func (v *ChannelChannel) GetCreatedAt() time.Time { return v.ChannelFragment.CreatedAt }

// GetUpdatedAt returns ChannelChannel.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ChannelChannel) GetUpdatedAt() time.Time { return v.ChannelFragment.UpdatedAt }

// GetLastMessageAddedAt returns ChannelChannel.LastMessageAddedAt, and is useful for accessing the field via an interface.
func (v *ChannelChannel) GetLastMessageAddedAt() *time.Time {
	return v.ChannelFragment.LastMessageAddedAt
}

// GetMessageCount returns ChannelChannel.MessageCount, and is useful for accessing the field via an interface.
func (v *ChannelChannel) GetMessageCount() int { return v.ChannelFragment.MessageCount }

// GetIsCategory returns ChannelChannel.IsCategory, and is useful for accessing the field via an interface.
func (v *ChannelChannel) GetIsCategory() bool { return v.ChannelFragment.IsCategory }

// GetIsComments returns ChannelChannel.IsComments, and is useful for accessing the field via an interface.
func (v *ChannelChannel) GetIsComments() bool { return v.ChannelFragment.IsComments }

// GetMessagesConnection returns ChannelChannel.MessagesConnection, and is useful for accessing the field via an interface.
func (v *ChannelChannel) GetMessagesConnection() ChannelFragmentMessagesConnectionChannelMessagesConnection {
	return v.ChannelFragment.MessagesConnection
}

func (v *ChannelChannel) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ChannelChannel
		graphql.NoUnmarshalJSON
	}
	firstPass.ChannelChannel = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ChannelFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalChannelChannel struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Rank string `json:"rank"`

	InstanceId uuid.UUID `json:"instanceId"`

	Readers []Role `json:"readers"`

	Publishers []Role `json:"publishers"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	LastMessageAddedAt *time.Time `json:"lastMessageAddedAt"`

	MessageCount int `json:"messageCount"`

	IsCategory bool `json:"isCategory"`

	IsComments bool `json:"isComments"`

	MessagesConnection ChannelFragmentMessagesConnectionChannelMessagesConnection `json:"messagesConnection"`
}

func (v *ChannelChannel) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ChannelChannel) __premarshalJSON() (*__premarshalChannelChannel, error) {
	var retval __premarshalChannelChannel

	retval.Id = v.ChannelFragment.Id
	retval.Name = v.ChannelFragment.Name
	retval.Rank = v.ChannelFragment.Rank
	retval.InstanceId = v.ChannelFragment.InstanceId
	retval.Readers = v.ChannelFragment.Readers
	retval.Publishers = v.ChannelFragment.Publishers
	retval.CreatedAt = v.ChannelFragment.CreatedAt
	retval.UpdatedAt = v.ChannelFragment.UpdatedAt
	retval.LastMessageAddedAt = v.ChannelFragment.LastMessageAddedAt
	retval.MessageCount = v.ChannelFragment.MessageCount
	retval.IsCategory = v.ChannelFragment.IsCategory
	retval.IsComments = v.ChannelFragment.IsComments
	retval.MessagesConnection = v.ChannelFragment.MessagesConnection
	return &retval, nil
}

// ChannelFragment includes the GraphQL fields of Channel requested by the fragment ChannelFragment.
type ChannelFragment struct {
	Id                 uuid.UUID                                                  `json:"id"`
	Name               string                                                     `json:"name"`
	Rank               string                                                     `json:"rank"`
	InstanceId         uuid.UUID                                                  `json:"instanceId"`
	Readers            []Role                                                     `json:"readers"`
	Publishers         []Role                                                     `json:"publishers"`
	CreatedAt          time.Time                                                  `json:"createdAt"`
	UpdatedAt          time.Time                                                  `json:"updatedAt"`
	LastMessageAddedAt *time.Time                                                 `json:"lastMessageAddedAt"`
	MessageCount       int                                                        `json:"messageCount"`
	IsCategory         bool                                                       `json:"isCategory"`
	IsComments         bool                                                       `json:"isComments"`
	MessagesConnection ChannelFragmentMessagesConnectionChannelMessagesConnection `json:"messagesConnection"`
}

// GetId returns ChannelFragment.Id, and is useful for accessing the field via an interface.
func (v *ChannelFragment) GetId() uuid.UUID { return v.Id }

// GetName returns ChannelFragment.Name, and is useful for accessing the field via an interface.
func (v *ChannelFragment) GetName() string { return v.Name }

// GetRank returns ChannelFragment.Rank, and is useful for accessing the field via an interface.
func (v *ChannelFragment) GetRank() string { return v.Rank }

// GetInstanceId returns ChannelFragment.InstanceId, and is useful for accessing the field via an interface.
func (v *ChannelFragment) GetInstanceId() uuid.UUID { return v.InstanceId }

// GetReaders returns ChannelFragment.Readers, and is useful for accessing the field via an interface.
func (v *ChannelFragment) GetReaders() []Role { return v.Readers }

// GetPublishers returns ChannelFragment.Publishers, and is useful for accessing the field via an interface.
func (v *ChannelFragment) GetPublishers() []Role { return v.Publishers }

// GetCreatedAt returns ChannelFragment.CreatedAt, and is useful for accessing the field via an interface.
func (v *ChannelFragment) GetCreatedAt() time.Time { return v.CreatedAt }

// GetUpdatedAt returns ChannelFragment.UpdatedAt, and is useful for accessing the field via an interface.
func (v *ChannelFragment) GetUpdatedAt() time.Time { return v.UpdatedAt }

// GetLastMessageAddedAt returns ChannelFragment.LastMessageAddedAt, and is useful for accessing the field via an interface.
func (v *ChannelFragment) GetLastMessageAddedAt() *time.Time { return v.LastMessageAddedAt }

// GetMessageCount returns ChannelFragment.MessageCount, and is useful for accessing the field via an interface.
func (v *ChannelFragment) GetMessageCount() int { return v.MessageCount }

// GetIsCategory returns ChannelFragment.IsCategory, and is useful for accessing the field via an interface.
func (v *ChannelFragment) GetIsCategory() bool { return v.IsCategory }

// GetIsComments returns ChannelFragment.IsComments, and is useful for accessing the field via an interface.
func (v *ChannelFragment) GetIsComments() bool { return v.IsComments }

// GetMessagesConnection returns ChannelFragment.MessagesConnection, and is useful for accessing the field via an interface.
func (v *ChannelFragment) GetMessagesConnection() ChannelFragmentMessagesConnectionChannelMessagesConnection {
	return v.MessagesConnection
}

// ChannelFragmentMessagesConnectionChannelMessagesConnection includes the requested fields of the GraphQL type ChannelMessagesConnection.
type ChannelFragmentMessagesConnectionChannelMessagesConnection struct {
	Edges    []ChannelFragmentMessagesConnectionChannelMessagesConnectionEdgesChannelMessagesEdge `json:"edges"`
	PageInfo ChannelFragmentMessagesConnectionChannelMessagesConnectionPageInfo                   `json:"pageInfo"`
}

// GetEdges returns ChannelFragmentMessagesConnectionChannelMessagesConnection.Edges, and is useful for accessing the field via an interface.
func (v *ChannelFragmentMessagesConnectionChannelMessagesConnection) GetEdges() []ChannelFragmentMessagesConnectionChannelMessagesConnectionEdgesChannelMessagesEdge {
	return v.Edges
}

// GetPageInfo returns ChannelFragmentMessagesConnectionChannelMessagesConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *ChannelFragmentMessagesConnectionChannelMessagesConnection) GetPageInfo() ChannelFragmentMessagesConnectionChannelMessagesConnectionPageInfo {
	return v.PageInfo
}

// ChannelFragmentMessagesConnectionChannelMessagesConnectionEdgesChannelMessagesEdge includes the requested fields of the GraphQL type ChannelMessagesEdge.
type ChannelFragmentMessagesConnectionChannelMessagesConnectionEdgesChannelMessagesEdge struct {
	ChannelMessagesEdgeFragment `json:"-"`
}

// GetCursor returns ChannelFragmentMessagesConnectionChannelMessagesConnectionEdgesChannelMessagesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *ChannelFragmentMessagesConnectionChannelMessagesConnectionEdgesChannelMessagesEdge) GetCursor() string {
	return v.ChannelMessagesEdgeFragment.Cursor
}

// GetNode returns ChannelFragmentMessagesConnectionChannelMessagesConnectionEdgesChannelMessagesEdge.Node, and is useful for accessing the field via an interface.
func (v *ChannelFragmentMessagesConnectionChannelMessagesConnectionEdgesChannelMessagesEdge) GetNode() ChannelMessagesEdgeFragmentNodeMessage {
	return v.ChannelMessagesEdgeFragment.Node
}

func (v *ChannelFragmentMessagesConnectionChannelMessagesConnectionEdgesChannelMessagesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ChannelFragmentMessagesConnectionChannelMessagesConnectionEdgesChannelMessagesEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.ChannelFragmentMessagesConnectionChannelMessagesConnectionEdgesChannelMessagesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ChannelMessagesEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalChannelFragmentMessagesConnectionChannelMessagesConnectionEdgesChannelMessagesEdge struct {
	Cursor string `json:"cursor"`

	Node ChannelMessagesEdgeFragmentNodeMessage `json:"node"`
}

func (v *ChannelFragmentMessagesConnectionChannelMessagesConnectionEdgesChannelMessagesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ChannelFragmentMessagesConnectionChannelMessagesConnectionEdgesChannelMessagesEdge) __premarshalJSON() (*__premarshalChannelFragmentMessagesConnectionChannelMessagesConnectionEdgesChannelMessagesEdge, error) {
	var retval __premarshalChannelFragmentMessagesConnectionChannelMessagesConnectionEdgesChannelMessagesEdge

	retval.Cursor = v.ChannelMessagesEdgeFragment.Cursor
	retval.Node = v.ChannelMessagesEdgeFragment.Node
	return &retval, nil
}

// ChannelFragmentMessagesConnectionChannelMessagesConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type ChannelFragmentMessagesConnectionChannelMessagesConnectionPageInfo struct {
	PageInfoFragment `json:"-"`
}

// GetHasNextPage returns ChannelFragmentMessagesConnectionChannelMessagesConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *ChannelFragmentMessagesConnectionChannelMessagesConnectionPageInfo) GetHasNextPage() bool {
	return v.PageInfoFragment.HasNextPage
}

// GetHasPreviousPage returns ChannelFragmentMessagesConnectionChannelMessagesConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *ChannelFragmentMessagesConnectionChannelMessagesConnectionPageInfo) GetHasPreviousPage() bool {
	return v.PageInfoFragment.HasPreviousPage
}

func (v *ChannelFragmentMessagesConnectionChannelMessagesConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ChannelFragmentMessagesConnectionChannelMessagesConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.ChannelFragmentMessagesConnectionChannelMessagesConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfoFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalChannelFragmentMessagesConnectionChannelMessagesConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	HasPreviousPage bool `json:"hasPreviousPage"`
}

func (v *ChannelFragmentMessagesConnectionChannelMessagesConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ChannelFragmentMessagesConnectionChannelMessagesConnectionPageInfo) __premarshalJSON() (*__premarshalChannelFragmentMessagesConnectionChannelMessagesConnectionPageInfo, error) {
	var retval __premarshalChannelFragmentMessagesConnectionChannelMessagesConnectionPageInfo

	retval.HasNextPage = v.PageInfoFragment.HasNextPage
	retval.HasPreviousPage = v.PageInfoFragment.HasPreviousPage
	return &retval, nil
}

type ChannelInput struct {
	Name       string    `json:"name"`
	InstanceId uuid.UUID `json:"instanceId"`
	Publishers []Role    `json:"publishers"`
	Readers    []Role    `json:"readers"`
	IsCategory bool      `json:"isCategory"`
}

// GetName returns ChannelInput.Name, and is useful for accessing the field via an interface.
func (v *ChannelInput) GetName() string { return v.Name }

// GetInstanceId returns ChannelInput.InstanceId, and is useful for accessing the field via an interface.
func (v *ChannelInput) GetInstanceId() uuid.UUID { return v.InstanceId }

// GetPublishers returns ChannelInput.Publishers, and is useful for accessing the field via an interface.
func (v *ChannelInput) GetPublishers() []Role { return v.Publishers }

// GetReaders returns ChannelInput.Readers, and is useful for accessing the field via an interface.
func (v *ChannelInput) GetReaders() []Role { return v.Readers }

// GetIsCategory returns ChannelInput.IsCategory, and is useful for accessing the field via an interface.
func (v *ChannelInput) GetIsCategory() bool { return v.IsCategory }

// ChannelMessagesEdgeFragment includes the GraphQL fields of ChannelMessagesEdge requested by the fragment ChannelMessagesEdgeFragment.
type ChannelMessagesEdgeFragment struct {
	Cursor string                                 `json:"cursor"`
	Node   ChannelMessagesEdgeFragmentNodeMessage `json:"node"`
}

// GetCursor returns ChannelMessagesEdgeFragment.Cursor, and is useful for accessing the field via an interface.
func (v *ChannelMessagesEdgeFragment) GetCursor() string { return v.Cursor }

// GetNode returns ChannelMessagesEdgeFragment.Node, and is useful for accessing the field via an interface.
func (v *ChannelMessagesEdgeFragment) GetNode() ChannelMessagesEdgeFragmentNodeMessage { return v.Node }

// ChannelMessagesEdgeFragmentNodeMessage includes the requested fields of the GraphQL type Message.
type ChannelMessagesEdgeFragmentNodeMessage struct {
	MessageFragment `json:"-"`
}

// GetId returns ChannelMessagesEdgeFragmentNodeMessage.Id, and is useful for accessing the field via an interface.
func (v *ChannelMessagesEdgeFragmentNodeMessage) GetId() uuid.UUID { return v.MessageFragment.Id }

// GetAuthor returns ChannelMessagesEdgeFragmentNodeMessage.Author, and is useful for accessing the field via an interface.
func (v *ChannelMessagesEdgeFragmentNodeMessage) GetAuthor() MessageFragmentAuthor {
	return v.MessageFragment.Author
}

// GetText returns ChannelMessagesEdgeFragmentNodeMessage.Text, and is useful for accessing the field via an interface.
func (v *ChannelMessagesEdgeFragmentNodeMessage) GetText() string { return v.MessageFragment.Text }

// GetCreatedAt returns ChannelMessagesEdgeFragmentNodeMessage.CreatedAt, and is useful for accessing the field via an interface.
func (v *ChannelMessagesEdgeFragmentNodeMessage) GetCreatedAt() time.Time {
	return v.MessageFragment.CreatedAt
}

// GetChannelId returns ChannelMessagesEdgeFragmentNodeMessage.ChannelId, and is useful for accessing the field via an interface.
func (v *ChannelMessagesEdgeFragmentNodeMessage) GetChannelId() uuid.UUID {
	return v.MessageFragment.ChannelId
}

// GetRepliedMessage returns ChannelMessagesEdgeFragmentNodeMessage.RepliedMessage, and is useful for accessing the field via an interface.
func (v *ChannelMessagesEdgeFragmentNodeMessage) GetRepliedMessage() *MessageFragmentRepliedMessage {
	return v.MessageFragment.RepliedMessage
}

// GetImageUrls returns ChannelMessagesEdgeFragmentNodeMessage.ImageUrls, and is useful for accessing the field via an interface.
func (v *ChannelMessagesEdgeFragmentNodeMessage) GetImageUrls() []string {
	return v.MessageFragment.ImageUrls
}

func (v *ChannelMessagesEdgeFragmentNodeMessage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ChannelMessagesEdgeFragmentNodeMessage
		graphql.NoUnmarshalJSON
	}
	firstPass.ChannelMessagesEdgeFragmentNodeMessage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MessageFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalChannelMessagesEdgeFragmentNodeMessage struct {
	Id uuid.UUID `json:"id"`

	Author MessageFragmentAuthor `json:"author"`

	Text string `json:"text"`

	CreatedAt time.Time `json:"createdAt"`

	ChannelId uuid.UUID `json:"channelId"`

	RepliedMessage *MessageFragmentRepliedMessage `json:"repliedMessage"`

	ImageUrls []string `json:"imageUrls"`
}

func (v *ChannelMessagesEdgeFragmentNodeMessage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ChannelMessagesEdgeFragmentNodeMessage) __premarshalJSON() (*__premarshalChannelMessagesEdgeFragmentNodeMessage, error) {
	var retval __premarshalChannelMessagesEdgeFragmentNodeMessage

	retval.Id = v.MessageFragment.Id
	retval.Author = v.MessageFragment.Author
	retval.Text = v.MessageFragment.Text
	retval.CreatedAt = v.MessageFragment.CreatedAt
	retval.ChannelId = v.MessageFragment.ChannelId
	retval.RepliedMessage = v.MessageFragment.RepliedMessage
	retval.ImageUrls = v.MessageFragment.ImageUrls
	return &retval, nil
}

type ChannelReorderInput struct {
	PrevChannelId *uuid.UUID `json:"prevChannelId"`
}

// GetPrevChannelId returns ChannelReorderInput.PrevChannelId, and is useful for accessing the field via an interface.
func (v *ChannelReorderInput) GetPrevChannelId() *uuid.UUID { return v.PrevChannelId }

// ChannelResponse is returned by Channel on success.
type ChannelResponse struct {
	Channel ChannelChannel `json:"channel"`
}

// GetChannel returns ChannelResponse.Channel, and is useful for accessing the field via an interface.
func (v *ChannelResponse) GetChannel() ChannelChannel { return v.Channel }

// CheckInviteCheckInvite includes the requested fields of the GraphQL type Invite.
type CheckInviteCheckInvite struct {
	Instance       *CheckInviteCheckInviteInstance `json:"instance"`
	InviteFragment `json:"-"`
}

// GetInstance returns CheckInviteCheckInvite.Instance, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInvite) GetInstance() *CheckInviteCheckInviteInstance { return v.Instance }

// GetId returns CheckInviteCheckInvite.Id, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInvite) GetId() uuid.UUID { return v.InviteFragment.Id }

// GetInstanceId returns CheckInviteCheckInvite.InstanceId, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInvite) GetInstanceId() uuid.UUID { return v.InviteFragment.InstanceId }

// GetCode returns CheckInviteCheckInvite.Code, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInvite) GetCode() string { return v.InviteFragment.Code }

// GetCreatedAt returns CheckInviteCheckInvite.CreatedAt, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInvite) GetCreatedAt() time.Time { return v.InviteFragment.CreatedAt }

// GetExpiresAt returns CheckInviteCheckInvite.ExpiresAt, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInvite) GetExpiresAt() *time.Time { return v.InviteFragment.ExpiresAt }

// GetRedemptions returns CheckInviteCheckInvite.Redemptions, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInvite) GetRedemptions() *int { return v.InviteFragment.Redemptions }

// GetAuthor returns CheckInviteCheckInvite.Author, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInvite) GetAuthor() InviteFragmentAuthor { return v.InviteFragment.Author }

func (v *CheckInviteCheckInvite) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CheckInviteCheckInvite
		graphql.NoUnmarshalJSON
	}
	firstPass.CheckInviteCheckInvite = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InviteFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCheckInviteCheckInvite struct {
	Instance *CheckInviteCheckInviteInstance `json:"instance"`

	Id uuid.UUID `json:"id"`

	InstanceId uuid.UUID `json:"instanceId"`

	Code string `json:"code"`

	CreatedAt time.Time `json:"createdAt"`

	ExpiresAt *time.Time `json:"expiresAt"`

	Redemptions *int `json:"redemptions"`

	Author InviteFragmentAuthor `json:"author"`
}

func (v *CheckInviteCheckInvite) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CheckInviteCheckInvite) __premarshalJSON() (*__premarshalCheckInviteCheckInvite, error) {
	var retval __premarshalCheckInviteCheckInvite

	retval.Instance = v.Instance
	retval.Id = v.InviteFragment.Id
	retval.InstanceId = v.InviteFragment.InstanceId
	retval.Code = v.InviteFragment.Code
	retval.CreatedAt = v.InviteFragment.CreatedAt
	retval.ExpiresAt = v.InviteFragment.ExpiresAt
	retval.Redemptions = v.InviteFragment.Redemptions
	retval.Author = v.InviteFragment.Author
	return &retval, nil
}

// CheckInviteCheckInviteInstance includes the requested fields of the GraphQL type Instance.
type CheckInviteCheckInviteInstance struct {
	InstanceFragment `json:"-"`
}

// GetId returns CheckInviteCheckInviteInstance.Id, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInviteInstance) GetId() uuid.UUID { return v.InstanceFragment.Id }

// GetName returns CheckInviteCheckInviteInstance.Name, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInviteInstance) GetName() string { return v.InstanceFragment.Name }

// GetAuthor returns CheckInviteCheckInviteInstance.Author, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInviteInstance) GetAuthor() InstanceFragmentAuthor {
	return v.InstanceFragment.Author
}

// GetReadAccess returns CheckInviteCheckInviteInstance.ReadAccess, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInviteInstance) GetReadAccess() Access { return v.InstanceFragment.ReadAccess }

// GetIcon returns CheckInviteCheckInviteInstance.Icon, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInviteInstance) GetIcon() string { return v.InstanceFragment.Icon }

// GetCreatedAt returns CheckInviteCheckInviteInstance.CreatedAt, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInviteInstance) GetCreatedAt() time.Time {
	return v.InstanceFragment.CreatedAt
}

// GetDescription returns CheckInviteCheckInviteInstance.Description, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInviteInstance) GetDescription() string {
	return v.InstanceFragment.Description
}

// GetShowAuthor returns CheckInviteCheckInviteInstance.ShowAuthor, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInviteInstance) GetShowAuthor() bool { return v.InstanceFragment.ShowAuthor }

// GetShowChat returns CheckInviteCheckInviteInstance.ShowChat, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInviteInstance) GetShowChat() bool { return v.InstanceFragment.ShowChat }

// GetShowLikes returns CheckInviteCheckInviteInstance.ShowLikes, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInviteInstance) GetShowLikes() bool { return v.InstanceFragment.ShowLikes }

// GetShowComments returns CheckInviteCheckInviteInstance.ShowComments, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInviteInstance) GetShowComments() bool {
	return v.InstanceFragment.ShowComments
}

// GetLikesCount returns CheckInviteCheckInviteInstance.LikesCount, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInviteInstance) GetLikesCount() int { return v.InstanceFragment.LikesCount }

// GetCommentsCount returns CheckInviteCheckInviteInstance.CommentsCount, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInviteInstance) GetCommentsCount() int {
	return v.InstanceFragment.CommentsCount
}

// GetLikesConnection returns CheckInviteCheckInviteInstance.LikesConnection, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInviteInstance) GetLikesConnection() InstanceFragmentLikesConnectionInstanceLikesConnection {
	return v.InstanceFragment.LikesConnection
}

// GetChannelsConnection returns CheckInviteCheckInviteInstance.ChannelsConnection, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInviteInstance) GetChannelsConnection() InstanceFragmentChannelsConnectionInstanceChannelsConnection {
	return v.InstanceFragment.ChannelsConnection
}

// GetAuthorsConnection returns CheckInviteCheckInviteInstance.AuthorsConnection, and is useful for accessing the field via an interface.
func (v *CheckInviteCheckInviteInstance) GetAuthorsConnection() InstanceFragmentAuthorsConnectionInstanceAuthorsConnection {
	return v.InstanceFragment.AuthorsConnection
}

func (v *CheckInviteCheckInviteInstance) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CheckInviteCheckInviteInstance
		graphql.NoUnmarshalJSON
	}
	firstPass.CheckInviteCheckInviteInstance = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstanceFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCheckInviteCheckInviteInstance struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Author InstanceFragmentAuthor `json:"author"`

	ReadAccess Access `json:"readAccess"`

	Icon string `json:"icon"`

	CreatedAt time.Time `json:"createdAt"`

	Description string `json:"description"`

	ShowAuthor bool `json:"showAuthor"`

	ShowChat bool `json:"showChat"`

	ShowLikes bool `json:"showLikes"`

	ShowComments bool `json:"showComments"`

	LikesCount int `json:"likesCount"`

	CommentsCount int `json:"commentsCount"`

	LikesConnection InstanceFragmentLikesConnectionInstanceLikesConnection `json:"likesConnection"`

	ChannelsConnection InstanceFragmentChannelsConnectionInstanceChannelsConnection `json:"channelsConnection"`

	AuthorsConnection InstanceFragmentAuthorsConnectionInstanceAuthorsConnection `json:"authorsConnection"`
}

func (v *CheckInviteCheckInviteInstance) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CheckInviteCheckInviteInstance) __premarshalJSON() (*__premarshalCheckInviteCheckInviteInstance, error) {
	var retval __premarshalCheckInviteCheckInviteInstance

	retval.Id = v.InstanceFragment.Id
	retval.Name = v.InstanceFragment.Name
	retval.Author = v.InstanceFragment.Author
	retval.ReadAccess = v.InstanceFragment.ReadAccess
	retval.Icon = v.InstanceFragment.Icon
	retval.CreatedAt = v.InstanceFragment.CreatedAt
	retval.Description = v.InstanceFragment.Description
	retval.ShowAuthor = v.InstanceFragment.ShowAuthor
	retval.ShowChat = v.InstanceFragment.ShowChat
	retval.ShowLikes = v.InstanceFragment.ShowLikes
	retval.ShowComments = v.InstanceFragment.ShowComments
	retval.LikesCount = v.InstanceFragment.LikesCount
	retval.CommentsCount = v.InstanceFragment.CommentsCount
	retval.LikesConnection = v.InstanceFragment.LikesConnection
	retval.ChannelsConnection = v.InstanceFragment.ChannelsConnection
	retval.AuthorsConnection = v.InstanceFragment.AuthorsConnection
	return &retval, nil
}

// CheckInviteResponse is returned by CheckInvite on success.
type CheckInviteResponse struct {
	CheckInvite CheckInviteCheckInvite `json:"checkInvite"`
}

// GetCheckInvite returns CheckInviteResponse.CheckInvite, and is useful for accessing the field via an interface.
func (v *CheckInviteResponse) GetCheckInvite() CheckInviteCheckInvite { return v.CheckInvite }

// InstanceAuthorsEdgeFragment includes the GraphQL fields of InstanceAuthorsEdge requested by the fragment InstanceAuthorsEdgeFragment.
type InstanceAuthorsEdgeFragment struct {
	Cursor string                                `json:"cursor"`
	Node   InstanceAuthorsEdgeFragmentNodeAuthor `json:"node"`
}

// GetCursor returns InstanceAuthorsEdgeFragment.Cursor, and is useful for accessing the field via an interface.
func (v *InstanceAuthorsEdgeFragment) GetCursor() string { return v.Cursor }

// GetNode returns InstanceAuthorsEdgeFragment.Node, and is useful for accessing the field via an interface.
func (v *InstanceAuthorsEdgeFragment) GetNode() InstanceAuthorsEdgeFragmentNodeAuthor { return v.Node }

// InstanceAuthorsEdgeFragmentNodeAuthor includes the requested fields of the GraphQL type Author.
type InstanceAuthorsEdgeFragmentNodeAuthor struct {
	AuthorFragment `json:"-"`
}

// GetId returns InstanceAuthorsEdgeFragmentNodeAuthor.Id, and is useful for accessing the field via an interface.
func (v *InstanceAuthorsEdgeFragmentNodeAuthor) GetId() uuid.UUID { return v.AuthorFragment.Id }

// GetUserId returns InstanceAuthorsEdgeFragmentNodeAuthor.UserId, and is useful for accessing the field via an interface.
func (v *InstanceAuthorsEdgeFragmentNodeAuthor) GetUserId() uuid.UUID { return v.AuthorFragment.UserId }

// GetInstanceId returns InstanceAuthorsEdgeFragmentNodeAuthor.InstanceId, and is useful for accessing the field via an interface.
func (v *InstanceAuthorsEdgeFragmentNodeAuthor) GetInstanceId() uuid.UUID {
	return v.AuthorFragment.InstanceId
}

// GetName returns InstanceAuthorsEdgeFragmentNodeAuthor.Name, and is useful for accessing the field via an interface.
func (v *InstanceAuthorsEdgeFragmentNodeAuthor) GetName() string { return v.AuthorFragment.Name }

// GetAvatar returns InstanceAuthorsEdgeFragmentNodeAuthor.Avatar, and is useful for accessing the field via an interface.
func (v *InstanceAuthorsEdgeFragmentNodeAuthor) GetAvatar() string { return v.AuthorFragment.Avatar }

// GetBio returns InstanceAuthorsEdgeFragmentNodeAuthor.Bio, and is useful for accessing the field via an interface.
func (v *InstanceAuthorsEdgeFragmentNodeAuthor) GetBio() string { return v.AuthorFragment.Bio }

// GetRoles returns InstanceAuthorsEdgeFragmentNodeAuthor.Roles, and is useful for accessing the field via an interface.
func (v *InstanceAuthorsEdgeFragmentNodeAuthor) GetRoles() []Role { return v.AuthorFragment.Roles }

// GetCreatedAt returns InstanceAuthorsEdgeFragmentNodeAuthor.CreatedAt, and is useful for accessing the field via an interface.
func (v *InstanceAuthorsEdgeFragmentNodeAuthor) GetCreatedAt() time.Time {
	return v.AuthorFragment.CreatedAt
}

func (v *InstanceAuthorsEdgeFragmentNodeAuthor) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InstanceAuthorsEdgeFragmentNodeAuthor
		graphql.NoUnmarshalJSON
	}
	firstPass.InstanceAuthorsEdgeFragmentNodeAuthor = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AuthorFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInstanceAuthorsEdgeFragmentNodeAuthor struct {
	Id uuid.UUID `json:"id"`

	UserId uuid.UUID `json:"userId"`

	InstanceId uuid.UUID `json:"instanceId"`

	Name string `json:"name"`

	Avatar string `json:"avatar"`

	Bio string `json:"bio"`

	Roles []Role `json:"roles"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *InstanceAuthorsEdgeFragmentNodeAuthor) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InstanceAuthorsEdgeFragmentNodeAuthor) __premarshalJSON() (*__premarshalInstanceAuthorsEdgeFragmentNodeAuthor, error) {
	var retval __premarshalInstanceAuthorsEdgeFragmentNodeAuthor

	retval.Id = v.AuthorFragment.Id
	retval.UserId = v.AuthorFragment.UserId
	retval.InstanceId = v.AuthorFragment.InstanceId
	retval.Name = v.AuthorFragment.Name
	retval.Avatar = v.AuthorFragment.Avatar
	retval.Bio = v.AuthorFragment.Bio
	retval.Roles = v.AuthorFragment.Roles
	retval.CreatedAt = v.AuthorFragment.CreatedAt
	return &retval, nil
}

// InstanceChannelsEdgeFragment includes the GraphQL fields of InstanceChannelsEdge requested by the fragment InstanceChannelsEdgeFragment.
type InstanceChannelsEdgeFragment struct {
	Cursor string                                  `json:"cursor"`
	Node   InstanceChannelsEdgeFragmentNodeChannel `json:"node"`
}

// GetCursor returns InstanceChannelsEdgeFragment.Cursor, and is useful for accessing the field via an interface.
func (v *InstanceChannelsEdgeFragment) GetCursor() string { return v.Cursor }

// GetNode returns InstanceChannelsEdgeFragment.Node, and is useful for accessing the field via an interface.
func (v *InstanceChannelsEdgeFragment) GetNode() InstanceChannelsEdgeFragmentNodeChannel {
	return v.Node
}

// InstanceChannelsEdgeFragmentNodeChannel includes the requested fields of the GraphQL type Channel.
type InstanceChannelsEdgeFragmentNodeChannel struct {
	ChannelFragment `json:"-"`
}

// GetId returns InstanceChannelsEdgeFragmentNodeChannel.Id, and is useful for accessing the field via an interface.
func (v *InstanceChannelsEdgeFragmentNodeChannel) GetId() uuid.UUID { return v.ChannelFragment.Id }

// GetName returns InstanceChannelsEdgeFragmentNodeChannel.Name, and is useful for accessing the field via an interface.
func (v *InstanceChannelsEdgeFragmentNodeChannel) GetName() string { return v.ChannelFragment.Name }

// GetRank returns InstanceChannelsEdgeFragmentNodeChannel.Rank, and is useful for accessing the field via an interface.
func (v *InstanceChannelsEdgeFragmentNodeChannel) GetRank() string { return v.ChannelFragment.Rank }

// GetInstanceId returns InstanceChannelsEdgeFragmentNodeChannel.InstanceId, and is useful for accessing the field via an interface.
func (v *InstanceChannelsEdgeFragmentNodeChannel) GetInstanceId() uuid.UUID {
	return v.ChannelFragment.InstanceId
}

// GetReaders returns InstanceChannelsEdgeFragmentNodeChannel.Readers, and is useful for accessing the field via an interface.
func (v *InstanceChannelsEdgeFragmentNodeChannel) GetReaders() []Role {
	return v.ChannelFragment.Readers
}

// GetPublishers returns InstanceChannelsEdgeFragmentNodeChannel.Publishers, and is useful for accessing the field via an interface.
func (v *InstanceChannelsEdgeFragmentNodeChannel) GetPublishers() []Role {
	return v.ChannelFragment.Publishers
}

// GetCreatedAt returns InstanceChannelsEdgeFragmentNodeChannel.CreatedAt, and is useful for accessing the field via an interface.
func (v *InstanceChannelsEdgeFragmentNodeChannel) GetCreatedAt() time.Time {
	return v.ChannelFragment.CreatedAt
}

// GetUpdatedAt returns InstanceChannelsEdgeFragmentNodeChannel.UpdatedAt, and is useful for accessing the field via an interface.
func (v *InstanceChannelsEdgeFragmentNodeChannel) GetUpdatedAt() time.Time {
	return v.ChannelFragment.UpdatedAt
}

// GetLastMessageAddedAt returns InstanceChannelsEdgeFragmentNodeChannel.LastMessageAddedAt, and is useful for accessing the field via an interface.
func (v *InstanceChannelsEdgeFragmentNodeChannel) GetLastMessageAddedAt() *time.Time {
	return v.ChannelFragment.LastMessageAddedAt
}

// GetMessageCount returns InstanceChannelsEdgeFragmentNodeChannel.MessageCount, and is useful for accessing the field via an interface.
func (v *InstanceChannelsEdgeFragmentNodeChannel) GetMessageCount() int {
	return v.ChannelFragment.MessageCount
}

// GetIsCategory returns InstanceChannelsEdgeFragmentNodeChannel.IsCategory, and is useful for accessing the field via an interface.
func (v *InstanceChannelsEdgeFragmentNodeChannel) GetIsCategory() bool {
	return v.ChannelFragment.IsCategory
}

// GetIsComments returns InstanceChannelsEdgeFragmentNodeChannel.IsComments, and is useful for accessing the field via an interface.
func (v *InstanceChannelsEdgeFragmentNodeChannel) GetIsComments() bool {
	return v.ChannelFragment.IsComments
}

// GetMessagesConnection returns InstanceChannelsEdgeFragmentNodeChannel.MessagesConnection, and is useful for accessing the field via an interface.
func (v *InstanceChannelsEdgeFragmentNodeChannel) GetMessagesConnection() ChannelFragmentMessagesConnectionChannelMessagesConnection {
	return v.ChannelFragment.MessagesConnection
}

func (v *InstanceChannelsEdgeFragmentNodeChannel) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InstanceChannelsEdgeFragmentNodeChannel
		graphql.NoUnmarshalJSON
	}
	firstPass.InstanceChannelsEdgeFragmentNodeChannel = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ChannelFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInstanceChannelsEdgeFragmentNodeChannel struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Rank string `json:"rank"`

	InstanceId uuid.UUID `json:"instanceId"`

	Readers []Role `json:"readers"`

	Publishers []Role `json:"publishers"`

	CreatedAt time.Time `json:"createdAt"`

	UpdatedAt time.Time `json:"updatedAt"`

	LastMessageAddedAt *time.Time `json:"lastMessageAddedAt"`

	MessageCount int `json:"messageCount"`

	IsCategory bool `json:"isCategory"`

	IsComments bool `json:"isComments"`

	MessagesConnection ChannelFragmentMessagesConnectionChannelMessagesConnection `json:"messagesConnection"`
}

func (v *InstanceChannelsEdgeFragmentNodeChannel) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InstanceChannelsEdgeFragmentNodeChannel) __premarshalJSON() (*__premarshalInstanceChannelsEdgeFragmentNodeChannel, error) {
	var retval __premarshalInstanceChannelsEdgeFragmentNodeChannel

	retval.Id = v.ChannelFragment.Id
	retval.Name = v.ChannelFragment.Name
	retval.Rank = v.ChannelFragment.Rank
	retval.InstanceId = v.ChannelFragment.InstanceId
	retval.Readers = v.ChannelFragment.Readers
	retval.Publishers = v.ChannelFragment.Publishers
	retval.CreatedAt = v.ChannelFragment.CreatedAt
	retval.UpdatedAt = v.ChannelFragment.UpdatedAt
	retval.LastMessageAddedAt = v.ChannelFragment.LastMessageAddedAt
	retval.MessageCount = v.ChannelFragment.MessageCount
	retval.IsCategory = v.ChannelFragment.IsCategory
	retval.IsComments = v.ChannelFragment.IsComments
	retval.MessagesConnection = v.ChannelFragment.MessagesConnection
	return &retval, nil
}

// InstanceFragment includes the GraphQL fields of Instance requested by the fragment InstanceFragment.
type InstanceFragment struct {
	Id                 uuid.UUID                                                    `json:"id"`
	Name               string                                                       `json:"name"`
	Author             InstanceFragmentAuthor                                       `json:"author"`
	ReadAccess         Access                                                       `json:"readAccess"`
	Icon               string                                                       `json:"icon"`
	CreatedAt          time.Time                                                    `json:"createdAt"`
	Description        string                                                       `json:"description"`
	ShowAuthor         bool                                                         `json:"showAuthor"`
	ShowChat           bool                                                         `json:"showChat"`
	ShowLikes          bool                                                         `json:"showLikes"`
	ShowComments       bool                                                         `json:"showComments"`
	LikesCount         int                                                          `json:"likesCount"`
	CommentsCount      int                                                          `json:"commentsCount"`
	LikesConnection    InstanceFragmentLikesConnectionInstanceLikesConnection       `json:"likesConnection"`
	ChannelsConnection InstanceFragmentChannelsConnectionInstanceChannelsConnection `json:"channelsConnection"`
	AuthorsConnection  InstanceFragmentAuthorsConnectionInstanceAuthorsConnection   `json:"authorsConnection"`
}

// GetId returns InstanceFragment.Id, and is useful for accessing the field via an interface.
func (v *InstanceFragment) GetId() uuid.UUID { return v.Id }

// GetName returns InstanceFragment.Name, and is useful for accessing the field via an interface.
func (v *InstanceFragment) GetName() string { return v.Name }

// GetAuthor returns InstanceFragment.Author, and is useful for accessing the field via an interface.
func (v *InstanceFragment) GetAuthor() InstanceFragmentAuthor { return v.Author }

// GetReadAccess returns InstanceFragment.ReadAccess, and is useful for accessing the field via an interface.
func (v *InstanceFragment) GetReadAccess() Access { return v.ReadAccess }

// GetIcon returns InstanceFragment.Icon, and is useful for accessing the field via an interface.
func (v *InstanceFragment) GetIcon() string { return v.Icon }

// GetCreatedAt returns InstanceFragment.CreatedAt, and is useful for accessing the field via an interface.
func (v *InstanceFragment) GetCreatedAt() time.Time { return v.CreatedAt }

// GetDescription returns InstanceFragment.Description, and is useful for accessing the field via an interface.
func (v *InstanceFragment) GetDescription() string { return v.Description }

// GetShowAuthor returns InstanceFragment.ShowAuthor, and is useful for accessing the field via an interface.
func (v *InstanceFragment) GetShowAuthor() bool { return v.ShowAuthor }

// GetShowChat returns InstanceFragment.ShowChat, and is useful for accessing the field via an interface.
func (v *InstanceFragment) GetShowChat() bool { return v.ShowChat }

// GetShowLikes returns InstanceFragment.ShowLikes, and is useful for accessing the field via an interface.
func (v *InstanceFragment) GetShowLikes() bool { return v.ShowLikes }

// GetShowComments returns InstanceFragment.ShowComments, and is useful for accessing the field via an interface.
func (v *InstanceFragment) GetShowComments() bool { return v.ShowComments }

// GetLikesCount returns InstanceFragment.LikesCount, and is useful for accessing the field via an interface.
func (v *InstanceFragment) GetLikesCount() int { return v.LikesCount }

// GetCommentsCount returns InstanceFragment.CommentsCount, and is useful for accessing the field via an interface.
func (v *InstanceFragment) GetCommentsCount() int { return v.CommentsCount }

// GetLikesConnection returns InstanceFragment.LikesConnection, and is useful for accessing the field via an interface.
func (v *InstanceFragment) GetLikesConnection() InstanceFragmentLikesConnectionInstanceLikesConnection {
	return v.LikesConnection
}

// GetChannelsConnection returns InstanceFragment.ChannelsConnection, and is useful for accessing the field via an interface.
func (v *InstanceFragment) GetChannelsConnection() InstanceFragmentChannelsConnectionInstanceChannelsConnection {
	return v.ChannelsConnection
}

// GetAuthorsConnection returns InstanceFragment.AuthorsConnection, and is useful for accessing the field via an interface.
func (v *InstanceFragment) GetAuthorsConnection() InstanceFragmentAuthorsConnectionInstanceAuthorsConnection {
	return v.AuthorsConnection
}

// InstanceFragmentAuthor includes the requested fields of the GraphQL type Author.
type InstanceFragmentAuthor struct {
	AuthorFragment `json:"-"`
}

// GetId returns InstanceFragmentAuthor.Id, and is useful for accessing the field via an interface.
func (v *InstanceFragmentAuthor) GetId() uuid.UUID { return v.AuthorFragment.Id }

// GetUserId returns InstanceFragmentAuthor.UserId, and is useful for accessing the field via an interface.
func (v *InstanceFragmentAuthor) GetUserId() uuid.UUID { return v.AuthorFragment.UserId }

// GetInstanceId returns InstanceFragmentAuthor.InstanceId, and is useful for accessing the field via an interface.
func (v *InstanceFragmentAuthor) GetInstanceId() uuid.UUID { return v.AuthorFragment.InstanceId }

// GetName returns InstanceFragmentAuthor.Name, and is useful for accessing the field via an interface.
func (v *InstanceFragmentAuthor) GetName() string { return v.AuthorFragment.Name }

// GetAvatar returns InstanceFragmentAuthor.Avatar, and is useful for accessing the field via an interface.
func (v *InstanceFragmentAuthor) GetAvatar() string { return v.AuthorFragment.Avatar }

// GetBio returns InstanceFragmentAuthor.Bio, and is useful for accessing the field via an interface.
func (v *InstanceFragmentAuthor) GetBio() string { return v.AuthorFragment.Bio }

// GetRoles returns InstanceFragmentAuthor.Roles, and is useful for accessing the field via an interface.
func (v *InstanceFragmentAuthor) GetRoles() []Role { return v.AuthorFragment.Roles }

// GetCreatedAt returns InstanceFragmentAuthor.CreatedAt, and is useful for accessing the field via an interface.
func (v *InstanceFragmentAuthor) GetCreatedAt() time.Time { return v.AuthorFragment.CreatedAt }

func (v *InstanceFragmentAuthor) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InstanceFragmentAuthor
		graphql.NoUnmarshalJSON
	}
	firstPass.InstanceFragmentAuthor = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AuthorFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInstanceFragmentAuthor struct {
	Id uuid.UUID `json:"id"`

	UserId uuid.UUID `json:"userId"`

	InstanceId uuid.UUID `json:"instanceId"`

	Name string `json:"name"`

	Avatar string `json:"avatar"`

	Bio string `json:"bio"`

	Roles []Role `json:"roles"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *InstanceFragmentAuthor) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InstanceFragmentAuthor) __premarshalJSON() (*__premarshalInstanceFragmentAuthor, error) {
	var retval __premarshalInstanceFragmentAuthor

	retval.Id = v.AuthorFragment.Id
	retval.UserId = v.AuthorFragment.UserId
	retval.InstanceId = v.AuthorFragment.InstanceId
	retval.Name = v.AuthorFragment.Name
	retval.Avatar = v.AuthorFragment.Avatar
	retval.Bio = v.AuthorFragment.Bio
	retval.Roles = v.AuthorFragment.Roles
	retval.CreatedAt = v.AuthorFragment.CreatedAt
	return &retval, nil
}

// InstanceFragmentAuthorsConnectionInstanceAuthorsConnection includes the requested fields of the GraphQL type InstanceAuthorsConnection.
type InstanceFragmentAuthorsConnectionInstanceAuthorsConnection struct {
	Edges    []InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionEdgesInstanceAuthorsEdge `json:"edges"`
	PageInfo InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionPageInfo                   `json:"pageInfo"`
}

// GetEdges returns InstanceFragmentAuthorsConnectionInstanceAuthorsConnection.Edges, and is useful for accessing the field via an interface.
func (v *InstanceFragmentAuthorsConnectionInstanceAuthorsConnection) GetEdges() []InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionEdgesInstanceAuthorsEdge {
	return v.Edges
}

// GetPageInfo returns InstanceFragmentAuthorsConnectionInstanceAuthorsConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *InstanceFragmentAuthorsConnectionInstanceAuthorsConnection) GetPageInfo() InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionPageInfo {
	return v.PageInfo
}

// InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionEdgesInstanceAuthorsEdge includes the requested fields of the GraphQL type InstanceAuthorsEdge.
type InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionEdgesInstanceAuthorsEdge struct {
	InstanceAuthorsEdgeFragment `json:"-"`
}

// GetCursor returns InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionEdgesInstanceAuthorsEdge.Cursor, and is useful for accessing the field via an interface.
func (v *InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionEdgesInstanceAuthorsEdge) GetCursor() string {
	return v.InstanceAuthorsEdgeFragment.Cursor
}

// GetNode returns InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionEdgesInstanceAuthorsEdge.Node, and is useful for accessing the field via an interface.
func (v *InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionEdgesInstanceAuthorsEdge) GetNode() InstanceAuthorsEdgeFragmentNodeAuthor {
	return v.InstanceAuthorsEdgeFragment.Node
}

func (v *InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionEdgesInstanceAuthorsEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionEdgesInstanceAuthorsEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionEdgesInstanceAuthorsEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstanceAuthorsEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInstanceFragmentAuthorsConnectionInstanceAuthorsConnectionEdgesInstanceAuthorsEdge struct {
	Cursor string `json:"cursor"`

	Node InstanceAuthorsEdgeFragmentNodeAuthor `json:"node"`
}

func (v *InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionEdgesInstanceAuthorsEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionEdgesInstanceAuthorsEdge) __premarshalJSON() (*__premarshalInstanceFragmentAuthorsConnectionInstanceAuthorsConnectionEdgesInstanceAuthorsEdge, error) {
	var retval __premarshalInstanceFragmentAuthorsConnectionInstanceAuthorsConnectionEdgesInstanceAuthorsEdge

	retval.Cursor = v.InstanceAuthorsEdgeFragment.Cursor
	retval.Node = v.InstanceAuthorsEdgeFragment.Node
	return &retval, nil
}

// InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionPageInfo struct {
	PageInfoFragment `json:"-"`
}

// GetHasNextPage returns InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionPageInfo) GetHasNextPage() bool {
	return v.PageInfoFragment.HasNextPage
}

// GetHasPreviousPage returns InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionPageInfo) GetHasPreviousPage() bool {
	return v.PageInfoFragment.HasPreviousPage
}

func (v *InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfoFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInstanceFragmentAuthorsConnectionInstanceAuthorsConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	HasPreviousPage bool `json:"hasPreviousPage"`
}

func (v *InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InstanceFragmentAuthorsConnectionInstanceAuthorsConnectionPageInfo) __premarshalJSON() (*__premarshalInstanceFragmentAuthorsConnectionInstanceAuthorsConnectionPageInfo, error) {
	var retval __premarshalInstanceFragmentAuthorsConnectionInstanceAuthorsConnectionPageInfo

	retval.HasNextPage = v.PageInfoFragment.HasNextPage
	retval.HasPreviousPage = v.PageInfoFragment.HasPreviousPage
	return &retval, nil
}

// InstanceFragmentChannelsConnectionInstanceChannelsConnection includes the requested fields of the GraphQL type InstanceChannelsConnection.
type InstanceFragmentChannelsConnectionInstanceChannelsConnection struct {
	Edges    []InstanceFragmentChannelsConnectionInstanceChannelsConnectionEdgesInstanceChannelsEdge `json:"edges"`
	PageInfo InstanceFragmentChannelsConnectionInstanceChannelsConnectionPageInfo                    `json:"pageInfo"`
}

// GetEdges returns InstanceFragmentChannelsConnectionInstanceChannelsConnection.Edges, and is useful for accessing the field via an interface.
func (v *InstanceFragmentChannelsConnectionInstanceChannelsConnection) GetEdges() []InstanceFragmentChannelsConnectionInstanceChannelsConnectionEdgesInstanceChannelsEdge {
	return v.Edges
}

// GetPageInfo returns InstanceFragmentChannelsConnectionInstanceChannelsConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *InstanceFragmentChannelsConnectionInstanceChannelsConnection) GetPageInfo() InstanceFragmentChannelsConnectionInstanceChannelsConnectionPageInfo {
	return v.PageInfo
}

// InstanceFragmentChannelsConnectionInstanceChannelsConnectionEdgesInstanceChannelsEdge includes the requested fields of the GraphQL type InstanceChannelsEdge.
type InstanceFragmentChannelsConnectionInstanceChannelsConnectionEdgesInstanceChannelsEdge struct {
	InstanceChannelsEdgeFragment `json:"-"`
}

// GetCursor returns InstanceFragmentChannelsConnectionInstanceChannelsConnectionEdgesInstanceChannelsEdge.Cursor, and is useful for accessing the field via an interface.
func (v *InstanceFragmentChannelsConnectionInstanceChannelsConnectionEdgesInstanceChannelsEdge) GetCursor() string {
	return v.InstanceChannelsEdgeFragment.Cursor
}

// GetNode returns InstanceFragmentChannelsConnectionInstanceChannelsConnectionEdgesInstanceChannelsEdge.Node, and is useful for accessing the field via an interface.
func (v *InstanceFragmentChannelsConnectionInstanceChannelsConnectionEdgesInstanceChannelsEdge) GetNode() InstanceChannelsEdgeFragmentNodeChannel {
	return v.InstanceChannelsEdgeFragment.Node
}

func (v *InstanceFragmentChannelsConnectionInstanceChannelsConnectionEdgesInstanceChannelsEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InstanceFragmentChannelsConnectionInstanceChannelsConnectionEdgesInstanceChannelsEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.InstanceFragmentChannelsConnectionInstanceChannelsConnectionEdgesInstanceChannelsEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstanceChannelsEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInstanceFragmentChannelsConnectionInstanceChannelsConnectionEdgesInstanceChannelsEdge struct {
	Cursor string `json:"cursor"`

	Node InstanceChannelsEdgeFragmentNodeChannel `json:"node"`
}

func (v *InstanceFragmentChannelsConnectionInstanceChannelsConnectionEdgesInstanceChannelsEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InstanceFragmentChannelsConnectionInstanceChannelsConnectionEdgesInstanceChannelsEdge) __premarshalJSON() (*__premarshalInstanceFragmentChannelsConnectionInstanceChannelsConnectionEdgesInstanceChannelsEdge, error) {
	var retval __premarshalInstanceFragmentChannelsConnectionInstanceChannelsConnectionEdgesInstanceChannelsEdge

	retval.Cursor = v.InstanceChannelsEdgeFragment.Cursor
	retval.Node = v.InstanceChannelsEdgeFragment.Node
	return &retval, nil
}

// InstanceFragmentChannelsConnectionInstanceChannelsConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type InstanceFragmentChannelsConnectionInstanceChannelsConnectionPageInfo struct {
	PageInfoFragment `json:"-"`
}

// GetHasNextPage returns InstanceFragmentChannelsConnectionInstanceChannelsConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *InstanceFragmentChannelsConnectionInstanceChannelsConnectionPageInfo) GetHasNextPage() bool {
	return v.PageInfoFragment.HasNextPage
}

// GetHasPreviousPage returns InstanceFragmentChannelsConnectionInstanceChannelsConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *InstanceFragmentChannelsConnectionInstanceChannelsConnectionPageInfo) GetHasPreviousPage() bool {
	return v.PageInfoFragment.HasPreviousPage
}

func (v *InstanceFragmentChannelsConnectionInstanceChannelsConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InstanceFragmentChannelsConnectionInstanceChannelsConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.InstanceFragmentChannelsConnectionInstanceChannelsConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfoFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInstanceFragmentChannelsConnectionInstanceChannelsConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	HasPreviousPage bool `json:"hasPreviousPage"`
}

func (v *InstanceFragmentChannelsConnectionInstanceChannelsConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InstanceFragmentChannelsConnectionInstanceChannelsConnectionPageInfo) __premarshalJSON() (*__premarshalInstanceFragmentChannelsConnectionInstanceChannelsConnectionPageInfo, error) {
	var retval __premarshalInstanceFragmentChannelsConnectionInstanceChannelsConnectionPageInfo

	retval.HasNextPage = v.PageInfoFragment.HasNextPage
	retval.HasPreviousPage = v.PageInfoFragment.HasPreviousPage
	return &retval, nil
}

// InstanceFragmentLikesConnectionInstanceLikesConnection includes the requested fields of the GraphQL type InstanceLikesConnection.
type InstanceFragmentLikesConnectionInstanceLikesConnection struct {
	Edges    []InstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge `json:"edges"`
	PageInfo InstanceFragmentLikesConnectionInstanceLikesConnectionPageInfo                 `json:"pageInfo"`
}

// GetEdges returns InstanceFragmentLikesConnectionInstanceLikesConnection.Edges, and is useful for accessing the field via an interface.
func (v *InstanceFragmentLikesConnectionInstanceLikesConnection) GetEdges() []InstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge {
	return v.Edges
}

// GetPageInfo returns InstanceFragmentLikesConnectionInstanceLikesConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *InstanceFragmentLikesConnectionInstanceLikesConnection) GetPageInfo() InstanceFragmentLikesConnectionInstanceLikesConnectionPageInfo {
	return v.PageInfo
}

// InstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge includes the requested fields of the GraphQL type InstanceLikesEdge.
type InstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge struct {
	InstanceLikesEdgeFragment `json:"-"`
}

// GetCursor returns InstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *InstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge) GetCursor() string {
	return v.InstanceLikesEdgeFragment.Cursor
}

// GetLikedAt returns InstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge.LikedAt, and is useful for accessing the field via an interface.
func (v *InstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge) GetLikedAt() time.Time {
	return v.InstanceLikesEdgeFragment.LikedAt
}

// GetNode returns InstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge.Node, and is useful for accessing the field via an interface.
func (v *InstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge) GetNode() InstanceLikesEdgeFragmentNodeAuthor {
	return v.InstanceLikesEdgeFragment.Node
}

func (v *InstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.InstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstanceLikesEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge struct {
	Cursor string `json:"cursor"`

	LikedAt time.Time `json:"likedAt"`

	Node InstanceLikesEdgeFragmentNodeAuthor `json:"node"`
}

func (v *InstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge) __premarshalJSON() (*__premarshalInstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge, error) {
	var retval __premarshalInstanceFragmentLikesConnectionInstanceLikesConnectionEdgesInstanceLikesEdge

	retval.Cursor = v.InstanceLikesEdgeFragment.Cursor
	retval.LikedAt = v.InstanceLikesEdgeFragment.LikedAt
	retval.Node = v.InstanceLikesEdgeFragment.Node
	return &retval, nil
}

// InstanceFragmentLikesConnectionInstanceLikesConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type InstanceFragmentLikesConnectionInstanceLikesConnectionPageInfo struct {
	PageInfoFragment `json:"-"`
}

// GetHasNextPage returns InstanceFragmentLikesConnectionInstanceLikesConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *InstanceFragmentLikesConnectionInstanceLikesConnectionPageInfo) GetHasNextPage() bool {
	return v.PageInfoFragment.HasNextPage
}

// GetHasPreviousPage returns InstanceFragmentLikesConnectionInstanceLikesConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *InstanceFragmentLikesConnectionInstanceLikesConnectionPageInfo) GetHasPreviousPage() bool {
	return v.PageInfoFragment.HasPreviousPage
}

func (v *InstanceFragmentLikesConnectionInstanceLikesConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InstanceFragmentLikesConnectionInstanceLikesConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.InstanceFragmentLikesConnectionInstanceLikesConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfoFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInstanceFragmentLikesConnectionInstanceLikesConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	HasPreviousPage bool `json:"hasPreviousPage"`
}

func (v *InstanceFragmentLikesConnectionInstanceLikesConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InstanceFragmentLikesConnectionInstanceLikesConnectionPageInfo) __premarshalJSON() (*__premarshalInstanceFragmentLikesConnectionInstanceLikesConnectionPageInfo, error) {
	var retval __premarshalInstanceFragmentLikesConnectionInstanceLikesConnectionPageInfo

	retval.HasNextPage = v.PageInfoFragment.HasNextPage
	retval.HasPreviousPage = v.PageInfoFragment.HasPreviousPage
	return &retval, nil
}

type InstanceInput struct {
	Id           *uuid.UUID `json:"id"`
	Name         string     `json:"name"`
	ReadAccess   Access     `json:"readAccess"`
	Icon         string     `json:"icon"`
	Description  string     `json:"description"`
	ShowAuthor   bool       `json:"showAuthor"`
	ShowChat     bool       `json:"showChat"`
	ShowComments bool       `json:"showComments"`
	ShowLikes    bool       `json:"showLikes"`
}

// GetId returns InstanceInput.Id, and is useful for accessing the field via an interface.
func (v *InstanceInput) GetId() *uuid.UUID { return v.Id }

// GetName returns InstanceInput.Name, and is useful for accessing the field via an interface.
func (v *InstanceInput) GetName() string { return v.Name }

// GetReadAccess returns InstanceInput.ReadAccess, and is useful for accessing the field via an interface.
func (v *InstanceInput) GetReadAccess() Access { return v.ReadAccess }

// GetIcon returns InstanceInput.Icon, and is useful for accessing the field via an interface.
func (v *InstanceInput) GetIcon() string { return v.Icon }

// GetDescription returns InstanceInput.Description, and is useful for accessing the field via an interface.
func (v *InstanceInput) GetDescription() string { return v.Description }

// GetShowAuthor returns InstanceInput.ShowAuthor, and is useful for accessing the field via an interface.
func (v *InstanceInput) GetShowAuthor() bool { return v.ShowAuthor }

// GetShowChat returns InstanceInput.ShowChat, and is useful for accessing the field via an interface.
func (v *InstanceInput) GetShowChat() bool { return v.ShowChat }

// GetShowComments returns InstanceInput.ShowComments, and is useful for accessing the field via an interface.
func (v *InstanceInput) GetShowComments() bool { return v.ShowComments }

// GetShowLikes returns InstanceInput.ShowLikes, and is useful for accessing the field via an interface.
func (v *InstanceInput) GetShowLikes() bool { return v.ShowLikes }

// InstanceInstanceUserInstancesEdge includes the requested fields of the GraphQL type UserInstancesEdge.
type InstanceInstanceUserInstancesEdge struct {
	UserInstancesEdgeFragment `json:"-"`
}

// GetCursor returns InstanceInstanceUserInstancesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *InstanceInstanceUserInstancesEdge) GetCursor() string {
	return v.UserInstancesEdgeFragment.Cursor
}

// GetNode returns InstanceInstanceUserInstancesEdge.Node, and is useful for accessing the field via an interface.
func (v *InstanceInstanceUserInstancesEdge) GetNode() UserInstancesEdgeFragmentNodeInstance {
	return v.UserInstancesEdgeFragment.Node
}

// GetInstanceUser returns InstanceInstanceUserInstancesEdge.InstanceUser, and is useful for accessing the field via an interface.
func (v *InstanceInstanceUserInstancesEdge) GetInstanceUser() UserInstancesEdgeFragmentInstanceUserAuthor {
	return v.UserInstancesEdgeFragment.InstanceUser
}

// GetRank returns InstanceInstanceUserInstancesEdge.Rank, and is useful for accessing the field via an interface.
func (v *InstanceInstanceUserInstancesEdge) GetRank() string { return v.UserInstancesEdgeFragment.Rank }

// GetPinned returns InstanceInstanceUserInstancesEdge.Pinned, and is useful for accessing the field via an interface.
func (v *InstanceInstanceUserInstancesEdge) GetPinned() bool {
	return v.UserInstancesEdgeFragment.Pinned
}

// GetLikedByMe returns InstanceInstanceUserInstancesEdge.LikedByMe, and is useful for accessing the field via an interface.
func (v *InstanceInstanceUserInstancesEdge) GetLikedByMe() bool {
	return v.UserInstancesEdgeFragment.LikedByMe
}

func (v *InstanceInstanceUserInstancesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InstanceInstanceUserInstancesEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.InstanceInstanceUserInstancesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserInstancesEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInstanceInstanceUserInstancesEdge struct {
	Cursor string `json:"cursor"`

	Node UserInstancesEdgeFragmentNodeInstance `json:"node"`

	InstanceUser UserInstancesEdgeFragmentInstanceUserAuthor `json:"instanceUser"`

	Rank string `json:"rank"`

	Pinned bool `json:"pinned"`

	LikedByMe bool `json:"likedByMe"`
}

func (v *InstanceInstanceUserInstancesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InstanceInstanceUserInstancesEdge) __premarshalJSON() (*__premarshalInstanceInstanceUserInstancesEdge, error) {
	var retval __premarshalInstanceInstanceUserInstancesEdge

	retval.Cursor = v.UserInstancesEdgeFragment.Cursor
	retval.Node = v.UserInstancesEdgeFragment.Node
	retval.InstanceUser = v.UserInstancesEdgeFragment.InstanceUser
	retval.Rank = v.UserInstancesEdgeFragment.Rank
	retval.Pinned = v.UserInstancesEdgeFragment.Pinned
	retval.LikedByMe = v.UserInstancesEdgeFragment.LikedByMe
	return &retval, nil
}

// InstanceLikesEdgeFragment includes the GraphQL fields of InstanceLikesEdge requested by the fragment InstanceLikesEdgeFragment.
type InstanceLikesEdgeFragment struct {
	Cursor  string                              `json:"cursor"`
	LikedAt time.Time                           `json:"likedAt"`
	Node    InstanceLikesEdgeFragmentNodeAuthor `json:"node"`
}

// GetCursor returns InstanceLikesEdgeFragment.Cursor, and is useful for accessing the field via an interface.
func (v *InstanceLikesEdgeFragment) GetCursor() string { return v.Cursor }

// GetLikedAt returns InstanceLikesEdgeFragment.LikedAt, and is useful for accessing the field via an interface.
func (v *InstanceLikesEdgeFragment) GetLikedAt() time.Time { return v.LikedAt }

// GetNode returns InstanceLikesEdgeFragment.Node, and is useful for accessing the field via an interface.
func (v *InstanceLikesEdgeFragment) GetNode() InstanceLikesEdgeFragmentNodeAuthor { return v.Node }

// InstanceLikesEdgeFragmentNodeAuthor includes the requested fields of the GraphQL type Author.
type InstanceLikesEdgeFragmentNodeAuthor struct {
	AuthorFragment `json:"-"`
}

// GetId returns InstanceLikesEdgeFragmentNodeAuthor.Id, and is useful for accessing the field via an interface.
func (v *InstanceLikesEdgeFragmentNodeAuthor) GetId() uuid.UUID { return v.AuthorFragment.Id }

// GetUserId returns InstanceLikesEdgeFragmentNodeAuthor.UserId, and is useful for accessing the field via an interface.
func (v *InstanceLikesEdgeFragmentNodeAuthor) GetUserId() uuid.UUID { return v.AuthorFragment.UserId }

// GetInstanceId returns InstanceLikesEdgeFragmentNodeAuthor.InstanceId, and is useful for accessing the field via an interface.
func (v *InstanceLikesEdgeFragmentNodeAuthor) GetInstanceId() uuid.UUID {
	return v.AuthorFragment.InstanceId
}

// GetName returns InstanceLikesEdgeFragmentNodeAuthor.Name, and is useful for accessing the field via an interface.
func (v *InstanceLikesEdgeFragmentNodeAuthor) GetName() string { return v.AuthorFragment.Name }

// GetAvatar returns InstanceLikesEdgeFragmentNodeAuthor.Avatar, and is useful for accessing the field via an interface.
func (v *InstanceLikesEdgeFragmentNodeAuthor) GetAvatar() string { return v.AuthorFragment.Avatar }

// GetBio returns InstanceLikesEdgeFragmentNodeAuthor.Bio, and is useful for accessing the field via an interface.
func (v *InstanceLikesEdgeFragmentNodeAuthor) GetBio() string { return v.AuthorFragment.Bio }

// GetRoles returns InstanceLikesEdgeFragmentNodeAuthor.Roles, and is useful for accessing the field via an interface.
func (v *InstanceLikesEdgeFragmentNodeAuthor) GetRoles() []Role { return v.AuthorFragment.Roles }

// GetCreatedAt returns InstanceLikesEdgeFragmentNodeAuthor.CreatedAt, and is useful for accessing the field via an interface.
func (v *InstanceLikesEdgeFragmentNodeAuthor) GetCreatedAt() time.Time {
	return v.AuthorFragment.CreatedAt
}

func (v *InstanceLikesEdgeFragmentNodeAuthor) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InstanceLikesEdgeFragmentNodeAuthor
		graphql.NoUnmarshalJSON
	}
	firstPass.InstanceLikesEdgeFragmentNodeAuthor = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AuthorFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInstanceLikesEdgeFragmentNodeAuthor struct {
	Id uuid.UUID `json:"id"`

	UserId uuid.UUID `json:"userId"`

	InstanceId uuid.UUID `json:"instanceId"`

	Name string `json:"name"`

	Avatar string `json:"avatar"`

	Bio string `json:"bio"`

	Roles []Role `json:"roles"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *InstanceLikesEdgeFragmentNodeAuthor) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InstanceLikesEdgeFragmentNodeAuthor) __premarshalJSON() (*__premarshalInstanceLikesEdgeFragmentNodeAuthor, error) {
	var retval __premarshalInstanceLikesEdgeFragmentNodeAuthor

	retval.Id = v.AuthorFragment.Id
	retval.UserId = v.AuthorFragment.UserId
	retval.InstanceId = v.AuthorFragment.InstanceId
	retval.Name = v.AuthorFragment.Name
	retval.Avatar = v.AuthorFragment.Avatar
	retval.Bio = v.AuthorFragment.Bio
	retval.Roles = v.AuthorFragment.Roles
	retval.CreatedAt = v.AuthorFragment.CreatedAt
	return &retval, nil
}

type InstancePinInput struct {
	Pinned bool `json:"pinned"`
}

// GetPinned returns InstancePinInput.Pinned, and is useful for accessing the field via an interface.
func (v *InstancePinInput) GetPinned() bool { return v.Pinned }

type InstanceReorderInput struct {
	PrevInstanceId *uuid.UUID `json:"prevInstanceId"`
}

// GetPrevInstanceId returns InstanceReorderInput.PrevInstanceId, and is useful for accessing the field via an interface.
func (v *InstanceReorderInput) GetPrevInstanceId() *uuid.UUID { return v.PrevInstanceId }

// InstanceResponse is returned by Instance on success.
type InstanceResponse struct {
	Instance InstanceInstanceUserInstancesEdge `json:"instance"`
}

// GetInstance returns InstanceResponse.Instance, and is useful for accessing the field via an interface.
func (v *InstanceResponse) GetInstance() InstanceInstanceUserInstancesEdge { return v.Instance }

// InstanceUserListByIdsInstanceUserListByIdsAuthor includes the requested fields of the GraphQL type Author.
type InstanceUserListByIdsInstanceUserListByIdsAuthor struct {
	AuthorFragment `json:"-"`
}

// GetId returns InstanceUserListByIdsInstanceUserListByIdsAuthor.Id, and is useful for accessing the field via an interface.
func (v *InstanceUserListByIdsInstanceUserListByIdsAuthor) GetId() uuid.UUID {
	return v.AuthorFragment.Id
}

// GetUserId returns InstanceUserListByIdsInstanceUserListByIdsAuthor.UserId, and is useful for accessing the field via an interface.
func (v *InstanceUserListByIdsInstanceUserListByIdsAuthor) GetUserId() uuid.UUID {
	return v.AuthorFragment.UserId
}

// GetInstanceId returns InstanceUserListByIdsInstanceUserListByIdsAuthor.InstanceId, and is useful for accessing the field via an interface.
func (v *InstanceUserListByIdsInstanceUserListByIdsAuthor) GetInstanceId() uuid.UUID {
	return v.AuthorFragment.InstanceId
}

// GetName returns InstanceUserListByIdsInstanceUserListByIdsAuthor.Name, and is useful for accessing the field via an interface.
func (v *InstanceUserListByIdsInstanceUserListByIdsAuthor) GetName() string {
	return v.AuthorFragment.Name
}

// GetAvatar returns InstanceUserListByIdsInstanceUserListByIdsAuthor.Avatar, and is useful for accessing the field via an interface.
func (v *InstanceUserListByIdsInstanceUserListByIdsAuthor) GetAvatar() string {
	return v.AuthorFragment.Avatar
}

// GetBio returns InstanceUserListByIdsInstanceUserListByIdsAuthor.Bio, and is useful for accessing the field via an interface.
func (v *InstanceUserListByIdsInstanceUserListByIdsAuthor) GetBio() string {
	return v.AuthorFragment.Bio
}

// GetRoles returns InstanceUserListByIdsInstanceUserListByIdsAuthor.Roles, and is useful for accessing the field via an interface.
func (v *InstanceUserListByIdsInstanceUserListByIdsAuthor) GetRoles() []Role {
	return v.AuthorFragment.Roles
}

// GetCreatedAt returns InstanceUserListByIdsInstanceUserListByIdsAuthor.CreatedAt, and is useful for accessing the field via an interface.
func (v *InstanceUserListByIdsInstanceUserListByIdsAuthor) GetCreatedAt() time.Time {
	return v.AuthorFragment.CreatedAt
}

func (v *InstanceUserListByIdsInstanceUserListByIdsAuthor) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InstanceUserListByIdsInstanceUserListByIdsAuthor
		graphql.NoUnmarshalJSON
	}
	firstPass.InstanceUserListByIdsInstanceUserListByIdsAuthor = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AuthorFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInstanceUserListByIdsInstanceUserListByIdsAuthor struct {
	Id uuid.UUID `json:"id"`

	UserId uuid.UUID `json:"userId"`

	InstanceId uuid.UUID `json:"instanceId"`

	Name string `json:"name"`

	Avatar string `json:"avatar"`

	Bio string `json:"bio"`

	Roles []Role `json:"roles"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *InstanceUserListByIdsInstanceUserListByIdsAuthor) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InstanceUserListByIdsInstanceUserListByIdsAuthor) __premarshalJSON() (*__premarshalInstanceUserListByIdsInstanceUserListByIdsAuthor, error) {
	var retval __premarshalInstanceUserListByIdsInstanceUserListByIdsAuthor

	retval.Id = v.AuthorFragment.Id
	retval.UserId = v.AuthorFragment.UserId
	retval.InstanceId = v.AuthorFragment.InstanceId
	retval.Name = v.AuthorFragment.Name
	retval.Avatar = v.AuthorFragment.Avatar
	retval.Bio = v.AuthorFragment.Bio
	retval.Roles = v.AuthorFragment.Roles
	retval.CreatedAt = v.AuthorFragment.CreatedAt
	return &retval, nil
}

// InstanceUserListByIdsResponse is returned by InstanceUserListByIds on success.
type InstanceUserListByIdsResponse struct {
	InstanceUserListByIds []InstanceUserListByIdsInstanceUserListByIdsAuthor `json:"instanceUserListByIds"`
}

// GetInstanceUserListByIds returns InstanceUserListByIdsResponse.InstanceUserListByIds, and is useful for accessing the field via an interface.
func (v *InstanceUserListByIdsResponse) GetInstanceUserListByIds() []InstanceUserListByIdsInstanceUserListByIdsAuthor {
	return v.InstanceUserListByIds
}

// InviteFragment includes the GraphQL fields of Invite requested by the fragment InviteFragment.
type InviteFragment struct {
	Id          uuid.UUID            `json:"id"`
	InstanceId  uuid.UUID            `json:"instanceId"`
	Code        string               `json:"code"`
	CreatedAt   time.Time            `json:"createdAt"`
	ExpiresAt   *time.Time           `json:"expiresAt"`
	Redemptions *int                 `json:"redemptions"`
	Author      InviteFragmentAuthor `json:"author"`
}

// GetId returns InviteFragment.Id, and is useful for accessing the field via an interface.
func (v *InviteFragment) GetId() uuid.UUID { return v.Id }

// GetInstanceId returns InviteFragment.InstanceId, and is useful for accessing the field via an interface.
func (v *InviteFragment) GetInstanceId() uuid.UUID { return v.InstanceId }

// GetCode returns InviteFragment.Code, and is useful for accessing the field via an interface.
func (v *InviteFragment) GetCode() string { return v.Code }

// GetCreatedAt returns InviteFragment.CreatedAt, and is useful for accessing the field via an interface.
func (v *InviteFragment) GetCreatedAt() time.Time { return v.CreatedAt }

// GetExpiresAt returns InviteFragment.ExpiresAt, and is useful for accessing the field via an interface.
func (v *InviteFragment) GetExpiresAt() *time.Time { return v.ExpiresAt }

// GetRedemptions returns InviteFragment.Redemptions, and is useful for accessing the field via an interface.
func (v *InviteFragment) GetRedemptions() *int { return v.Redemptions }

// GetAuthor returns InviteFragment.Author, and is useful for accessing the field via an interface.
func (v *InviteFragment) GetAuthor() InviteFragmentAuthor { return v.Author }

// InviteFragmentAuthor includes the requested fields of the GraphQL type Author.
type InviteFragmentAuthor struct {
	AuthorFragment `json:"-"`
}

// GetId returns InviteFragmentAuthor.Id, and is useful for accessing the field via an interface.
func (v *InviteFragmentAuthor) GetId() uuid.UUID { return v.AuthorFragment.Id }

// GetUserId returns InviteFragmentAuthor.UserId, and is useful for accessing the field via an interface.
func (v *InviteFragmentAuthor) GetUserId() uuid.UUID { return v.AuthorFragment.UserId }

// GetInstanceId returns InviteFragmentAuthor.InstanceId, and is useful for accessing the field via an interface.
func (v *InviteFragmentAuthor) GetInstanceId() uuid.UUID { return v.AuthorFragment.InstanceId }

// GetName returns InviteFragmentAuthor.Name, and is useful for accessing the field via an interface.
func (v *InviteFragmentAuthor) GetName() string { return v.AuthorFragment.Name }

// GetAvatar returns InviteFragmentAuthor.Avatar, and is useful for accessing the field via an interface.
func (v *InviteFragmentAuthor) GetAvatar() string { return v.AuthorFragment.Avatar }

// GetBio returns InviteFragmentAuthor.Bio, and is useful for accessing the field via an interface.
func (v *InviteFragmentAuthor) GetBio() string { return v.AuthorFragment.Bio }

// GetRoles returns InviteFragmentAuthor.Roles, and is useful for accessing the field via an interface.
func (v *InviteFragmentAuthor) GetRoles() []Role { return v.AuthorFragment.Roles }

// GetCreatedAt returns InviteFragmentAuthor.CreatedAt, and is useful for accessing the field via an interface.
func (v *InviteFragmentAuthor) GetCreatedAt() time.Time { return v.AuthorFragment.CreatedAt }

func (v *InviteFragmentAuthor) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InviteFragmentAuthor
		graphql.NoUnmarshalJSON
	}
	firstPass.InviteFragmentAuthor = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AuthorFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInviteFragmentAuthor struct {
	Id uuid.UUID `json:"id"`

	UserId uuid.UUID `json:"userId"`

	InstanceId uuid.UUID `json:"instanceId"`

	Name string `json:"name"`

	Avatar string `json:"avatar"`

	Bio string `json:"bio"`

	Roles []Role `json:"roles"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *InviteFragmentAuthor) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InviteFragmentAuthor) __premarshalJSON() (*__premarshalInviteFragmentAuthor, error) {
	var retval __premarshalInviteFragmentAuthor

	retval.Id = v.AuthorFragment.Id
	retval.UserId = v.AuthorFragment.UserId
	retval.InstanceId = v.AuthorFragment.InstanceId
	retval.Name = v.AuthorFragment.Name
	retval.Avatar = v.AuthorFragment.Avatar
	retval.Bio = v.AuthorFragment.Bio
	retval.Roles = v.AuthorFragment.Roles
	retval.CreatedAt = v.AuthorFragment.CreatedAt
	return &retval, nil
}

type InviteInput struct {
	InstanceId  uuid.UUID  `json:"instanceId"`
	ExpiresAt   *time.Time `json:"expiresAt"`
	Redemptions *int       `json:"redemptions"`
}

// GetInstanceId returns InviteInput.InstanceId, and is useful for accessing the field via an interface.
func (v *InviteInput) GetInstanceId() uuid.UUID { return v.InstanceId }

// GetExpiresAt returns InviteInput.ExpiresAt, and is useful for accessing the field via an interface.
func (v *InviteInput) GetExpiresAt() *time.Time { return v.ExpiresAt }

// GetRedemptions returns InviteInput.Redemptions, and is useful for accessing the field via an interface.
func (v *InviteInput) GetRedemptions() *int { return v.Redemptions }

// InviteInvite includes the requested fields of the GraphQL type Invite.
type InviteInvite struct {
	InviteFragment `json:"-"`
}

// GetId returns InviteInvite.Id, and is useful for accessing the field via an interface.
func (v *InviteInvite) GetId() uuid.UUID { return v.InviteFragment.Id }

// GetInstanceId returns InviteInvite.InstanceId, and is useful for accessing the field via an interface.
func (v *InviteInvite) GetInstanceId() uuid.UUID { return v.InviteFragment.InstanceId }

// GetCode returns InviteInvite.Code, and is useful for accessing the field via an interface.
func (v *InviteInvite) GetCode() string { return v.InviteFragment.Code }

// GetCreatedAt returns InviteInvite.CreatedAt, and is useful for accessing the field via an interface.
func (v *InviteInvite) GetCreatedAt() time.Time { return v.InviteFragment.CreatedAt }

// GetExpiresAt returns InviteInvite.ExpiresAt, and is useful for accessing the field via an interface.
func (v *InviteInvite) GetExpiresAt() *time.Time { return v.InviteFragment.ExpiresAt }

// GetRedemptions returns InviteInvite.Redemptions, and is useful for accessing the field via an interface.
func (v *InviteInvite) GetRedemptions() *int { return v.InviteFragment.Redemptions }

// GetAuthor returns InviteInvite.Author, and is useful for accessing the field via an interface.
func (v *InviteInvite) GetAuthor() InviteFragmentAuthor { return v.InviteFragment.Author }

func (v *InviteInvite) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*InviteInvite
		graphql.NoUnmarshalJSON
	}
	firstPass.InviteInvite = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InviteFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalInviteInvite struct {
	Id uuid.UUID `json:"id"`

	InstanceId uuid.UUID `json:"instanceId"`

	Code string `json:"code"`

	CreatedAt time.Time `json:"createdAt"`

	ExpiresAt *time.Time `json:"expiresAt"`

	Redemptions *int `json:"redemptions"`

	Author InviteFragmentAuthor `json:"author"`
}

func (v *InviteInvite) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *InviteInvite) __premarshalJSON() (*__premarshalInviteInvite, error) {
	var retval __premarshalInviteInvite

	retval.Id = v.InviteFragment.Id
	retval.InstanceId = v.InviteFragment.InstanceId
	retval.Code = v.InviteFragment.Code
	retval.CreatedAt = v.InviteFragment.CreatedAt
	retval.ExpiresAt = v.InviteFragment.ExpiresAt
	retval.Redemptions = v.InviteFragment.Redemptions
	retval.Author = v.InviteFragment.Author
	return &retval, nil
}

// InviteResponse is returned by Invite on success.
type InviteResponse struct {
	Invite InviteInvite `json:"invite"`
}

// GetInvite returns InviteResponse.Invite, and is useful for accessing the field via an interface.
func (v *InviteResponse) GetInvite() InviteInvite { return v.Invite }

// MessageFragment includes the GraphQL fields of Message requested by the fragment MessageFragment.
type MessageFragment struct {
	Id             uuid.UUID                      `json:"id"`
	Author         MessageFragmentAuthor          `json:"author"`
	Text           string                         `json:"text"`
	CreatedAt      time.Time                      `json:"createdAt"`
	ChannelId      uuid.UUID                      `json:"channelId"`
	RepliedMessage *MessageFragmentRepliedMessage `json:"repliedMessage"`
	ImageUrls      []string                       `json:"imageUrls"`
}

// GetId returns MessageFragment.Id, and is useful for accessing the field via an interface.
func (v *MessageFragment) GetId() uuid.UUID { return v.Id }

// GetAuthor returns MessageFragment.Author, and is useful for accessing the field via an interface.
func (v *MessageFragment) GetAuthor() MessageFragmentAuthor { return v.Author }

// GetText returns MessageFragment.Text, and is useful for accessing the field via an interface.
func (v *MessageFragment) GetText() string { return v.Text }

// GetCreatedAt returns MessageFragment.CreatedAt, and is useful for accessing the field via an interface.
func (v *MessageFragment) GetCreatedAt() time.Time { return v.CreatedAt }

// GetChannelId returns MessageFragment.ChannelId, and is useful for accessing the field via an interface.
func (v *MessageFragment) GetChannelId() uuid.UUID { return v.ChannelId }

// GetRepliedMessage returns MessageFragment.RepliedMessage, and is useful for accessing the field via an interface.
func (v *MessageFragment) GetRepliedMessage() *MessageFragmentRepliedMessage { return v.RepliedMessage }

// GetImageUrls returns MessageFragment.ImageUrls, and is useful for accessing the field via an interface.
func (v *MessageFragment) GetImageUrls() []string { return v.ImageUrls }

// MessageFragmentAuthor includes the requested fields of the GraphQL type Author.
type MessageFragmentAuthor struct {
	AuthorFragment `json:"-"`
}

// GetId returns MessageFragmentAuthor.Id, and is useful for accessing the field via an interface.
func (v *MessageFragmentAuthor) GetId() uuid.UUID { return v.AuthorFragment.Id }

// GetUserId returns MessageFragmentAuthor.UserId, and is useful for accessing the field via an interface.
func (v *MessageFragmentAuthor) GetUserId() uuid.UUID { return v.AuthorFragment.UserId }

// GetInstanceId returns MessageFragmentAuthor.InstanceId, and is useful for accessing the field via an interface.
func (v *MessageFragmentAuthor) GetInstanceId() uuid.UUID { return v.AuthorFragment.InstanceId }

// GetName returns MessageFragmentAuthor.Name, and is useful for accessing the field via an interface.
func (v *MessageFragmentAuthor) GetName() string { return v.AuthorFragment.Name }

// GetAvatar returns MessageFragmentAuthor.Avatar, and is useful for accessing the field via an interface.
func (v *MessageFragmentAuthor) GetAvatar() string { return v.AuthorFragment.Avatar }

// GetBio returns MessageFragmentAuthor.Bio, and is useful for accessing the field via an interface.
func (v *MessageFragmentAuthor) GetBio() string { return v.AuthorFragment.Bio }

// GetRoles returns MessageFragmentAuthor.Roles, and is useful for accessing the field via an interface.
func (v *MessageFragmentAuthor) GetRoles() []Role { return v.AuthorFragment.Roles }

// GetCreatedAt returns MessageFragmentAuthor.CreatedAt, and is useful for accessing the field via an interface.
func (v *MessageFragmentAuthor) GetCreatedAt() time.Time { return v.AuthorFragment.CreatedAt }

func (v *MessageFragmentAuthor) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*MessageFragmentAuthor
		graphql.NoUnmarshalJSON
	}
	firstPass.MessageFragmentAuthor = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AuthorFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalMessageFragmentAuthor struct {
	Id uuid.UUID `json:"id"`

	UserId uuid.UUID `json:"userId"`

	InstanceId uuid.UUID `json:"instanceId"`

	Name string `json:"name"`

	Avatar string `json:"avatar"`

	Bio string `json:"bio"`

	Roles []Role `json:"roles"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *MessageFragmentAuthor) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *MessageFragmentAuthor) __premarshalJSON() (*__premarshalMessageFragmentAuthor, error) {
	var retval __premarshalMessageFragmentAuthor

	retval.Id = v.AuthorFragment.Id
	retval.UserId = v.AuthorFragment.UserId
	retval.InstanceId = v.AuthorFragment.InstanceId
	retval.Name = v.AuthorFragment.Name
	retval.Avatar = v.AuthorFragment.Avatar
	retval.Bio = v.AuthorFragment.Bio
	retval.Roles = v.AuthorFragment.Roles
	retval.CreatedAt = v.AuthorFragment.CreatedAt
	return &retval, nil
}

// MessageFragmentRepliedMessage includes the requested fields of the GraphQL type Message.
type MessageFragmentRepliedMessage struct {
	Id        uuid.UUID `json:"id"`
	Text      string    `json:"text"`
	CreatedAt time.Time `json:"createdAt"`
	ChannelId uuid.UUID `json:"channelId"`
	ImageUrls []string  `json:"imageUrls"`
}

// GetId returns MessageFragmentRepliedMessage.Id, and is useful for accessing the field via an interface.
func (v *MessageFragmentRepliedMessage) GetId() uuid.UUID { return v.Id }

// GetText returns MessageFragmentRepliedMessage.Text, and is useful for accessing the field via an interface.
func (v *MessageFragmentRepliedMessage) GetText() string { return v.Text }

// GetCreatedAt returns MessageFragmentRepliedMessage.CreatedAt, and is useful for accessing the field via an interface.
func (v *MessageFragmentRepliedMessage) GetCreatedAt() time.Time { return v.CreatedAt }

// GetChannelId returns MessageFragmentRepliedMessage.ChannelId, and is useful for accessing the field via an interface.
func (v *MessageFragmentRepliedMessage) GetChannelId() uuid.UUID { return v.ChannelId }

// GetImageUrls returns MessageFragmentRepliedMessage.ImageUrls, and is useful for accessing the field via an interface.
func (v *MessageFragmentRepliedMessage) GetImageUrls() []string { return v.ImageUrls }

type MessageInput struct {
	Text             string     `json:"text"`
	ChannelId        uuid.UUID  `json:"channelId"`
	RepliedMessageId *uuid.UUID `json:"repliedMessageId"`
	ImageUrls        []string   `json:"imageUrls"`
}

// GetText returns MessageInput.Text, and is useful for accessing the field via an interface.
func (v *MessageInput) GetText() string { return v.Text }

// GetChannelId returns MessageInput.ChannelId, and is useful for accessing the field via an interface.
func (v *MessageInput) GetChannelId() uuid.UUID { return v.ChannelId }

// GetRepliedMessageId returns MessageInput.RepliedMessageId, and is useful for accessing the field via an interface.
func (v *MessageInput) GetRepliedMessageId() *uuid.UUID { return v.RepliedMessageId }

// GetImageUrls returns MessageInput.ImageUrls, and is useful for accessing the field via an interface.
func (v *MessageInput) GetImageUrls() []string { return v.ImageUrls }

// NotificationFragment includes the GraphQL fields of Notification requested by the fragment NotificationFragment.
type NotificationFragment struct {
	Id        uuid.UUID                     `json:"id"`
	Kind      NotificationKind              `json:"kind"`
	Author    *NotificationFragmentAuthor   `json:"author"`
	Instance  *NotificationFragmentInstance `json:"instance"`
	Message   *NotificationFragmentMessage  `json:"message"`
	CreatedAt time.Time                     `json:"createdAt"`
}

// GetId returns NotificationFragment.Id, and is useful for accessing the field via an interface.
func (v *NotificationFragment) GetId() uuid.UUID { return v.Id }

// GetKind returns NotificationFragment.Kind, and is useful for accessing the field via an interface.
func (v *NotificationFragment) GetKind() NotificationKind { return v.Kind }

// GetAuthor returns NotificationFragment.Author, and is useful for accessing the field via an interface.
func (v *NotificationFragment) GetAuthor() *NotificationFragmentAuthor { return v.Author }

// GetInstance returns NotificationFragment.Instance, and is useful for accessing the field via an interface.
func (v *NotificationFragment) GetInstance() *NotificationFragmentInstance { return v.Instance }

// GetMessage returns NotificationFragment.Message, and is useful for accessing the field via an interface.
func (v *NotificationFragment) GetMessage() *NotificationFragmentMessage { return v.Message }

// GetCreatedAt returns NotificationFragment.CreatedAt, and is useful for accessing the field via an interface.
func (v *NotificationFragment) GetCreatedAt() time.Time { return v.CreatedAt }

// NotificationFragmentAuthor includes the requested fields of the GraphQL type Author.
type NotificationFragmentAuthor struct {
	AuthorFragment `json:"-"`
}

// GetId returns NotificationFragmentAuthor.Id, and is useful for accessing the field via an interface.
func (v *NotificationFragmentAuthor) GetId() uuid.UUID { return v.AuthorFragment.Id }

// GetUserId returns NotificationFragmentAuthor.UserId, and is useful for accessing the field via an interface.
func (v *NotificationFragmentAuthor) GetUserId() uuid.UUID { return v.AuthorFragment.UserId }

// GetInstanceId returns NotificationFragmentAuthor.InstanceId, and is useful for accessing the field via an interface.
func (v *NotificationFragmentAuthor) GetInstanceId() uuid.UUID { return v.AuthorFragment.InstanceId }

// GetName returns NotificationFragmentAuthor.Name, and is useful for accessing the field via an interface.
func (v *NotificationFragmentAuthor) GetName() string { return v.AuthorFragment.Name }

// GetAvatar returns NotificationFragmentAuthor.Avatar, and is useful for accessing the field via an interface.
func (v *NotificationFragmentAuthor) GetAvatar() string { return v.AuthorFragment.Avatar }

// GetBio returns NotificationFragmentAuthor.Bio, and is useful for accessing the field via an interface.
func (v *NotificationFragmentAuthor) GetBio() string { return v.AuthorFragment.Bio }

// GetRoles returns NotificationFragmentAuthor.Roles, and is useful for accessing the field via an interface.
func (v *NotificationFragmentAuthor) GetRoles() []Role { return v.AuthorFragment.Roles }

// GetCreatedAt returns NotificationFragmentAuthor.CreatedAt, and is useful for accessing the field via an interface.
func (v *NotificationFragmentAuthor) GetCreatedAt() time.Time { return v.AuthorFragment.CreatedAt }

func (v *NotificationFragmentAuthor) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NotificationFragmentAuthor
		graphql.NoUnmarshalJSON
	}
	firstPass.NotificationFragmentAuthor = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AuthorFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNotificationFragmentAuthor struct {
	Id uuid.UUID `json:"id"`

	UserId uuid.UUID `json:"userId"`

	InstanceId uuid.UUID `json:"instanceId"`

	Name string `json:"name"`

	Avatar string `json:"avatar"`

	Bio string `json:"bio"`

	Roles []Role `json:"roles"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *NotificationFragmentAuthor) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NotificationFragmentAuthor) __premarshalJSON() (*__premarshalNotificationFragmentAuthor, error) {
	var retval __premarshalNotificationFragmentAuthor

	retval.Id = v.AuthorFragment.Id
	retval.UserId = v.AuthorFragment.UserId
	retval.InstanceId = v.AuthorFragment.InstanceId
	retval.Name = v.AuthorFragment.Name
	retval.Avatar = v.AuthorFragment.Avatar
	retval.Bio = v.AuthorFragment.Bio
	retval.Roles = v.AuthorFragment.Roles
	retval.CreatedAt = v.AuthorFragment.CreatedAt
	return &retval, nil
}

// NotificationFragmentInstance includes the requested fields of the GraphQL type Instance.
type NotificationFragmentInstance struct {
	InstanceFragment `json:"-"`
}

// GetId returns NotificationFragmentInstance.Id, and is useful for accessing the field via an interface.
func (v *NotificationFragmentInstance) GetId() uuid.UUID { return v.InstanceFragment.Id }

// GetName returns NotificationFragmentInstance.Name, and is useful for accessing the field via an interface.
func (v *NotificationFragmentInstance) GetName() string { return v.InstanceFragment.Name }

// GetAuthor returns NotificationFragmentInstance.Author, and is useful for accessing the field via an interface.
func (v *NotificationFragmentInstance) GetAuthor() InstanceFragmentAuthor {
	return v.InstanceFragment.Author
}

// GetReadAccess returns NotificationFragmentInstance.ReadAccess, and is useful for accessing the field via an interface.
func (v *NotificationFragmentInstance) GetReadAccess() Access { return v.InstanceFragment.ReadAccess }

// GetIcon returns NotificationFragmentInstance.Icon, and is useful for accessing the field via an interface.
func (v *NotificationFragmentInstance) GetIcon() string { return v.InstanceFragment.Icon }

// GetCreatedAt returns NotificationFragmentInstance.CreatedAt, and is useful for accessing the field via an interface.
func (v *NotificationFragmentInstance) GetCreatedAt() time.Time { return v.InstanceFragment.CreatedAt }

// GetDescription returns NotificationFragmentInstance.Description, and is useful for accessing the field via an interface.
func (v *NotificationFragmentInstance) GetDescription() string { return v.InstanceFragment.Description }

// GetShowAuthor returns NotificationFragmentInstance.ShowAuthor, and is useful for accessing the field via an interface.
func (v *NotificationFragmentInstance) GetShowAuthor() bool { return v.InstanceFragment.ShowAuthor }

// GetShowChat returns NotificationFragmentInstance.ShowChat, and is useful for accessing the field via an interface.
func (v *NotificationFragmentInstance) GetShowChat() bool { return v.InstanceFragment.ShowChat }

// GetShowLikes returns NotificationFragmentInstance.ShowLikes, and is useful for accessing the field via an interface.
func (v *NotificationFragmentInstance) GetShowLikes() bool { return v.InstanceFragment.ShowLikes }

// GetShowComments returns NotificationFragmentInstance.ShowComments, and is useful for accessing the field via an interface.
func (v *NotificationFragmentInstance) GetShowComments() bool { return v.InstanceFragment.ShowComments }

// GetLikesCount returns NotificationFragmentInstance.LikesCount, and is useful for accessing the field via an interface.
func (v *NotificationFragmentInstance) GetLikesCount() int { return v.InstanceFragment.LikesCount }

// GetCommentsCount returns NotificationFragmentInstance.CommentsCount, and is useful for accessing the field via an interface.
func (v *NotificationFragmentInstance) GetCommentsCount() int {
	return v.InstanceFragment.CommentsCount
}

// GetLikesConnection returns NotificationFragmentInstance.LikesConnection, and is useful for accessing the field via an interface.
func (v *NotificationFragmentInstance) GetLikesConnection() InstanceFragmentLikesConnectionInstanceLikesConnection {
	return v.InstanceFragment.LikesConnection
}

// GetChannelsConnection returns NotificationFragmentInstance.ChannelsConnection, and is useful for accessing the field via an interface.
func (v *NotificationFragmentInstance) GetChannelsConnection() InstanceFragmentChannelsConnectionInstanceChannelsConnection {
	return v.InstanceFragment.ChannelsConnection
}

// GetAuthorsConnection returns NotificationFragmentInstance.AuthorsConnection, and is useful for accessing the field via an interface.
func (v *NotificationFragmentInstance) GetAuthorsConnection() InstanceFragmentAuthorsConnectionInstanceAuthorsConnection {
	return v.InstanceFragment.AuthorsConnection
}

func (v *NotificationFragmentInstance) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NotificationFragmentInstance
		graphql.NoUnmarshalJSON
	}
	firstPass.NotificationFragmentInstance = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstanceFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNotificationFragmentInstance struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Author InstanceFragmentAuthor `json:"author"`

	ReadAccess Access `json:"readAccess"`

	Icon string `json:"icon"`

	CreatedAt time.Time `json:"createdAt"`

	Description string `json:"description"`

	ShowAuthor bool `json:"showAuthor"`

	ShowChat bool `json:"showChat"`

	ShowLikes bool `json:"showLikes"`

	ShowComments bool `json:"showComments"`

	LikesCount int `json:"likesCount"`

	CommentsCount int `json:"commentsCount"`

	LikesConnection InstanceFragmentLikesConnectionInstanceLikesConnection `json:"likesConnection"`

	ChannelsConnection InstanceFragmentChannelsConnectionInstanceChannelsConnection `json:"channelsConnection"`

	AuthorsConnection InstanceFragmentAuthorsConnectionInstanceAuthorsConnection `json:"authorsConnection"`
}

func (v *NotificationFragmentInstance) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NotificationFragmentInstance) __premarshalJSON() (*__premarshalNotificationFragmentInstance, error) {
	var retval __premarshalNotificationFragmentInstance

	retval.Id = v.InstanceFragment.Id
	retval.Name = v.InstanceFragment.Name
	retval.Author = v.InstanceFragment.Author
	retval.ReadAccess = v.InstanceFragment.ReadAccess
	retval.Icon = v.InstanceFragment.Icon
	retval.CreatedAt = v.InstanceFragment.CreatedAt
	retval.Description = v.InstanceFragment.Description
	retval.ShowAuthor = v.InstanceFragment.ShowAuthor
	retval.ShowChat = v.InstanceFragment.ShowChat
	retval.ShowLikes = v.InstanceFragment.ShowLikes
	retval.ShowComments = v.InstanceFragment.ShowComments
	retval.LikesCount = v.InstanceFragment.LikesCount
	retval.CommentsCount = v.InstanceFragment.CommentsCount
	retval.LikesConnection = v.InstanceFragment.LikesConnection
	retval.ChannelsConnection = v.InstanceFragment.ChannelsConnection
	retval.AuthorsConnection = v.InstanceFragment.AuthorsConnection
	return &retval, nil
}

// NotificationFragmentMessage includes the requested fields of the GraphQL type Message.
type NotificationFragmentMessage struct {
	MessageFragment `json:"-"`
}

// GetId returns NotificationFragmentMessage.Id, and is useful for accessing the field via an interface.
func (v *NotificationFragmentMessage) GetId() uuid.UUID { return v.MessageFragment.Id }

// GetAuthor returns NotificationFragmentMessage.Author, and is useful for accessing the field via an interface.
func (v *NotificationFragmentMessage) GetAuthor() MessageFragmentAuthor {
	return v.MessageFragment.Author
}

// GetText returns NotificationFragmentMessage.Text, and is useful for accessing the field via an interface.
func (v *NotificationFragmentMessage) GetText() string { return v.MessageFragment.Text }

// GetCreatedAt returns NotificationFragmentMessage.CreatedAt, and is useful for accessing the field via an interface.
func (v *NotificationFragmentMessage) GetCreatedAt() time.Time { return v.MessageFragment.CreatedAt }

// GetChannelId returns NotificationFragmentMessage.ChannelId, and is useful for accessing the field via an interface.
func (v *NotificationFragmentMessage) GetChannelId() uuid.UUID { return v.MessageFragment.ChannelId }

// GetRepliedMessage returns NotificationFragmentMessage.RepliedMessage, and is useful for accessing the field via an interface.
func (v *NotificationFragmentMessage) GetRepliedMessage() *MessageFragmentRepliedMessage {
	return v.MessageFragment.RepliedMessage
}

// GetImageUrls returns NotificationFragmentMessage.ImageUrls, and is useful for accessing the field via an interface.
func (v *NotificationFragmentMessage) GetImageUrls() []string { return v.MessageFragment.ImageUrls }

func (v *NotificationFragmentMessage) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*NotificationFragmentMessage
		graphql.NoUnmarshalJSON
	}
	firstPass.NotificationFragmentMessage = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.MessageFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalNotificationFragmentMessage struct {
	Id uuid.UUID `json:"id"`

	Author MessageFragmentAuthor `json:"author"`

	Text string `json:"text"`

	CreatedAt time.Time `json:"createdAt"`

	ChannelId uuid.UUID `json:"channelId"`

	RepliedMessage *MessageFragmentRepliedMessage `json:"repliedMessage"`

	ImageUrls []string `json:"imageUrls"`
}

func (v *NotificationFragmentMessage) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *NotificationFragmentMessage) __premarshalJSON() (*__premarshalNotificationFragmentMessage, error) {
	var retval __premarshalNotificationFragmentMessage

	retval.Id = v.MessageFragment.Id
	retval.Author = v.MessageFragment.Author
	retval.Text = v.MessageFragment.Text
	retval.CreatedAt = v.MessageFragment.CreatedAt
	retval.ChannelId = v.MessageFragment.ChannelId
	retval.RepliedMessage = v.MessageFragment.RepliedMessage
	retval.ImageUrls = v.MessageFragment.ImageUrls
	return &retval, nil
}

type NotificationKind string

const (
	NotificationKindLikeAdded    NotificationKind = "LIKE_ADDED"
	NotificationKindCommentAdded NotificationKind = "COMMENT_ADDED"
	NotificationKindReplyAdded   NotificationKind = "REPLY_ADDED"
	NotificationKindBadgeAdded   NotificationKind = "BADGE_ADDED"
)

// PageInfoFragment includes the GraphQL fields of PageInfo requested by the fragment PageInfoFragment.
type PageInfoFragment struct {
	HasNextPage     bool `json:"hasNextPage"`
	HasPreviousPage bool `json:"hasPreviousPage"`
}

// GetHasNextPage returns PageInfoFragment.HasNextPage, and is useful for accessing the field via an interface.
func (v *PageInfoFragment) GetHasNextPage() bool { return v.HasNextPage }

// GetHasPreviousPage returns PageInfoFragment.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *PageInfoFragment) GetHasPreviousPage() bool { return v.HasPreviousPage }

// PinInstancePinInstanceUserInstancesEdge includes the requested fields of the GraphQL type UserInstancesEdge.
type PinInstancePinInstanceUserInstancesEdge struct {
	UserInstancesEdgeFragment `json:"-"`
}

// GetCursor returns PinInstancePinInstanceUserInstancesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *PinInstancePinInstanceUserInstancesEdge) GetCursor() string {
	return v.UserInstancesEdgeFragment.Cursor
}

// GetNode returns PinInstancePinInstanceUserInstancesEdge.Node, and is useful for accessing the field via an interface.
func (v *PinInstancePinInstanceUserInstancesEdge) GetNode() UserInstancesEdgeFragmentNodeInstance {
	return v.UserInstancesEdgeFragment.Node
}

// GetInstanceUser returns PinInstancePinInstanceUserInstancesEdge.InstanceUser, and is useful for accessing the field via an interface.
func (v *PinInstancePinInstanceUserInstancesEdge) GetInstanceUser() UserInstancesEdgeFragmentInstanceUserAuthor {
	return v.UserInstancesEdgeFragment.InstanceUser
}

// GetRank returns PinInstancePinInstanceUserInstancesEdge.Rank, and is useful for accessing the field via an interface.
func (v *PinInstancePinInstanceUserInstancesEdge) GetRank() string {
	return v.UserInstancesEdgeFragment.Rank
}

// GetPinned returns PinInstancePinInstanceUserInstancesEdge.Pinned, and is useful for accessing the field via an interface.
func (v *PinInstancePinInstanceUserInstancesEdge) GetPinned() bool {
	return v.UserInstancesEdgeFragment.Pinned
}

// GetLikedByMe returns PinInstancePinInstanceUserInstancesEdge.LikedByMe, and is useful for accessing the field via an interface.
func (v *PinInstancePinInstanceUserInstancesEdge) GetLikedByMe() bool {
	return v.UserInstancesEdgeFragment.LikedByMe
}

func (v *PinInstancePinInstanceUserInstancesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*PinInstancePinInstanceUserInstancesEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.PinInstancePinInstanceUserInstancesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserInstancesEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalPinInstancePinInstanceUserInstancesEdge struct {
	Cursor string `json:"cursor"`

	Node UserInstancesEdgeFragmentNodeInstance `json:"node"`

	InstanceUser UserInstancesEdgeFragmentInstanceUserAuthor `json:"instanceUser"`

	Rank string `json:"rank"`

	Pinned bool `json:"pinned"`

	LikedByMe bool `json:"likedByMe"`
}

func (v *PinInstancePinInstanceUserInstancesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *PinInstancePinInstanceUserInstancesEdge) __premarshalJSON() (*__premarshalPinInstancePinInstanceUserInstancesEdge, error) {
	var retval __premarshalPinInstancePinInstanceUserInstancesEdge

	retval.Cursor = v.UserInstancesEdgeFragment.Cursor
	retval.Node = v.UserInstancesEdgeFragment.Node
	retval.InstanceUser = v.UserInstancesEdgeFragment.InstanceUser
	retval.Rank = v.UserInstancesEdgeFragment.Rank
	retval.Pinned = v.UserInstancesEdgeFragment.Pinned
	retval.LikedByMe = v.UserInstancesEdgeFragment.LikedByMe
	return &retval, nil
}

// PinInstanceResponse is returned by PinInstance on success.
type PinInstanceResponse struct {
	PinInstance PinInstancePinInstanceUserInstancesEdge `json:"pinInstance"`
}

// GetPinInstance returns PinInstanceResponse.PinInstance, and is useful for accessing the field via an interface.
func (v *PinInstanceResponse) GetPinInstance() PinInstancePinInstanceUserInstancesEdge {
	return v.PinInstance
}

// RedeemInviteRedeemInvite includes the requested fields of the GraphQL type Invite.
type RedeemInviteRedeemInvite struct {
	InviteFragment `json:"-"`
}

// GetId returns RedeemInviteRedeemInvite.Id, and is useful for accessing the field via an interface.
func (v *RedeemInviteRedeemInvite) GetId() uuid.UUID { return v.InviteFragment.Id }

// GetInstanceId returns RedeemInviteRedeemInvite.InstanceId, and is useful for accessing the field via an interface.
func (v *RedeemInviteRedeemInvite) GetInstanceId() uuid.UUID { return v.InviteFragment.InstanceId }

// GetCode returns RedeemInviteRedeemInvite.Code, and is useful for accessing the field via an interface.
func (v *RedeemInviteRedeemInvite) GetCode() string { return v.InviteFragment.Code }

// GetCreatedAt returns RedeemInviteRedeemInvite.CreatedAt, and is useful for accessing the field via an interface.
func (v *RedeemInviteRedeemInvite) GetCreatedAt() time.Time { return v.InviteFragment.CreatedAt }

// GetExpiresAt returns RedeemInviteRedeemInvite.ExpiresAt, and is useful for accessing the field via an interface.
func (v *RedeemInviteRedeemInvite) GetExpiresAt() *time.Time { return v.InviteFragment.ExpiresAt }

// GetRedemptions returns RedeemInviteRedeemInvite.Redemptions, and is useful for accessing the field via an interface.
func (v *RedeemInviteRedeemInvite) GetRedemptions() *int { return v.InviteFragment.Redemptions }

// GetAuthor returns RedeemInviteRedeemInvite.Author, and is useful for accessing the field via an interface.
func (v *RedeemInviteRedeemInvite) GetAuthor() InviteFragmentAuthor { return v.InviteFragment.Author }

func (v *RedeemInviteRedeemInvite) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RedeemInviteRedeemInvite
		graphql.NoUnmarshalJSON
	}
	firstPass.RedeemInviteRedeemInvite = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InviteFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRedeemInviteRedeemInvite struct {
	Id uuid.UUID `json:"id"`

	InstanceId uuid.UUID `json:"instanceId"`

	Code string `json:"code"`

	CreatedAt time.Time `json:"createdAt"`

	ExpiresAt *time.Time `json:"expiresAt"`

	Redemptions *int `json:"redemptions"`

	Author InviteFragmentAuthor `json:"author"`
}

func (v *RedeemInviteRedeemInvite) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RedeemInviteRedeemInvite) __premarshalJSON() (*__premarshalRedeemInviteRedeemInvite, error) {
	var retval __premarshalRedeemInviteRedeemInvite

	retval.Id = v.InviteFragment.Id
	retval.InstanceId = v.InviteFragment.InstanceId
	retval.Code = v.InviteFragment.Code
	retval.CreatedAt = v.InviteFragment.CreatedAt
	retval.ExpiresAt = v.InviteFragment.ExpiresAt
	retval.Redemptions = v.InviteFragment.Redemptions
	retval.Author = v.InviteFragment.Author
	return &retval, nil
}

// RedeemInviteResponse is returned by RedeemInvite on success.
type RedeemInviteResponse struct {
	RedeemInvite RedeemInviteRedeemInvite `json:"redeemInvite"`
}

// GetRedeemInvite returns RedeemInviteResponse.RedeemInvite, and is useful for accessing the field via an interface.
func (v *RedeemInviteResponse) GetRedeemInvite() RedeemInviteRedeemInvite { return v.RedeemInvite }

// RemoveChannelRemoveChannelInstanceChannelsEdge includes the requested fields of the GraphQL type InstanceChannelsEdge.
type RemoveChannelRemoveChannelInstanceChannelsEdge struct {
	InstanceChannelsEdgeFragment `json:"-"`
}

// GetCursor returns RemoveChannelRemoveChannelInstanceChannelsEdge.Cursor, and is useful for accessing the field via an interface.
func (v *RemoveChannelRemoveChannelInstanceChannelsEdge) GetCursor() string {
	return v.InstanceChannelsEdgeFragment.Cursor
}

// GetNode returns RemoveChannelRemoveChannelInstanceChannelsEdge.Node, and is useful for accessing the field via an interface.
func (v *RemoveChannelRemoveChannelInstanceChannelsEdge) GetNode() InstanceChannelsEdgeFragmentNodeChannel {
	return v.InstanceChannelsEdgeFragment.Node
}

func (v *RemoveChannelRemoveChannelInstanceChannelsEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveChannelRemoveChannelInstanceChannelsEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveChannelRemoveChannelInstanceChannelsEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstanceChannelsEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRemoveChannelRemoveChannelInstanceChannelsEdge struct {
	Cursor string `json:"cursor"`

	Node InstanceChannelsEdgeFragmentNodeChannel `json:"node"`
}

func (v *RemoveChannelRemoveChannelInstanceChannelsEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveChannelRemoveChannelInstanceChannelsEdge) __premarshalJSON() (*__premarshalRemoveChannelRemoveChannelInstanceChannelsEdge, error) {
	var retval __premarshalRemoveChannelRemoveChannelInstanceChannelsEdge

	retval.Cursor = v.InstanceChannelsEdgeFragment.Cursor
	retval.Node = v.InstanceChannelsEdgeFragment.Node
	return &retval, nil
}

// RemoveChannelResponse is returned by RemoveChannel on success.
type RemoveChannelResponse struct {
	RemoveChannel RemoveChannelRemoveChannelInstanceChannelsEdge `json:"removeChannel"`
}

// GetRemoveChannel returns RemoveChannelResponse.RemoveChannel, and is useful for accessing the field via an interface.
func (v *RemoveChannelResponse) GetRemoveChannel() RemoveChannelRemoveChannelInstanceChannelsEdge {
	return v.RemoveChannel
}

// RemoveInstanceRemoveInstanceUserInstancesEdge includes the requested fields of the GraphQL type UserInstancesEdge.
type RemoveInstanceRemoveInstanceUserInstancesEdge struct {
	UserInstancesEdgeFragment `json:"-"`
}

// GetCursor returns RemoveInstanceRemoveInstanceUserInstancesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *RemoveInstanceRemoveInstanceUserInstancesEdge) GetCursor() string {
	return v.UserInstancesEdgeFragment.Cursor
}

// GetNode returns RemoveInstanceRemoveInstanceUserInstancesEdge.Node, and is useful for accessing the field via an interface.
func (v *RemoveInstanceRemoveInstanceUserInstancesEdge) GetNode() UserInstancesEdgeFragmentNodeInstance {
	return v.UserInstancesEdgeFragment.Node
}

// GetInstanceUser returns RemoveInstanceRemoveInstanceUserInstancesEdge.InstanceUser, and is useful for accessing the field via an interface.
func (v *RemoveInstanceRemoveInstanceUserInstancesEdge) GetInstanceUser() UserInstancesEdgeFragmentInstanceUserAuthor {
	return v.UserInstancesEdgeFragment.InstanceUser
}

// GetRank returns RemoveInstanceRemoveInstanceUserInstancesEdge.Rank, and is useful for accessing the field via an interface.
func (v *RemoveInstanceRemoveInstanceUserInstancesEdge) GetRank() string {
	return v.UserInstancesEdgeFragment.Rank
}

// GetPinned returns RemoveInstanceRemoveInstanceUserInstancesEdge.Pinned, and is useful for accessing the field via an interface.
func (v *RemoveInstanceRemoveInstanceUserInstancesEdge) GetPinned() bool {
	return v.UserInstancesEdgeFragment.Pinned
}

// GetLikedByMe returns RemoveInstanceRemoveInstanceUserInstancesEdge.LikedByMe, and is useful for accessing the field via an interface.
func (v *RemoveInstanceRemoveInstanceUserInstancesEdge) GetLikedByMe() bool {
	return v.UserInstancesEdgeFragment.LikedByMe
}

func (v *RemoveInstanceRemoveInstanceUserInstancesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveInstanceRemoveInstanceUserInstancesEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveInstanceRemoveInstanceUserInstancesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserInstancesEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRemoveInstanceRemoveInstanceUserInstancesEdge struct {
	Cursor string `json:"cursor"`

	Node UserInstancesEdgeFragmentNodeInstance `json:"node"`

	InstanceUser UserInstancesEdgeFragmentInstanceUserAuthor `json:"instanceUser"`

	Rank string `json:"rank"`

	Pinned bool `json:"pinned"`

	LikedByMe bool `json:"likedByMe"`
}

func (v *RemoveInstanceRemoveInstanceUserInstancesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveInstanceRemoveInstanceUserInstancesEdge) __premarshalJSON() (*__premarshalRemoveInstanceRemoveInstanceUserInstancesEdge, error) {
	var retval __premarshalRemoveInstanceRemoveInstanceUserInstancesEdge

	retval.Cursor = v.UserInstancesEdgeFragment.Cursor
	retval.Node = v.UserInstancesEdgeFragment.Node
	retval.InstanceUser = v.UserInstancesEdgeFragment.InstanceUser
	retval.Rank = v.UserInstancesEdgeFragment.Rank
	retval.Pinned = v.UserInstancesEdgeFragment.Pinned
	retval.LikedByMe = v.UserInstancesEdgeFragment.LikedByMe
	return &retval, nil
}

// RemoveInstanceResponse is returned by RemoveInstance on success.
type RemoveInstanceResponse struct {
	RemoveInstance RemoveInstanceRemoveInstanceUserInstancesEdge `json:"removeInstance"`
}

// GetRemoveInstance returns RemoveInstanceResponse.RemoveInstance, and is useful for accessing the field via an interface.
func (v *RemoveInstanceResponse) GetRemoveInstance() RemoveInstanceRemoveInstanceUserInstancesEdge {
	return v.RemoveInstance
}

// RemoveLikeRemoveLikeInstanceLikesEdge includes the requested fields of the GraphQL type InstanceLikesEdge.
type RemoveLikeRemoveLikeInstanceLikesEdge struct {
	InstanceLikesEdgeFragment `json:"-"`
}

// GetCursor returns RemoveLikeRemoveLikeInstanceLikesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *RemoveLikeRemoveLikeInstanceLikesEdge) GetCursor() string {
	return v.InstanceLikesEdgeFragment.Cursor
}

// GetLikedAt returns RemoveLikeRemoveLikeInstanceLikesEdge.LikedAt, and is useful for accessing the field via an interface.
func (v *RemoveLikeRemoveLikeInstanceLikesEdge) GetLikedAt() time.Time {
	return v.InstanceLikesEdgeFragment.LikedAt
}

// GetNode returns RemoveLikeRemoveLikeInstanceLikesEdge.Node, and is useful for accessing the field via an interface.
func (v *RemoveLikeRemoveLikeInstanceLikesEdge) GetNode() InstanceLikesEdgeFragmentNodeAuthor {
	return v.InstanceLikesEdgeFragment.Node
}

func (v *RemoveLikeRemoveLikeInstanceLikesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveLikeRemoveLikeInstanceLikesEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveLikeRemoveLikeInstanceLikesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstanceLikesEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRemoveLikeRemoveLikeInstanceLikesEdge struct {
	Cursor string `json:"cursor"`

	LikedAt time.Time `json:"likedAt"`

	Node InstanceLikesEdgeFragmentNodeAuthor `json:"node"`
}

func (v *RemoveLikeRemoveLikeInstanceLikesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveLikeRemoveLikeInstanceLikesEdge) __premarshalJSON() (*__premarshalRemoveLikeRemoveLikeInstanceLikesEdge, error) {
	var retval __premarshalRemoveLikeRemoveLikeInstanceLikesEdge

	retval.Cursor = v.InstanceLikesEdgeFragment.Cursor
	retval.LikedAt = v.InstanceLikesEdgeFragment.LikedAt
	retval.Node = v.InstanceLikesEdgeFragment.Node
	return &retval, nil
}

// RemoveLikeResponse is returned by RemoveLike on success.
type RemoveLikeResponse struct {
	RemoveLike RemoveLikeRemoveLikeInstanceLikesEdge `json:"removeLike"`
}

// GetRemoveLike returns RemoveLikeResponse.RemoveLike, and is useful for accessing the field via an interface.
func (v *RemoveLikeResponse) GetRemoveLike() RemoveLikeRemoveLikeInstanceLikesEdge {
	return v.RemoveLike
}

// RemoveMessageRemoveMessageChannelMessagesEdge includes the requested fields of the GraphQL type ChannelMessagesEdge.
type RemoveMessageRemoveMessageChannelMessagesEdge struct {
	ChannelMessagesEdgeFragment `json:"-"`
}

// GetCursor returns RemoveMessageRemoveMessageChannelMessagesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *RemoveMessageRemoveMessageChannelMessagesEdge) GetCursor() string {
	return v.ChannelMessagesEdgeFragment.Cursor
}

// GetNode returns RemoveMessageRemoveMessageChannelMessagesEdge.Node, and is useful for accessing the field via an interface.
func (v *RemoveMessageRemoveMessageChannelMessagesEdge) GetNode() ChannelMessagesEdgeFragmentNodeMessage {
	return v.ChannelMessagesEdgeFragment.Node
}

func (v *RemoveMessageRemoveMessageChannelMessagesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveMessageRemoveMessageChannelMessagesEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveMessageRemoveMessageChannelMessagesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.ChannelMessagesEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRemoveMessageRemoveMessageChannelMessagesEdge struct {
	Cursor string `json:"cursor"`

	Node ChannelMessagesEdgeFragmentNodeMessage `json:"node"`
}

func (v *RemoveMessageRemoveMessageChannelMessagesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveMessageRemoveMessageChannelMessagesEdge) __premarshalJSON() (*__premarshalRemoveMessageRemoveMessageChannelMessagesEdge, error) {
	var retval __premarshalRemoveMessageRemoveMessageChannelMessagesEdge

	retval.Cursor = v.ChannelMessagesEdgeFragment.Cursor
	retval.Node = v.ChannelMessagesEdgeFragment.Node
	return &retval, nil
}

// RemoveMessageResponse is returned by RemoveMessage on success.
type RemoveMessageResponse struct {
	RemoveMessage RemoveMessageRemoveMessageChannelMessagesEdge `json:"removeMessage"`
}

// GetRemoveMessage returns RemoveMessageResponse.RemoveMessage, and is useful for accessing the field via an interface.
func (v *RemoveMessageResponse) GetRemoveMessage() RemoveMessageRemoveMessageChannelMessagesEdge {
	return v.RemoveMessage
}

// RemoveRoleRemoveRoleAuthor includes the requested fields of the GraphQL type Author.
type RemoveRoleRemoveRoleAuthor struct {
	AuthorFragment `json:"-"`
}

// GetId returns RemoveRoleRemoveRoleAuthor.Id, and is useful for accessing the field via an interface.
func (v *RemoveRoleRemoveRoleAuthor) GetId() uuid.UUID { return v.AuthorFragment.Id }

// GetUserId returns RemoveRoleRemoveRoleAuthor.UserId, and is useful for accessing the field via an interface.
func (v *RemoveRoleRemoveRoleAuthor) GetUserId() uuid.UUID { return v.AuthorFragment.UserId }

// GetInstanceId returns RemoveRoleRemoveRoleAuthor.InstanceId, and is useful for accessing the field via an interface.
func (v *RemoveRoleRemoveRoleAuthor) GetInstanceId() uuid.UUID { return v.AuthorFragment.InstanceId }

// GetName returns RemoveRoleRemoveRoleAuthor.Name, and is useful for accessing the field via an interface.
func (v *RemoveRoleRemoveRoleAuthor) GetName() string { return v.AuthorFragment.Name }

// GetAvatar returns RemoveRoleRemoveRoleAuthor.Avatar, and is useful for accessing the field via an interface.
func (v *RemoveRoleRemoveRoleAuthor) GetAvatar() string { return v.AuthorFragment.Avatar }

// GetBio returns RemoveRoleRemoveRoleAuthor.Bio, and is useful for accessing the field via an interface.
func (v *RemoveRoleRemoveRoleAuthor) GetBio() string { return v.AuthorFragment.Bio }

// GetRoles returns RemoveRoleRemoveRoleAuthor.Roles, and is useful for accessing the field via an interface.
func (v *RemoveRoleRemoveRoleAuthor) GetRoles() []Role { return v.AuthorFragment.Roles }

// GetCreatedAt returns RemoveRoleRemoveRoleAuthor.CreatedAt, and is useful for accessing the field via an interface.
func (v *RemoveRoleRemoveRoleAuthor) GetCreatedAt() time.Time { return v.AuthorFragment.CreatedAt }

func (v *RemoveRoleRemoveRoleAuthor) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*RemoveRoleRemoveRoleAuthor
		graphql.NoUnmarshalJSON
	}
	firstPass.RemoveRoleRemoveRoleAuthor = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AuthorFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalRemoveRoleRemoveRoleAuthor struct {
	Id uuid.UUID `json:"id"`

	UserId uuid.UUID `json:"userId"`

	InstanceId uuid.UUID `json:"instanceId"`

	Name string `json:"name"`

	Avatar string `json:"avatar"`

	Bio string `json:"bio"`

	Roles []Role `json:"roles"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *RemoveRoleRemoveRoleAuthor) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *RemoveRoleRemoveRoleAuthor) __premarshalJSON() (*__premarshalRemoveRoleRemoveRoleAuthor, error) {
	var retval __premarshalRemoveRoleRemoveRoleAuthor

	retval.Id = v.AuthorFragment.Id
	retval.UserId = v.AuthorFragment.UserId
	retval.InstanceId = v.AuthorFragment.InstanceId
	retval.Name = v.AuthorFragment.Name
	retval.Avatar = v.AuthorFragment.Avatar
	retval.Bio = v.AuthorFragment.Bio
	retval.Roles = v.AuthorFragment.Roles
	retval.CreatedAt = v.AuthorFragment.CreatedAt
	return &retval, nil
}

// RemoveRoleResponse is returned by RemoveRole on success.
type RemoveRoleResponse struct {
	RemoveRole RemoveRoleRemoveRoleAuthor `json:"removeRole"`
}

// GetRemoveRole returns RemoveRoleResponse.RemoveRole, and is useful for accessing the field via an interface.
func (v *RemoveRoleResponse) GetRemoveRole() RemoveRoleRemoveRoleAuthor { return v.RemoveRole }

// ReorderChannelReorderChannelInstanceChannelsEdge includes the requested fields of the GraphQL type InstanceChannelsEdge.
type ReorderChannelReorderChannelInstanceChannelsEdge struct {
	InstanceChannelsEdgeFragment `json:"-"`
}

// GetCursor returns ReorderChannelReorderChannelInstanceChannelsEdge.Cursor, and is useful for accessing the field via an interface.
func (v *ReorderChannelReorderChannelInstanceChannelsEdge) GetCursor() string {
	return v.InstanceChannelsEdgeFragment.Cursor
}

// GetNode returns ReorderChannelReorderChannelInstanceChannelsEdge.Node, and is useful for accessing the field via an interface.
func (v *ReorderChannelReorderChannelInstanceChannelsEdge) GetNode() InstanceChannelsEdgeFragmentNodeChannel {
	return v.InstanceChannelsEdgeFragment.Node
}

func (v *ReorderChannelReorderChannelInstanceChannelsEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReorderChannelReorderChannelInstanceChannelsEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.ReorderChannelReorderChannelInstanceChannelsEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstanceChannelsEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReorderChannelReorderChannelInstanceChannelsEdge struct {
	Cursor string `json:"cursor"`

	Node InstanceChannelsEdgeFragmentNodeChannel `json:"node"`
}

func (v *ReorderChannelReorderChannelInstanceChannelsEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReorderChannelReorderChannelInstanceChannelsEdge) __premarshalJSON() (*__premarshalReorderChannelReorderChannelInstanceChannelsEdge, error) {
	var retval __premarshalReorderChannelReorderChannelInstanceChannelsEdge

	retval.Cursor = v.InstanceChannelsEdgeFragment.Cursor
	retval.Node = v.InstanceChannelsEdgeFragment.Node
	return &retval, nil
}

// ReorderChannelResponse is returned by ReorderChannel on success.
type ReorderChannelResponse struct {
	ReorderChannel ReorderChannelReorderChannelInstanceChannelsEdge `json:"reorderChannel"`
}

// GetReorderChannel returns ReorderChannelResponse.ReorderChannel, and is useful for accessing the field via an interface.
func (v *ReorderChannelResponse) GetReorderChannel() ReorderChannelReorderChannelInstanceChannelsEdge {
	return v.ReorderChannel
}

// ReorderInstanceReorderInstanceUserInstancesEdge includes the requested fields of the GraphQL type UserInstancesEdge.
type ReorderInstanceReorderInstanceUserInstancesEdge struct {
	UserInstancesEdgeFragment `json:"-"`
}

// GetCursor returns ReorderInstanceReorderInstanceUserInstancesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *ReorderInstanceReorderInstanceUserInstancesEdge) GetCursor() string {
	return v.UserInstancesEdgeFragment.Cursor
}

// GetNode returns ReorderInstanceReorderInstanceUserInstancesEdge.Node, and is useful for accessing the field via an interface.
func (v *ReorderInstanceReorderInstanceUserInstancesEdge) GetNode() UserInstancesEdgeFragmentNodeInstance {
	return v.UserInstancesEdgeFragment.Node
}

// GetInstanceUser returns ReorderInstanceReorderInstanceUserInstancesEdge.InstanceUser, and is useful for accessing the field via an interface.
func (v *ReorderInstanceReorderInstanceUserInstancesEdge) GetInstanceUser() UserInstancesEdgeFragmentInstanceUserAuthor {
	return v.UserInstancesEdgeFragment.InstanceUser
}

// GetRank returns ReorderInstanceReorderInstanceUserInstancesEdge.Rank, and is useful for accessing the field via an interface.
func (v *ReorderInstanceReorderInstanceUserInstancesEdge) GetRank() string {
	return v.UserInstancesEdgeFragment.Rank
}

// GetPinned returns ReorderInstanceReorderInstanceUserInstancesEdge.Pinned, and is useful for accessing the field via an interface.
func (v *ReorderInstanceReorderInstanceUserInstancesEdge) GetPinned() bool {
	return v.UserInstancesEdgeFragment.Pinned
}

// GetLikedByMe returns ReorderInstanceReorderInstanceUserInstancesEdge.LikedByMe, and is useful for accessing the field via an interface.
func (v *ReorderInstanceReorderInstanceUserInstancesEdge) GetLikedByMe() bool {
	return v.UserInstancesEdgeFragment.LikedByMe
}

func (v *ReorderInstanceReorderInstanceUserInstancesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReorderInstanceReorderInstanceUserInstancesEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.ReorderInstanceReorderInstanceUserInstancesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserInstancesEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReorderInstanceReorderInstanceUserInstancesEdge struct {
	Cursor string `json:"cursor"`

	Node UserInstancesEdgeFragmentNodeInstance `json:"node"`

	InstanceUser UserInstancesEdgeFragmentInstanceUserAuthor `json:"instanceUser"`

	Rank string `json:"rank"`

	Pinned bool `json:"pinned"`

	LikedByMe bool `json:"likedByMe"`
}

func (v *ReorderInstanceReorderInstanceUserInstancesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReorderInstanceReorderInstanceUserInstancesEdge) __premarshalJSON() (*__premarshalReorderInstanceReorderInstanceUserInstancesEdge, error) {
	var retval __premarshalReorderInstanceReorderInstanceUserInstancesEdge

	retval.Cursor = v.UserInstancesEdgeFragment.Cursor
	retval.Node = v.UserInstancesEdgeFragment.Node
	retval.InstanceUser = v.UserInstancesEdgeFragment.InstanceUser
	retval.Rank = v.UserInstancesEdgeFragment.Rank
	retval.Pinned = v.UserInstancesEdgeFragment.Pinned
	retval.LikedByMe = v.UserInstancesEdgeFragment.LikedByMe
	return &retval, nil
}

// ReorderInstanceResponse is returned by ReorderInstance on success.
type ReorderInstanceResponse struct {
	ReorderInstance ReorderInstanceReorderInstanceUserInstancesEdge `json:"reorderInstance"`
}

// GetReorderInstance returns ReorderInstanceResponse.ReorderInstance, and is useful for accessing the field via an interface.
func (v *ReorderInstanceResponse) GetReorderInstance() ReorderInstanceReorderInstanceUserInstancesEdge {
	return v.ReorderInstance
}

type Role string

const (
	RoleAdmin     Role = "ADMIN"
	RoleModerator Role = "MODERATOR"
	RoleMember    Role = "MEMBER"
	RoleBanned    Role = "BANNED"
	RoleAllUsers  Role = "ALL_USERS"
)

// UpdateChannelResponse is returned by UpdateChannel on success.
type UpdateChannelResponse struct {
	UpdateChannel UpdateChannelUpdateChannelInstanceChannelsEdge `json:"updateChannel"`
}

// GetUpdateChannel returns UpdateChannelResponse.UpdateChannel, and is useful for accessing the field via an interface.
func (v *UpdateChannelResponse) GetUpdateChannel() UpdateChannelUpdateChannelInstanceChannelsEdge {
	return v.UpdateChannel
}

// UpdateChannelUpdateChannelInstanceChannelsEdge includes the requested fields of the GraphQL type InstanceChannelsEdge.
type UpdateChannelUpdateChannelInstanceChannelsEdge struct {
	InstanceChannelsEdgeFragment `json:"-"`
}

// GetCursor returns UpdateChannelUpdateChannelInstanceChannelsEdge.Cursor, and is useful for accessing the field via an interface.
func (v *UpdateChannelUpdateChannelInstanceChannelsEdge) GetCursor() string {
	return v.InstanceChannelsEdgeFragment.Cursor
}

// GetNode returns UpdateChannelUpdateChannelInstanceChannelsEdge.Node, and is useful for accessing the field via an interface.
func (v *UpdateChannelUpdateChannelInstanceChannelsEdge) GetNode() InstanceChannelsEdgeFragmentNodeChannel {
	return v.InstanceChannelsEdgeFragment.Node
}

func (v *UpdateChannelUpdateChannelInstanceChannelsEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateChannelUpdateChannelInstanceChannelsEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateChannelUpdateChannelInstanceChannelsEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstanceChannelsEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateChannelUpdateChannelInstanceChannelsEdge struct {
	Cursor string `json:"cursor"`

	Node InstanceChannelsEdgeFragmentNodeChannel `json:"node"`
}

func (v *UpdateChannelUpdateChannelInstanceChannelsEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateChannelUpdateChannelInstanceChannelsEdge) __premarshalJSON() (*__premarshalUpdateChannelUpdateChannelInstanceChannelsEdge, error) {
	var retval __premarshalUpdateChannelUpdateChannelInstanceChannelsEdge

	retval.Cursor = v.InstanceChannelsEdgeFragment.Cursor
	retval.Node = v.InstanceChannelsEdgeFragment.Node
	return &retval, nil
}

// UpdateInstanceResponse is returned by UpdateInstance on success.
type UpdateInstanceResponse struct {
	UpdateInstance UpdateInstanceUpdateInstanceUserInstancesEdge `json:"updateInstance"`
}

// GetUpdateInstance returns UpdateInstanceResponse.UpdateInstance, and is useful for accessing the field via an interface.
func (v *UpdateInstanceResponse) GetUpdateInstance() UpdateInstanceUpdateInstanceUserInstancesEdge {
	return v.UpdateInstance
}

// UpdateInstanceUpdateInstanceUserInstancesEdge includes the requested fields of the GraphQL type UserInstancesEdge.
type UpdateInstanceUpdateInstanceUserInstancesEdge struct {
	UserInstancesEdgeFragment `json:"-"`
}

// GetCursor returns UpdateInstanceUpdateInstanceUserInstancesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *UpdateInstanceUpdateInstanceUserInstancesEdge) GetCursor() string {
	return v.UserInstancesEdgeFragment.Cursor
}

// GetNode returns UpdateInstanceUpdateInstanceUserInstancesEdge.Node, and is useful for accessing the field via an interface.
func (v *UpdateInstanceUpdateInstanceUserInstancesEdge) GetNode() UserInstancesEdgeFragmentNodeInstance {
	return v.UserInstancesEdgeFragment.Node
}

// GetInstanceUser returns UpdateInstanceUpdateInstanceUserInstancesEdge.InstanceUser, and is useful for accessing the field via an interface.
func (v *UpdateInstanceUpdateInstanceUserInstancesEdge) GetInstanceUser() UserInstancesEdgeFragmentInstanceUserAuthor {
	return v.UserInstancesEdgeFragment.InstanceUser
}

// GetRank returns UpdateInstanceUpdateInstanceUserInstancesEdge.Rank, and is useful for accessing the field via an interface.
func (v *UpdateInstanceUpdateInstanceUserInstancesEdge) GetRank() string {
	return v.UserInstancesEdgeFragment.Rank
}

// GetPinned returns UpdateInstanceUpdateInstanceUserInstancesEdge.Pinned, and is useful for accessing the field via an interface.
func (v *UpdateInstanceUpdateInstanceUserInstancesEdge) GetPinned() bool {
	return v.UserInstancesEdgeFragment.Pinned
}

// GetLikedByMe returns UpdateInstanceUpdateInstanceUserInstancesEdge.LikedByMe, and is useful for accessing the field via an interface.
func (v *UpdateInstanceUpdateInstanceUserInstancesEdge) GetLikedByMe() bool {
	return v.UserInstancesEdgeFragment.LikedByMe
}

func (v *UpdateInstanceUpdateInstanceUserInstancesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateInstanceUpdateInstanceUserInstancesEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateInstanceUpdateInstanceUserInstancesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserInstancesEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateInstanceUpdateInstanceUserInstancesEdge struct {
	Cursor string `json:"cursor"`

	Node UserInstancesEdgeFragmentNodeInstance `json:"node"`

	InstanceUser UserInstancesEdgeFragmentInstanceUserAuthor `json:"instanceUser"`

	Rank string `json:"rank"`

	Pinned bool `json:"pinned"`

	LikedByMe bool `json:"likedByMe"`
}

func (v *UpdateInstanceUpdateInstanceUserInstancesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateInstanceUpdateInstanceUserInstancesEdge) __premarshalJSON() (*__premarshalUpdateInstanceUpdateInstanceUserInstancesEdge, error) {
	var retval __premarshalUpdateInstanceUpdateInstanceUserInstancesEdge

	retval.Cursor = v.UserInstancesEdgeFragment.Cursor
	retval.Node = v.UserInstancesEdgeFragment.Node
	retval.InstanceUser = v.UserInstancesEdgeFragment.InstanceUser
	retval.Rank = v.UserInstancesEdgeFragment.Rank
	retval.Pinned = v.UserInstancesEdgeFragment.Pinned
	retval.LikedByMe = v.UserInstancesEdgeFragment.LikedByMe
	return &retval, nil
}

// UpdateUserResponse is returned by UpdateUser on success.
type UpdateUserResponse struct {
	UpdateUser UpdateUserUpdateUser `json:"updateUser"`
}

// GetUpdateUser returns UpdateUserResponse.UpdateUser, and is useful for accessing the field via an interface.
func (v *UpdateUserResponse) GetUpdateUser() UpdateUserUpdateUser { return v.UpdateUser }

// UpdateUserUpdateUser includes the requested fields of the GraphQL type User.
type UpdateUserUpdateUser struct {
	UserFragment `json:"-"`
}

// GetId returns UpdateUserUpdateUser.Id, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetId() uuid.UUID { return v.UserFragment.Id }

// GetName returns UpdateUserUpdateUser.Name, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetName() string { return v.UserFragment.Name }

// GetAvatar returns UpdateUserUpdateUser.Avatar, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetAvatar() string { return v.UserFragment.Avatar }

// GetBio returns UpdateUserUpdateUser.Bio, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetBio() string { return v.UserFragment.Bio }

// GetUid returns UpdateUserUpdateUser.Uid, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetUid() string { return v.UserFragment.Uid }

// GetInstancesConnection returns UpdateUserUpdateUser.InstancesConnection, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetInstancesConnection() UserFragmentInstancesConnectionUserInstancesConnection {
	return v.UserFragment.InstancesConnection
}

// GetNotificationsConnection returns UpdateUserUpdateUser.NotificationsConnection, and is useful for accessing the field via an interface.
func (v *UpdateUserUpdateUser) GetNotificationsConnection() UserFragmentNotificationsConnectionUserNotificationsConnection {
	return v.UserFragment.NotificationsConnection
}

func (v *UpdateUserUpdateUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateUserUpdateUser
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateUserUpdateUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateUserUpdateUser struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Avatar string `json:"avatar"`

	Bio string `json:"bio"`

	Uid string `json:"uid"`

	InstancesConnection UserFragmentInstancesConnectionUserInstancesConnection `json:"instancesConnection"`

	NotificationsConnection UserFragmentNotificationsConnectionUserNotificationsConnection `json:"notificationsConnection"`
}

func (v *UpdateUserUpdateUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateUserUpdateUser) __premarshalJSON() (*__premarshalUpdateUserUpdateUser, error) {
	var retval __premarshalUpdateUserUpdateUser

	retval.Id = v.UserFragment.Id
	retval.Name = v.UserFragment.Name
	retval.Avatar = v.UserFragment.Avatar
	retval.Bio = v.UserFragment.Bio
	retval.Uid = v.UserFragment.Uid
	retval.InstancesConnection = v.UserFragment.InstancesConnection
	retval.NotificationsConnection = v.UserFragment.NotificationsConnection
	return &retval, nil
}

// UserFragment includes the GraphQL fields of User requested by the fragment UserFragment.
type UserFragment struct {
	Id                      uuid.UUID                                                      `json:"id"`
	Name                    string                                                         `json:"name"`
	Avatar                  string                                                         `json:"avatar"`
	Bio                     string                                                         `json:"bio"`
	Uid                     string                                                         `json:"uid"`
	InstancesConnection     UserFragmentInstancesConnectionUserInstancesConnection         `json:"instancesConnection"`
	NotificationsConnection UserFragmentNotificationsConnectionUserNotificationsConnection `json:"notificationsConnection"`
}

// GetId returns UserFragment.Id, and is useful for accessing the field via an interface.
func (v *UserFragment) GetId() uuid.UUID { return v.Id }

// GetName returns UserFragment.Name, and is useful for accessing the field via an interface.
func (v *UserFragment) GetName() string { return v.Name }

// GetAvatar returns UserFragment.Avatar, and is useful for accessing the field via an interface.
func (v *UserFragment) GetAvatar() string { return v.Avatar }

// GetBio returns UserFragment.Bio, and is useful for accessing the field via an interface.
func (v *UserFragment) GetBio() string { return v.Bio }

// GetUid returns UserFragment.Uid, and is useful for accessing the field via an interface.
func (v *UserFragment) GetUid() string { return v.Uid }

// GetInstancesConnection returns UserFragment.InstancesConnection, and is useful for accessing the field via an interface.
func (v *UserFragment) GetInstancesConnection() UserFragmentInstancesConnectionUserInstancesConnection {
	return v.InstancesConnection
}

// GetNotificationsConnection returns UserFragment.NotificationsConnection, and is useful for accessing the field via an interface.
func (v *UserFragment) GetNotificationsConnection() UserFragmentNotificationsConnectionUserNotificationsConnection {
	return v.NotificationsConnection
}

// UserFragmentInstancesConnectionUserInstancesConnection includes the requested fields of the GraphQL type UserInstancesConnection.
type UserFragmentInstancesConnectionUserInstancesConnection struct {
	Edges    []UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge `json:"edges"`
	PageInfo UserFragmentInstancesConnectionUserInstancesConnectionPageInfo                 `json:"pageInfo"`
}

// GetEdges returns UserFragmentInstancesConnectionUserInstancesConnection.Edges, and is useful for accessing the field via an interface.
func (v *UserFragmentInstancesConnectionUserInstancesConnection) GetEdges() []UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge {
	return v.Edges
}

// GetPageInfo returns UserFragmentInstancesConnectionUserInstancesConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *UserFragmentInstancesConnectionUserInstancesConnection) GetPageInfo() UserFragmentInstancesConnectionUserInstancesConnectionPageInfo {
	return v.PageInfo
}

// UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge includes the requested fields of the GraphQL type UserInstancesEdge.
type UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge struct {
	UserInstancesEdgeFragment `json:"-"`
}

// GetCursor returns UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge.Cursor, and is useful for accessing the field via an interface.
func (v *UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge) GetCursor() string {
	return v.UserInstancesEdgeFragment.Cursor
}

// GetNode returns UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge.Node, and is useful for accessing the field via an interface.
func (v *UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge) GetNode() UserInstancesEdgeFragmentNodeInstance {
	return v.UserInstancesEdgeFragment.Node
}

// GetInstanceUser returns UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge.InstanceUser, and is useful for accessing the field via an interface.
func (v *UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge) GetInstanceUser() UserInstancesEdgeFragmentInstanceUserAuthor {
	return v.UserInstancesEdgeFragment.InstanceUser
}

// GetRank returns UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge.Rank, and is useful for accessing the field via an interface.
func (v *UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge) GetRank() string {
	return v.UserInstancesEdgeFragment.Rank
}

// GetPinned returns UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge.Pinned, and is useful for accessing the field via an interface.
func (v *UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge) GetPinned() bool {
	return v.UserInstancesEdgeFragment.Pinned
}

// GetLikedByMe returns UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge.LikedByMe, and is useful for accessing the field via an interface.
func (v *UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge) GetLikedByMe() bool {
	return v.UserInstancesEdgeFragment.LikedByMe
}

func (v *UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserInstancesEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge struct {
	Cursor string `json:"cursor"`

	Node UserInstancesEdgeFragmentNodeInstance `json:"node"`

	InstanceUser UserInstancesEdgeFragmentInstanceUserAuthor `json:"instanceUser"`

	Rank string `json:"rank"`

	Pinned bool `json:"pinned"`

	LikedByMe bool `json:"likedByMe"`
}

func (v *UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge) __premarshalJSON() (*__premarshalUserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge, error) {
	var retval __premarshalUserFragmentInstancesConnectionUserInstancesConnectionEdgesUserInstancesEdge

	retval.Cursor = v.UserInstancesEdgeFragment.Cursor
	retval.Node = v.UserInstancesEdgeFragment.Node
	retval.InstanceUser = v.UserInstancesEdgeFragment.InstanceUser
	retval.Rank = v.UserInstancesEdgeFragment.Rank
	retval.Pinned = v.UserInstancesEdgeFragment.Pinned
	retval.LikedByMe = v.UserInstancesEdgeFragment.LikedByMe
	return &retval, nil
}

// UserFragmentInstancesConnectionUserInstancesConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type UserFragmentInstancesConnectionUserInstancesConnectionPageInfo struct {
	PageInfoFragment `json:"-"`
}

// GetHasNextPage returns UserFragmentInstancesConnectionUserInstancesConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *UserFragmentInstancesConnectionUserInstancesConnectionPageInfo) GetHasNextPage() bool {
	return v.PageInfoFragment.HasNextPage
}

// GetHasPreviousPage returns UserFragmentInstancesConnectionUserInstancesConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *UserFragmentInstancesConnectionUserInstancesConnectionPageInfo) GetHasPreviousPage() bool {
	return v.PageInfoFragment.HasPreviousPage
}

func (v *UserFragmentInstancesConnectionUserInstancesConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserFragmentInstancesConnectionUserInstancesConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.UserFragmentInstancesConnectionUserInstancesConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfoFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserFragmentInstancesConnectionUserInstancesConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	HasPreviousPage bool `json:"hasPreviousPage"`
}

func (v *UserFragmentInstancesConnectionUserInstancesConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserFragmentInstancesConnectionUserInstancesConnectionPageInfo) __premarshalJSON() (*__premarshalUserFragmentInstancesConnectionUserInstancesConnectionPageInfo, error) {
	var retval __premarshalUserFragmentInstancesConnectionUserInstancesConnectionPageInfo

	retval.HasNextPage = v.PageInfoFragment.HasNextPage
	retval.HasPreviousPage = v.PageInfoFragment.HasPreviousPage
	return &retval, nil
}

// UserFragmentNotificationsConnectionUserNotificationsConnection includes the requested fields of the GraphQL type UserNotificationsConnection.
type UserFragmentNotificationsConnectionUserNotificationsConnection struct {
	Edges     []UserFragmentNotificationsConnectionUserNotificationsConnectionEdgesUserNotificationsEdge `json:"edges"`
	PageInfo  UserFragmentNotificationsConnectionUserNotificationsConnectionPageInfo                     `json:"pageInfo"`
	HasUnread bool                                                                                       `json:"hasUnread"`
}

// GetEdges returns UserFragmentNotificationsConnectionUserNotificationsConnection.Edges, and is useful for accessing the field via an interface.
func (v *UserFragmentNotificationsConnectionUserNotificationsConnection) GetEdges() []UserFragmentNotificationsConnectionUserNotificationsConnectionEdgesUserNotificationsEdge {
	return v.Edges
}

// GetPageInfo returns UserFragmentNotificationsConnectionUserNotificationsConnection.PageInfo, and is useful for accessing the field via an interface.
func (v *UserFragmentNotificationsConnectionUserNotificationsConnection) GetPageInfo() UserFragmentNotificationsConnectionUserNotificationsConnectionPageInfo {
	return v.PageInfo
}

// GetHasUnread returns UserFragmentNotificationsConnectionUserNotificationsConnection.HasUnread, and is useful for accessing the field via an interface.
func (v *UserFragmentNotificationsConnectionUserNotificationsConnection) GetHasUnread() bool {
	return v.HasUnread
}

// UserFragmentNotificationsConnectionUserNotificationsConnectionEdgesUserNotificationsEdge includes the requested fields of the GraphQL type UserNotificationsEdge.
type UserFragmentNotificationsConnectionUserNotificationsConnectionEdgesUserNotificationsEdge struct {
	UserNotificationsEdgeFragment `json:"-"`
}

// GetCursor returns UserFragmentNotificationsConnectionUserNotificationsConnectionEdgesUserNotificationsEdge.Cursor, and is useful for accessing the field via an interface.
func (v *UserFragmentNotificationsConnectionUserNotificationsConnectionEdgesUserNotificationsEdge) GetCursor() string {
	return v.UserNotificationsEdgeFragment.Cursor
}

// GetNode returns UserFragmentNotificationsConnectionUserNotificationsConnectionEdgesUserNotificationsEdge.Node, and is useful for accessing the field via an interface.
func (v *UserFragmentNotificationsConnectionUserNotificationsConnectionEdgesUserNotificationsEdge) GetNode() UserNotificationsEdgeFragmentNodeNotification {
	return v.UserNotificationsEdgeFragment.Node
}

func (v *UserFragmentNotificationsConnectionUserNotificationsConnectionEdgesUserNotificationsEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserFragmentNotificationsConnectionUserNotificationsConnectionEdgesUserNotificationsEdge
		graphql.NoUnmarshalJSON
	}
	firstPass.UserFragmentNotificationsConnectionUserNotificationsConnectionEdgesUserNotificationsEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserNotificationsEdgeFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserFragmentNotificationsConnectionUserNotificationsConnectionEdgesUserNotificationsEdge struct {
	Cursor string `json:"cursor"`

	Node UserNotificationsEdgeFragmentNodeNotification `json:"node"`
}

func (v *UserFragmentNotificationsConnectionUserNotificationsConnectionEdgesUserNotificationsEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserFragmentNotificationsConnectionUserNotificationsConnectionEdgesUserNotificationsEdge) __premarshalJSON() (*__premarshalUserFragmentNotificationsConnectionUserNotificationsConnectionEdgesUserNotificationsEdge, error) {
	var retval __premarshalUserFragmentNotificationsConnectionUserNotificationsConnectionEdgesUserNotificationsEdge

	retval.Cursor = v.UserNotificationsEdgeFragment.Cursor
	retval.Node = v.UserNotificationsEdgeFragment.Node
	return &retval, nil
}

// UserFragmentNotificationsConnectionUserNotificationsConnectionPageInfo includes the requested fields of the GraphQL type PageInfo.
type UserFragmentNotificationsConnectionUserNotificationsConnectionPageInfo struct {
	PageInfoFragment `json:"-"`
}

// GetHasNextPage returns UserFragmentNotificationsConnectionUserNotificationsConnectionPageInfo.HasNextPage, and is useful for accessing the field via an interface.
func (v *UserFragmentNotificationsConnectionUserNotificationsConnectionPageInfo) GetHasNextPage() bool {
	return v.PageInfoFragment.HasNextPage
}

// GetHasPreviousPage returns UserFragmentNotificationsConnectionUserNotificationsConnectionPageInfo.HasPreviousPage, and is useful for accessing the field via an interface.
func (v *UserFragmentNotificationsConnectionUserNotificationsConnectionPageInfo) GetHasPreviousPage() bool {
	return v.PageInfoFragment.HasPreviousPage
}

func (v *UserFragmentNotificationsConnectionUserNotificationsConnectionPageInfo) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserFragmentNotificationsConnectionUserNotificationsConnectionPageInfo
		graphql.NoUnmarshalJSON
	}
	firstPass.UserFragmentNotificationsConnectionUserNotificationsConnectionPageInfo = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.PageInfoFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserFragmentNotificationsConnectionUserNotificationsConnectionPageInfo struct {
	HasNextPage bool `json:"hasNextPage"`

	HasPreviousPage bool `json:"hasPreviousPage"`
}

func (v *UserFragmentNotificationsConnectionUserNotificationsConnectionPageInfo) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserFragmentNotificationsConnectionUserNotificationsConnectionPageInfo) __premarshalJSON() (*__premarshalUserFragmentNotificationsConnectionUserNotificationsConnectionPageInfo, error) {
	var retval __premarshalUserFragmentNotificationsConnectionUserNotificationsConnectionPageInfo

	retval.HasNextPage = v.PageInfoFragment.HasNextPage
	retval.HasPreviousPage = v.PageInfoFragment.HasPreviousPage
	return &retval, nil
}

type UserInput struct {
	Name   string `json:"name"`
	Avatar string `json:"avatar"`
	Bio    string `json:"bio"`
}

// GetName returns UserInput.Name, and is useful for accessing the field via an interface.
func (v *UserInput) GetName() string { return v.Name }

// GetAvatar returns UserInput.Avatar, and is useful for accessing the field via an interface.
func (v *UserInput) GetAvatar() string { return v.Avatar }

// GetBio returns UserInput.Bio, and is useful for accessing the field via an interface.
func (v *UserInput) GetBio() string { return v.Bio }

// UserInstancesEdgeFragment includes the GraphQL fields of UserInstancesEdge requested by the fragment UserInstancesEdgeFragment.
type UserInstancesEdgeFragment struct {
	Cursor       string                                      `json:"cursor"`
	Node         UserInstancesEdgeFragmentNodeInstance       `json:"node"`
	InstanceUser UserInstancesEdgeFragmentInstanceUserAuthor `json:"instanceUser"`
	Rank         string                                      `json:"rank"`
	Pinned       bool                                        `json:"pinned"`
	LikedByMe    bool                                        `json:"likedByMe"`
}

// GetCursor returns UserInstancesEdgeFragment.Cursor, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragment) GetCursor() string { return v.Cursor }

// GetNode returns UserInstancesEdgeFragment.Node, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragment) GetNode() UserInstancesEdgeFragmentNodeInstance { return v.Node }

// GetInstanceUser returns UserInstancesEdgeFragment.InstanceUser, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragment) GetInstanceUser() UserInstancesEdgeFragmentInstanceUserAuthor {
	return v.InstanceUser
}

// GetRank returns UserInstancesEdgeFragment.Rank, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragment) GetRank() string { return v.Rank }

// GetPinned returns UserInstancesEdgeFragment.Pinned, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragment) GetPinned() bool { return v.Pinned }

// GetLikedByMe returns UserInstancesEdgeFragment.LikedByMe, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragment) GetLikedByMe() bool { return v.LikedByMe }

// UserInstancesEdgeFragmentInstanceUserAuthor includes the requested fields of the GraphQL type Author.
type UserInstancesEdgeFragmentInstanceUserAuthor struct {
	AuthorFragment `json:"-"`
}

// GetId returns UserInstancesEdgeFragmentInstanceUserAuthor.Id, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentInstanceUserAuthor) GetId() uuid.UUID { return v.AuthorFragment.Id }

// GetUserId returns UserInstancesEdgeFragmentInstanceUserAuthor.UserId, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentInstanceUserAuthor) GetUserId() uuid.UUID {
	return v.AuthorFragment.UserId
}

// GetInstanceId returns UserInstancesEdgeFragmentInstanceUserAuthor.InstanceId, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentInstanceUserAuthor) GetInstanceId() uuid.UUID {
	return v.AuthorFragment.InstanceId
}

// GetName returns UserInstancesEdgeFragmentInstanceUserAuthor.Name, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentInstanceUserAuthor) GetName() string { return v.AuthorFragment.Name }

// GetAvatar returns UserInstancesEdgeFragmentInstanceUserAuthor.Avatar, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentInstanceUserAuthor) GetAvatar() string {
	return v.AuthorFragment.Avatar
}

// GetBio returns UserInstancesEdgeFragmentInstanceUserAuthor.Bio, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentInstanceUserAuthor) GetBio() string { return v.AuthorFragment.Bio }

// GetRoles returns UserInstancesEdgeFragmentInstanceUserAuthor.Roles, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentInstanceUserAuthor) GetRoles() []Role {
	return v.AuthorFragment.Roles
}

// GetCreatedAt returns UserInstancesEdgeFragmentInstanceUserAuthor.CreatedAt, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentInstanceUserAuthor) GetCreatedAt() time.Time {
	return v.AuthorFragment.CreatedAt
}

func (v *UserInstancesEdgeFragmentInstanceUserAuthor) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserInstancesEdgeFragmentInstanceUserAuthor
		graphql.NoUnmarshalJSON
	}
	firstPass.UserInstancesEdgeFragmentInstanceUserAuthor = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.AuthorFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserInstancesEdgeFragmentInstanceUserAuthor struct {
	Id uuid.UUID `json:"id"`

	UserId uuid.UUID `json:"userId"`

	InstanceId uuid.UUID `json:"instanceId"`

	Name string `json:"name"`

	Avatar string `json:"avatar"`

	Bio string `json:"bio"`

	Roles []Role `json:"roles"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *UserInstancesEdgeFragmentInstanceUserAuthor) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserInstancesEdgeFragmentInstanceUserAuthor) __premarshalJSON() (*__premarshalUserInstancesEdgeFragmentInstanceUserAuthor, error) {
	var retval __premarshalUserInstancesEdgeFragmentInstanceUserAuthor

	retval.Id = v.AuthorFragment.Id
	retval.UserId = v.AuthorFragment.UserId
	retval.InstanceId = v.AuthorFragment.InstanceId
	retval.Name = v.AuthorFragment.Name
	retval.Avatar = v.AuthorFragment.Avatar
	retval.Bio = v.AuthorFragment.Bio
	retval.Roles = v.AuthorFragment.Roles
	retval.CreatedAt = v.AuthorFragment.CreatedAt
	return &retval, nil
}

// UserInstancesEdgeFragmentNodeInstance includes the requested fields of the GraphQL type Instance.
type UserInstancesEdgeFragmentNodeInstance struct {
	InstanceFragment `json:"-"`
}

// GetId returns UserInstancesEdgeFragmentNodeInstance.Id, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentNodeInstance) GetId() uuid.UUID { return v.InstanceFragment.Id }

// GetName returns UserInstancesEdgeFragmentNodeInstance.Name, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentNodeInstance) GetName() string { return v.InstanceFragment.Name }

// GetAuthor returns UserInstancesEdgeFragmentNodeInstance.Author, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentNodeInstance) GetAuthor() InstanceFragmentAuthor {
	return v.InstanceFragment.Author
}

// GetReadAccess returns UserInstancesEdgeFragmentNodeInstance.ReadAccess, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentNodeInstance) GetReadAccess() Access {
	return v.InstanceFragment.ReadAccess
}

// GetIcon returns UserInstancesEdgeFragmentNodeInstance.Icon, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentNodeInstance) GetIcon() string { return v.InstanceFragment.Icon }

// GetCreatedAt returns UserInstancesEdgeFragmentNodeInstance.CreatedAt, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentNodeInstance) GetCreatedAt() time.Time {
	return v.InstanceFragment.CreatedAt
}

// GetDescription returns UserInstancesEdgeFragmentNodeInstance.Description, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentNodeInstance) GetDescription() string {
	return v.InstanceFragment.Description
}

// GetShowAuthor returns UserInstancesEdgeFragmentNodeInstance.ShowAuthor, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentNodeInstance) GetShowAuthor() bool {
	return v.InstanceFragment.ShowAuthor
}

// GetShowChat returns UserInstancesEdgeFragmentNodeInstance.ShowChat, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentNodeInstance) GetShowChat() bool {
	return v.InstanceFragment.ShowChat
}

// GetShowLikes returns UserInstancesEdgeFragmentNodeInstance.ShowLikes, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentNodeInstance) GetShowLikes() bool {
	return v.InstanceFragment.ShowLikes
}

// GetShowComments returns UserInstancesEdgeFragmentNodeInstance.ShowComments, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentNodeInstance) GetShowComments() bool {
	return v.InstanceFragment.ShowComments
}

// GetLikesCount returns UserInstancesEdgeFragmentNodeInstance.LikesCount, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentNodeInstance) GetLikesCount() int {
	return v.InstanceFragment.LikesCount
}

// GetCommentsCount returns UserInstancesEdgeFragmentNodeInstance.CommentsCount, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentNodeInstance) GetCommentsCount() int {
	return v.InstanceFragment.CommentsCount
}

// GetLikesConnection returns UserInstancesEdgeFragmentNodeInstance.LikesConnection, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentNodeInstance) GetLikesConnection() InstanceFragmentLikesConnectionInstanceLikesConnection {
	return v.InstanceFragment.LikesConnection
}

// GetChannelsConnection returns UserInstancesEdgeFragmentNodeInstance.ChannelsConnection, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentNodeInstance) GetChannelsConnection() InstanceFragmentChannelsConnectionInstanceChannelsConnection {
	return v.InstanceFragment.ChannelsConnection
}

// GetAuthorsConnection returns UserInstancesEdgeFragmentNodeInstance.AuthorsConnection, and is useful for accessing the field via an interface.
func (v *UserInstancesEdgeFragmentNodeInstance) GetAuthorsConnection() InstanceFragmentAuthorsConnectionInstanceAuthorsConnection {
	return v.InstanceFragment.AuthorsConnection
}

func (v *UserInstancesEdgeFragmentNodeInstance) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserInstancesEdgeFragmentNodeInstance
		graphql.NoUnmarshalJSON
	}
	firstPass.UserInstancesEdgeFragmentNodeInstance = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.InstanceFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserInstancesEdgeFragmentNodeInstance struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Author InstanceFragmentAuthor `json:"author"`

	ReadAccess Access `json:"readAccess"`

	Icon string `json:"icon"`

	CreatedAt time.Time `json:"createdAt"`

	Description string `json:"description"`

	ShowAuthor bool `json:"showAuthor"`

	ShowChat bool `json:"showChat"`

	ShowLikes bool `json:"showLikes"`

	ShowComments bool `json:"showComments"`

	LikesCount int `json:"likesCount"`

	CommentsCount int `json:"commentsCount"`

	LikesConnection InstanceFragmentLikesConnectionInstanceLikesConnection `json:"likesConnection"`

	ChannelsConnection InstanceFragmentChannelsConnectionInstanceChannelsConnection `json:"channelsConnection"`

	AuthorsConnection InstanceFragmentAuthorsConnectionInstanceAuthorsConnection `json:"authorsConnection"`
}

func (v *UserInstancesEdgeFragmentNodeInstance) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserInstancesEdgeFragmentNodeInstance) __premarshalJSON() (*__premarshalUserInstancesEdgeFragmentNodeInstance, error) {
	var retval __premarshalUserInstancesEdgeFragmentNodeInstance

	retval.Id = v.InstanceFragment.Id
	retval.Name = v.InstanceFragment.Name
	retval.Author = v.InstanceFragment.Author
	retval.ReadAccess = v.InstanceFragment.ReadAccess
	retval.Icon = v.InstanceFragment.Icon
	retval.CreatedAt = v.InstanceFragment.CreatedAt
	retval.Description = v.InstanceFragment.Description
	retval.ShowAuthor = v.InstanceFragment.ShowAuthor
	retval.ShowChat = v.InstanceFragment.ShowChat
	retval.ShowLikes = v.InstanceFragment.ShowLikes
	retval.ShowComments = v.InstanceFragment.ShowComments
	retval.LikesCount = v.InstanceFragment.LikesCount
	retval.CommentsCount = v.InstanceFragment.CommentsCount
	retval.LikesConnection = v.InstanceFragment.LikesConnection
	retval.ChannelsConnection = v.InstanceFragment.ChannelsConnection
	retval.AuthorsConnection = v.InstanceFragment.AuthorsConnection
	return &retval, nil
}

// UserNotificationsEdgeFragment includes the GraphQL fields of UserNotificationsEdge requested by the fragment UserNotificationsEdgeFragment.
type UserNotificationsEdgeFragment struct {
	Cursor string                                        `json:"cursor"`
	Node   UserNotificationsEdgeFragmentNodeNotification `json:"node"`
}

// GetCursor returns UserNotificationsEdgeFragment.Cursor, and is useful for accessing the field via an interface.
func (v *UserNotificationsEdgeFragment) GetCursor() string { return v.Cursor }

// GetNode returns UserNotificationsEdgeFragment.Node, and is useful for accessing the field via an interface.
func (v *UserNotificationsEdgeFragment) GetNode() UserNotificationsEdgeFragmentNodeNotification {
	return v.Node
}

// UserNotificationsEdgeFragmentNodeNotification includes the requested fields of the GraphQL type Notification.
type UserNotificationsEdgeFragmentNodeNotification struct {
	NotificationFragment `json:"-"`
}

// GetId returns UserNotificationsEdgeFragmentNodeNotification.Id, and is useful for accessing the field via an interface.
func (v *UserNotificationsEdgeFragmentNodeNotification) GetId() uuid.UUID {
	return v.NotificationFragment.Id
}

// GetKind returns UserNotificationsEdgeFragmentNodeNotification.Kind, and is useful for accessing the field via an interface.
func (v *UserNotificationsEdgeFragmentNodeNotification) GetKind() NotificationKind {
	return v.NotificationFragment.Kind
}

// GetAuthor returns UserNotificationsEdgeFragmentNodeNotification.Author, and is useful for accessing the field via an interface.
func (v *UserNotificationsEdgeFragmentNodeNotification) GetAuthor() *NotificationFragmentAuthor {
	return v.NotificationFragment.Author
}

// GetInstance returns UserNotificationsEdgeFragmentNodeNotification.Instance, and is useful for accessing the field via an interface.
func (v *UserNotificationsEdgeFragmentNodeNotification) GetInstance() *NotificationFragmentInstance {
	return v.NotificationFragment.Instance
}

// GetMessage returns UserNotificationsEdgeFragmentNodeNotification.Message, and is useful for accessing the field via an interface.
func (v *UserNotificationsEdgeFragmentNodeNotification) GetMessage() *NotificationFragmentMessage {
	return v.NotificationFragment.Message
}

// GetCreatedAt returns UserNotificationsEdgeFragmentNodeNotification.CreatedAt, and is useful for accessing the field via an interface.
func (v *UserNotificationsEdgeFragmentNodeNotification) GetCreatedAt() time.Time {
	return v.NotificationFragment.CreatedAt
}

func (v *UserNotificationsEdgeFragmentNodeNotification) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserNotificationsEdgeFragmentNodeNotification
		graphql.NoUnmarshalJSON
	}
	firstPass.UserNotificationsEdgeFragmentNodeNotification = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.NotificationFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserNotificationsEdgeFragmentNodeNotification struct {
	Id uuid.UUID `json:"id"`

	Kind NotificationKind `json:"kind"`

	Author *NotificationFragmentAuthor `json:"author"`

	Instance *NotificationFragmentInstance `json:"instance"`

	Message *NotificationFragmentMessage `json:"message"`

	CreatedAt time.Time `json:"createdAt"`
}

func (v *UserNotificationsEdgeFragmentNodeNotification) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserNotificationsEdgeFragmentNodeNotification) __premarshalJSON() (*__premarshalUserNotificationsEdgeFragmentNodeNotification, error) {
	var retval __premarshalUserNotificationsEdgeFragmentNodeNotification

	retval.Id = v.NotificationFragment.Id
	retval.Kind = v.NotificationFragment.Kind
	retval.Author = v.NotificationFragment.Author
	retval.Instance = v.NotificationFragment.Instance
	retval.Message = v.NotificationFragment.Message
	retval.CreatedAt = v.NotificationFragment.CreatedAt
	return &retval, nil
}

// UserResponse is returned by User on success.
type UserResponse struct {
	User UserUser `json:"user"`
}

// GetUser returns UserResponse.User, and is useful for accessing the field via an interface.
func (v *UserResponse) GetUser() UserUser { return v.User }

// UserUser includes the requested fields of the GraphQL type User.
type UserUser struct {
	UserFragment `json:"-"`
}

// GetId returns UserUser.Id, and is useful for accessing the field via an interface.
func (v *UserUser) GetId() uuid.UUID { return v.UserFragment.Id }

// GetName returns UserUser.Name, and is useful for accessing the field via an interface.
func (v *UserUser) GetName() string { return v.UserFragment.Name }

// GetAvatar returns UserUser.Avatar, and is useful for accessing the field via an interface.
func (v *UserUser) GetAvatar() string { return v.UserFragment.Avatar }

// GetBio returns UserUser.Bio, and is useful for accessing the field via an interface.
func (v *UserUser) GetBio() string { return v.UserFragment.Bio }

// GetUid returns UserUser.Uid, and is useful for accessing the field via an interface.
func (v *UserUser) GetUid() string { return v.UserFragment.Uid }

// GetInstancesConnection returns UserUser.InstancesConnection, and is useful for accessing the field via an interface.
func (v *UserUser) GetInstancesConnection() UserFragmentInstancesConnectionUserInstancesConnection {
	return v.UserFragment.InstancesConnection
}

// GetNotificationsConnection returns UserUser.NotificationsConnection, and is useful for accessing the field via an interface.
func (v *UserUser) GetNotificationsConnection() UserFragmentNotificationsConnectionUserNotificationsConnection {
	return v.UserFragment.NotificationsConnection
}

func (v *UserUser) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UserUser
		graphql.NoUnmarshalJSON
	}
	firstPass.UserUser = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.UserFragment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUserUser struct {
	Id uuid.UUID `json:"id"`

	Name string `json:"name"`

	Avatar string `json:"avatar"`

	Bio string `json:"bio"`

	Uid string `json:"uid"`

	InstancesConnection UserFragmentInstancesConnectionUserInstancesConnection `json:"instancesConnection"`

	NotificationsConnection UserFragmentNotificationsConnectionUserNotificationsConnection `json:"notificationsConnection"`
}

func (v *UserUser) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UserUser) __premarshalJSON() (*__premarshalUserUser, error) {
	var retval __premarshalUserUser

	retval.Id = v.UserFragment.Id
	retval.Name = v.UserFragment.Name
	retval.Avatar = v.UserFragment.Avatar
	retval.Bio = v.UserFragment.Bio
	retval.Uid = v.UserFragment.Uid
	retval.InstancesConnection = v.UserFragment.InstancesConnection
	retval.NotificationsConnection = v.UserFragment.NotificationsConnection
	return &retval, nil
}

// __AddChannelInput is used internally by genqlient
type __AddChannelInput struct {
	Input          ChannelInput `json:"input"`
	MessagesLast   int          `json:"messagesLast"`
	MessagesBefore string       `json:"messagesBefore"`
}

// GetInput returns __AddChannelInput.Input, and is useful for accessing the field via an interface.
func (v *__AddChannelInput) GetInput() ChannelInput { return v.Input }

// GetMessagesLast returns __AddChannelInput.MessagesLast, and is useful for accessing the field via an interface.
func (v *__AddChannelInput) GetMessagesLast() int { return v.MessagesLast }

// GetMessagesBefore returns __AddChannelInput.MessagesBefore, and is useful for accessing the field via an interface.
func (v *__AddChannelInput) GetMessagesBefore() string { return v.MessagesBefore }

// __AddInstanceInput is used internally by genqlient
type __AddInstanceInput struct {
	Input          InstanceInput `json:"input"`
	ChannelsFirst  int           `json:"channelsFirst"`
	ChannelsAfter  string        `json:"channelsAfter"`
	LikesFirst     int           `json:"likesFirst"`
	LikesAfter     string        `json:"likesAfter"`
	AuthorsFirst   int           `json:"authorsFirst"`
	AuthorsAfter   string        `json:"authorsAfter"`
	AuthorsRoles   []Role        `json:"authorsRoles"`
	MessagesLast   int           `json:"messagesLast"`
	MessagesBefore string        `json:"messagesBefore"`
}

// GetInput returns __AddInstanceInput.Input, and is useful for accessing the field via an interface.
func (v *__AddInstanceInput) GetInput() InstanceInput { return v.Input }

// GetChannelsFirst returns __AddInstanceInput.ChannelsFirst, and is useful for accessing the field via an interface.
func (v *__AddInstanceInput) GetChannelsFirst() int { return v.ChannelsFirst }

// GetChannelsAfter returns __AddInstanceInput.ChannelsAfter, and is useful for accessing the field via an interface.
func (v *__AddInstanceInput) GetChannelsAfter() string { return v.ChannelsAfter }

// GetLikesFirst returns __AddInstanceInput.LikesFirst, and is useful for accessing the field via an interface.
func (v *__AddInstanceInput) GetLikesFirst() int { return v.LikesFirst }

// GetLikesAfter returns __AddInstanceInput.LikesAfter, and is useful for accessing the field via an interface.
func (v *__AddInstanceInput) GetLikesAfter() string { return v.LikesAfter }

// GetAuthorsFirst returns __AddInstanceInput.AuthorsFirst, and is useful for accessing the field via an interface.
func (v *__AddInstanceInput) GetAuthorsFirst() int { return v.AuthorsFirst }

// GetAuthorsAfter returns __AddInstanceInput.AuthorsAfter, and is useful for accessing the field via an interface.
func (v *__AddInstanceInput) GetAuthorsAfter() string { return v.AuthorsAfter }

// GetAuthorsRoles returns __AddInstanceInput.AuthorsRoles, and is useful for accessing the field via an interface.
func (v *__AddInstanceInput) GetAuthorsRoles() []Role { return v.AuthorsRoles }

// GetMessagesLast returns __AddInstanceInput.MessagesLast, and is useful for accessing the field via an interface.
func (v *__AddInstanceInput) GetMessagesLast() int { return v.MessagesLast }

// GetMessagesBefore returns __AddInstanceInput.MessagesBefore, and is useful for accessing the field via an interface.
func (v *__AddInstanceInput) GetMessagesBefore() string { return v.MessagesBefore }

// __AddInviteInput is used internally by genqlient
type __AddInviteInput struct {
	Input InviteInput `json:"input"`
}

// GetInput returns __AddInviteInput.Input, and is useful for accessing the field via an interface.
func (v *__AddInviteInput) GetInput() InviteInput { return v.Input }

// __AddLikeInput is used internally by genqlient
type __AddLikeInput struct {
	InstanceId uuid.UUID `json:"instanceId"`
}

// GetInstanceId returns __AddLikeInput.InstanceId, and is useful for accessing the field via an interface.
func (v *__AddLikeInput) GetInstanceId() uuid.UUID { return v.InstanceId }

// __AddMessageInput is used internally by genqlient
type __AddMessageInput struct {
	Input MessageInput `json:"input"`
}

// GetInput returns __AddMessageInput.Input, and is useful for accessing the field via an interface.
func (v *__AddMessageInput) GetInput() MessageInput { return v.Input }

// __AddRoleInput is used internally by genqlient
type __AddRoleInput struct {
	AuthorId uuid.UUID `json:"authorId"`
	Role     Role      `json:"role"`
}

// GetAuthorId returns __AddRoleInput.AuthorId, and is useful for accessing the field via an interface.
func (v *__AddRoleInput) GetAuthorId() uuid.UUID { return v.AuthorId }

// GetRole returns __AddRoleInput.Role, and is useful for accessing the field via an interface.
func (v *__AddRoleInput) GetRole() Role { return v.Role }

// __ChannelInput is used internally by genqlient
type __ChannelInput struct {
	Id             uuid.UUID `json:"id"`
	MessagesLast   int       `json:"messagesLast"`
	MessagesBefore string    `json:"messagesBefore"`
}

// GetId returns __ChannelInput.Id, and is useful for accessing the field via an interface.
func (v *__ChannelInput) GetId() uuid.UUID { return v.Id }

// GetMessagesLast returns __ChannelInput.MessagesLast, and is useful for accessing the field via an interface.
func (v *__ChannelInput) GetMessagesLast() int { return v.MessagesLast }

// GetMessagesBefore returns __ChannelInput.MessagesBefore, and is useful for accessing the field via an interface.
func (v *__ChannelInput) GetMessagesBefore() string { return v.MessagesBefore }

// __CheckInviteInput is used internally by genqlient
type __CheckInviteInput struct {
	Code           string `json:"code"`
	ChannelsFirst  int    `json:"channelsFirst"`
	ChannelsAfter  string `json:"channelsAfter"`
	LikesFirst     int    `json:"likesFirst"`
	LikesAfter     string `json:"likesAfter"`
	AuthorsFirst   int    `json:"authorsFirst"`
	AuthorsAfter   string `json:"authorsAfter"`
	AuthorsRoles   []Role `json:"authorsRoles"`
	MessagesLast   int    `json:"messagesLast"`
	MessagesBefore string `json:"messagesBefore"`
}

// GetCode returns __CheckInviteInput.Code, and is useful for accessing the field via an interface.
func (v *__CheckInviteInput) GetCode() string { return v.Code }

// GetChannelsFirst returns __CheckInviteInput.ChannelsFirst, and is useful for accessing the field via an interface.
func (v *__CheckInviteInput) GetChannelsFirst() int { return v.ChannelsFirst }

// GetChannelsAfter returns __CheckInviteInput.ChannelsAfter, and is useful for accessing the field via an interface.
func (v *__CheckInviteInput) GetChannelsAfter() string { return v.ChannelsAfter }

// GetLikesFirst returns __CheckInviteInput.LikesFirst, and is useful for accessing the field via an interface.
func (v *__CheckInviteInput) GetLikesFirst() int { return v.LikesFirst }

// GetLikesAfter returns __CheckInviteInput.LikesAfter, and is useful for accessing the field via an interface.
func (v *__CheckInviteInput) GetLikesAfter() string { return v.LikesAfter }

// GetAuthorsFirst returns __CheckInviteInput.AuthorsFirst, and is useful for accessing the field via an interface.
func (v *__CheckInviteInput) GetAuthorsFirst() int { return v.AuthorsFirst }

// GetAuthorsAfter returns __CheckInviteInput.AuthorsAfter, and is useful for accessing the field via an interface.
func (v *__CheckInviteInput) GetAuthorsAfter() string { return v.AuthorsAfter }

// GetAuthorsRoles returns __CheckInviteInput.AuthorsRoles, and is useful for accessing the field via an interface.
func (v *__CheckInviteInput) GetAuthorsRoles() []Role { return v.AuthorsRoles }

// GetMessagesLast returns __CheckInviteInput.MessagesLast, and is useful for accessing the field via an interface.
func (v *__CheckInviteInput) GetMessagesLast() int { return v.MessagesLast }

// GetMessagesBefore returns __CheckInviteInput.MessagesBefore, and is useful for accessing the field via an interface.
func (v *__CheckInviteInput) GetMessagesBefore() string { return v.MessagesBefore }

// __InstanceInput is used internally by genqlient
type __InstanceInput struct {
	Id             uuid.UUID `json:"id"`
	ChannelsFirst  int       `json:"channelsFirst"`
	ChannelsAfter  string    `json:"channelsAfter"`
	LikesFirst     int       `json:"likesFirst"`
	LikesAfter     string    `json:"likesAfter"`
	AuthorsFirst   int       `json:"authorsFirst"`
	AuthorsAfter   string    `json:"authorsAfter"`
	AuthorsRoles   []Role    `json:"authorsRoles"`
	MessagesLast   int       `json:"messagesLast"`
	MessagesBefore string    `json:"messagesBefore"`
}

// GetId returns __InstanceInput.Id, and is useful for accessing the field via an interface.
func (v *__InstanceInput) GetId() uuid.UUID { return v.Id }

// GetChannelsFirst returns __InstanceInput.ChannelsFirst, and is useful for accessing the field via an interface.
func (v *__InstanceInput) GetChannelsFirst() int { return v.ChannelsFirst }

// GetChannelsAfter returns __InstanceInput.ChannelsAfter, and is useful for accessing the field via an interface.
func (v *__InstanceInput) GetChannelsAfter() string { return v.ChannelsAfter }

// GetLikesFirst returns __InstanceInput.LikesFirst, and is useful for accessing the field via an interface.
func (v *__InstanceInput) GetLikesFirst() int { return v.LikesFirst }

// GetLikesAfter returns __InstanceInput.LikesAfter, and is useful for accessing the field via an interface.
func (v *__InstanceInput) GetLikesAfter() string { return v.LikesAfter }

// GetAuthorsFirst returns __InstanceInput.AuthorsFirst, and is useful for accessing the field via an interface.
func (v *__InstanceInput) GetAuthorsFirst() int { return v.AuthorsFirst }

// GetAuthorsAfter returns __InstanceInput.AuthorsAfter, and is useful for accessing the field via an interface.
func (v *__InstanceInput) GetAuthorsAfter() string { return v.AuthorsAfter }

// GetAuthorsRoles returns __InstanceInput.AuthorsRoles, and is useful for accessing the field via an interface.
func (v *__InstanceInput) GetAuthorsRoles() []Role { return v.AuthorsRoles }

// GetMessagesLast returns __InstanceInput.MessagesLast, and is useful for accessing the field via an interface.
func (v *__InstanceInput) GetMessagesLast() int { return v.MessagesLast }

// GetMessagesBefore returns __InstanceInput.MessagesBefore, and is useful for accessing the field via an interface.
func (v *__InstanceInput) GetMessagesBefore() string { return v.MessagesBefore }

// __InstanceUserListByIdsInput is used internally by genqlient
type __InstanceUserListByIdsInput struct {
	InstanceId      uuid.UUID   `json:"instanceId"`
	InstanceUserIds []uuid.UUID `json:"instanceUserIds"`
}

// GetInstanceId returns __InstanceUserListByIdsInput.InstanceId, and is useful for accessing the field via an interface.
func (v *__InstanceUserListByIdsInput) GetInstanceId() uuid.UUID { return v.InstanceId }

// GetInstanceUserIds returns __InstanceUserListByIdsInput.InstanceUserIds, and is useful for accessing the field via an interface.
func (v *__InstanceUserListByIdsInput) GetInstanceUserIds() []uuid.UUID { return v.InstanceUserIds }

// __InviteInput is used internally by genqlient
type __InviteInput struct {
	InstanceId uuid.UUID `json:"instanceId"`
}

// GetInstanceId returns __InviteInput.InstanceId, and is useful for accessing the field via an interface.
func (v *__InviteInput) GetInstanceId() uuid.UUID { return v.InstanceId }

// __PinInstanceInput is used internally by genqlient
type __PinInstanceInput struct {
	Input          InstancePinInput `json:"input"`
	InstanceId     uuid.UUID        `json:"instanceId"`
	ChannelsFirst  int              `json:"channelsFirst"`
	ChannelsAfter  string           `json:"channelsAfter"`
	LikesFirst     int              `json:"likesFirst"`
	LikesAfter     string           `json:"likesAfter"`
	AuthorsFirst   int              `json:"authorsFirst"`
	AuthorsAfter   string           `json:"authorsAfter"`
	AuthorsRoles   []Role           `json:"authorsRoles"`
	MessagesLast   int              `json:"messagesLast"`
	MessagesBefore string           `json:"messagesBefore"`
}

// GetInput returns __PinInstanceInput.Input, and is useful for accessing the field via an interface.
func (v *__PinInstanceInput) GetInput() InstancePinInput { return v.Input }

// GetInstanceId returns __PinInstanceInput.InstanceId, and is useful for accessing the field via an interface.
func (v *__PinInstanceInput) GetInstanceId() uuid.UUID { return v.InstanceId }

// GetChannelsFirst returns __PinInstanceInput.ChannelsFirst, and is useful for accessing the field via an interface.
func (v *__PinInstanceInput) GetChannelsFirst() int { return v.ChannelsFirst }

// GetChannelsAfter returns __PinInstanceInput.ChannelsAfter, and is useful for accessing the field via an interface.
func (v *__PinInstanceInput) GetChannelsAfter() string { return v.ChannelsAfter }

// GetLikesFirst returns __PinInstanceInput.LikesFirst, and is useful for accessing the field via an interface.
func (v *__PinInstanceInput) GetLikesFirst() int { return v.LikesFirst }

// GetLikesAfter returns __PinInstanceInput.LikesAfter, and is useful for accessing the field via an interface.
func (v *__PinInstanceInput) GetLikesAfter() string { return v.LikesAfter }

// GetAuthorsFirst returns __PinInstanceInput.AuthorsFirst, and is useful for accessing the field via an interface.
func (v *__PinInstanceInput) GetAuthorsFirst() int { return v.AuthorsFirst }

// GetAuthorsAfter returns __PinInstanceInput.AuthorsAfter, and is useful for accessing the field via an interface.
func (v *__PinInstanceInput) GetAuthorsAfter() string { return v.AuthorsAfter }

// GetAuthorsRoles returns __PinInstanceInput.AuthorsRoles, and is useful for accessing the field via an interface.
func (v *__PinInstanceInput) GetAuthorsRoles() []Role { return v.AuthorsRoles }

// GetMessagesLast returns __PinInstanceInput.MessagesLast, and is useful for accessing the field via an interface.
func (v *__PinInstanceInput) GetMessagesLast() int { return v.MessagesLast }

// GetMessagesBefore returns __PinInstanceInput.MessagesBefore, and is useful for accessing the field via an interface.
func (v *__PinInstanceInput) GetMessagesBefore() string { return v.MessagesBefore }

// __RedeemInviteInput is used internally by genqlient
type __RedeemInviteInput struct {
	Code string `json:"code"`
}

// GetCode returns __RedeemInviteInput.Code, and is useful for accessing the field via an interface.
func (v *__RedeemInviteInput) GetCode() string { return v.Code }

// __RemoveChannelInput is used internally by genqlient
type __RemoveChannelInput struct {
	ChannelId      uuid.UUID `json:"channelId"`
	MessagesLast   int       `json:"messagesLast"`
	MessagesBefore string    `json:"messagesBefore"`
}

// GetChannelId returns __RemoveChannelInput.ChannelId, and is useful for accessing the field via an interface.
func (v *__RemoveChannelInput) GetChannelId() uuid.UUID { return v.ChannelId }

// GetMessagesLast returns __RemoveChannelInput.MessagesLast, and is useful for accessing the field via an interface.
func (v *__RemoveChannelInput) GetMessagesLast() int { return v.MessagesLast }

// GetMessagesBefore returns __RemoveChannelInput.MessagesBefore, and is useful for accessing the field via an interface.
func (v *__RemoveChannelInput) GetMessagesBefore() string { return v.MessagesBefore }

// __RemoveInstanceInput is used internally by genqlient
type __RemoveInstanceInput struct {
	InstanceId     uuid.UUID `json:"instanceId"`
	ChannelsFirst  int       `json:"channelsFirst"`
	ChannelsAfter  string    `json:"channelsAfter"`
	LikesFirst     int       `json:"likesFirst"`
	LikesAfter     string    `json:"likesAfter"`
	AuthorsFirst   int       `json:"authorsFirst"`
	AuthorsAfter   string    `json:"authorsAfter"`
	AuthorsRoles   []Role    `json:"authorsRoles"`
	MessagesLast   int       `json:"messagesLast"`
	MessagesBefore string    `json:"messagesBefore"`
}

// GetInstanceId returns __RemoveInstanceInput.InstanceId, and is useful for accessing the field via an interface.
func (v *__RemoveInstanceInput) GetInstanceId() uuid.UUID { return v.InstanceId }

// GetChannelsFirst returns __RemoveInstanceInput.ChannelsFirst, and is useful for accessing the field via an interface.
func (v *__RemoveInstanceInput) GetChannelsFirst() int { return v.ChannelsFirst }

// GetChannelsAfter returns __RemoveInstanceInput.ChannelsAfter, and is useful for accessing the field via an interface.
func (v *__RemoveInstanceInput) GetChannelsAfter() string { return v.ChannelsAfter }

// GetLikesFirst returns __RemoveInstanceInput.LikesFirst, and is useful for accessing the field via an interface.
func (v *__RemoveInstanceInput) GetLikesFirst() int { return v.LikesFirst }

// GetLikesAfter returns __RemoveInstanceInput.LikesAfter, and is useful for accessing the field via an interface.
func (v *__RemoveInstanceInput) GetLikesAfter() string { return v.LikesAfter }

// GetAuthorsFirst returns __RemoveInstanceInput.AuthorsFirst, and is useful for accessing the field via an interface.
func (v *__RemoveInstanceInput) GetAuthorsFirst() int { return v.AuthorsFirst }

// GetAuthorsAfter returns __RemoveInstanceInput.AuthorsAfter, and is useful for accessing the field via an interface.
func (v *__RemoveInstanceInput) GetAuthorsAfter() string { return v.AuthorsAfter }

// GetAuthorsRoles returns __RemoveInstanceInput.AuthorsRoles, and is useful for accessing the field via an interface.
func (v *__RemoveInstanceInput) GetAuthorsRoles() []Role { return v.AuthorsRoles }

// GetMessagesLast returns __RemoveInstanceInput.MessagesLast, and is useful for accessing the field via an interface.
func (v *__RemoveInstanceInput) GetMessagesLast() int { return v.MessagesLast }

// GetMessagesBefore returns __RemoveInstanceInput.MessagesBefore, and is useful for accessing the field via an interface.
func (v *__RemoveInstanceInput) GetMessagesBefore() string { return v.MessagesBefore }

// __RemoveLikeInput is used internally by genqlient
type __RemoveLikeInput struct {
	InstanceId uuid.UUID `json:"instanceId"`
}

// GetInstanceId returns __RemoveLikeInput.InstanceId, and is useful for accessing the field via an interface.
func (v *__RemoveLikeInput) GetInstanceId() uuid.UUID { return v.InstanceId }

// __RemoveMessageInput is used internally by genqlient
type __RemoveMessageInput struct {
	MessageId uuid.UUID `json:"messageId"`
}

// GetMessageId returns __RemoveMessageInput.MessageId, and is useful for accessing the field via an interface.
func (v *__RemoveMessageInput) GetMessageId() uuid.UUID { return v.MessageId }

// __RemoveRoleInput is used internally by genqlient
type __RemoveRoleInput struct {
	AuthorId uuid.UUID `json:"authorId"`
	Role     Role      `json:"role"`
}

// GetAuthorId returns __RemoveRoleInput.AuthorId, and is useful for accessing the field via an interface.
func (v *__RemoveRoleInput) GetAuthorId() uuid.UUID { return v.AuthorId }

// GetRole returns __RemoveRoleInput.Role, and is useful for accessing the field via an interface.
func (v *__RemoveRoleInput) GetRole() Role { return v.Role }

// __ReorderChannelInput is used internally by genqlient
type __ReorderChannelInput struct {
	Input          ChannelReorderInput `json:"input"`
	ChannelId      uuid.UUID           `json:"channelId"`
	MessagesLast   int                 `json:"messagesLast"`
	MessagesBefore string              `json:"messagesBefore"`
}

// GetInput returns __ReorderChannelInput.Input, and is useful for accessing the field via an interface.
func (v *__ReorderChannelInput) GetInput() ChannelReorderInput { return v.Input }

// GetChannelId returns __ReorderChannelInput.ChannelId, and is useful for accessing the field via an interface.
func (v *__ReorderChannelInput) GetChannelId() uuid.UUID { return v.ChannelId }

// GetMessagesLast returns __ReorderChannelInput.MessagesLast, and is useful for accessing the field via an interface.
func (v *__ReorderChannelInput) GetMessagesLast() int { return v.MessagesLast }

// GetMessagesBefore returns __ReorderChannelInput.MessagesBefore, and is useful for accessing the field via an interface.
func (v *__ReorderChannelInput) GetMessagesBefore() string { return v.MessagesBefore }

// __ReorderInstanceInput is used internally by genqlient
type __ReorderInstanceInput struct {
	Input          InstanceReorderInput `json:"input"`
	InstanceId     uuid.UUID            `json:"instanceId"`
	ChannelsFirst  int                  `json:"channelsFirst"`
	ChannelsAfter  string               `json:"channelsAfter"`
	LikesFirst     int                  `json:"likesFirst"`
	LikesAfter     string               `json:"likesAfter"`
	AuthorsFirst   int                  `json:"authorsFirst"`
	AuthorsAfter   string               `json:"authorsAfter"`
	AuthorsRoles   []Role               `json:"authorsRoles"`
	MessagesLast   int                  `json:"messagesLast"`
	MessagesBefore string               `json:"messagesBefore"`
}

// GetInput returns __ReorderInstanceInput.Input, and is useful for accessing the field via an interface.
func (v *__ReorderInstanceInput) GetInput() InstanceReorderInput { return v.Input }

// GetInstanceId returns __ReorderInstanceInput.InstanceId, and is useful for accessing the field via an interface.
func (v *__ReorderInstanceInput) GetInstanceId() uuid.UUID { return v.InstanceId }

// GetChannelsFirst returns __ReorderInstanceInput.ChannelsFirst, and is useful for accessing the field via an interface.
func (v *__ReorderInstanceInput) GetChannelsFirst() int { return v.ChannelsFirst }

// GetChannelsAfter returns __ReorderInstanceInput.ChannelsAfter, and is useful for accessing the field via an interface.
func (v *__ReorderInstanceInput) GetChannelsAfter() string { return v.ChannelsAfter }

// GetLikesFirst returns __ReorderInstanceInput.LikesFirst, and is useful for accessing the field via an interface.
func (v *__ReorderInstanceInput) GetLikesFirst() int { return v.LikesFirst }

// GetLikesAfter returns __ReorderInstanceInput.LikesAfter, and is useful for accessing the field via an interface.
func (v *__ReorderInstanceInput) GetLikesAfter() string { return v.LikesAfter }

// GetAuthorsFirst returns __ReorderInstanceInput.AuthorsFirst, and is useful for accessing the field via an interface.
func (v *__ReorderInstanceInput) GetAuthorsFirst() int { return v.AuthorsFirst }

// GetAuthorsAfter returns __ReorderInstanceInput.AuthorsAfter, and is useful for accessing the field via an interface.
func (v *__ReorderInstanceInput) GetAuthorsAfter() string { return v.AuthorsAfter }

// GetAuthorsRoles returns __ReorderInstanceInput.AuthorsRoles, and is useful for accessing the field via an interface.
func (v *__ReorderInstanceInput) GetAuthorsRoles() []Role { return v.AuthorsRoles }

// GetMessagesLast returns __ReorderInstanceInput.MessagesLast, and is useful for accessing the field via an interface.
func (v *__ReorderInstanceInput) GetMessagesLast() int { return v.MessagesLast }

// GetMessagesBefore returns __ReorderInstanceInput.MessagesBefore, and is useful for accessing the field via an interface.
func (v *__ReorderInstanceInput) GetMessagesBefore() string { return v.MessagesBefore }

// __UpdateChannelInput is used internally by genqlient
type __UpdateChannelInput struct {
	Input          ChannelInput `json:"input"`
	ChannelId      uuid.UUID    `json:"channelId"`
	MessagesLast   int          `json:"messagesLast"`
	MessagesBefore string       `json:"messagesBefore"`
}

// GetInput returns __UpdateChannelInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateChannelInput) GetInput() ChannelInput { return v.Input }

// GetChannelId returns __UpdateChannelInput.ChannelId, and is useful for accessing the field via an interface.
func (v *__UpdateChannelInput) GetChannelId() uuid.UUID { return v.ChannelId }

// GetMessagesLast returns __UpdateChannelInput.MessagesLast, and is useful for accessing the field via an interface.
func (v *__UpdateChannelInput) GetMessagesLast() int { return v.MessagesLast }

// GetMessagesBefore returns __UpdateChannelInput.MessagesBefore, and is useful for accessing the field via an interface.
func (v *__UpdateChannelInput) GetMessagesBefore() string { return v.MessagesBefore }

// __UpdateInstanceInput is used internally by genqlient
type __UpdateInstanceInput struct {
	InstanceId     uuid.UUID     `json:"instanceId"`
	Input          InstanceInput `json:"input"`
	ChannelsFirst  int           `json:"channelsFirst"`
	ChannelsAfter  string        `json:"channelsAfter"`
	LikesFirst     int           `json:"likesFirst"`
	LikesAfter     string        `json:"likesAfter"`
	AuthorsFirst   int           `json:"authorsFirst"`
	AuthorsAfter   string        `json:"authorsAfter"`
	AuthorsRoles   []Role        `json:"authorsRoles"`
	MessagesLast   int           `json:"messagesLast"`
	MessagesBefore string        `json:"messagesBefore"`
}

// GetInstanceId returns __UpdateInstanceInput.InstanceId, and is useful for accessing the field via an interface.
func (v *__UpdateInstanceInput) GetInstanceId() uuid.UUID { return v.InstanceId }

// GetInput returns __UpdateInstanceInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateInstanceInput) GetInput() InstanceInput { return v.Input }

// GetChannelsFirst returns __UpdateInstanceInput.ChannelsFirst, and is useful for accessing the field via an interface.
func (v *__UpdateInstanceInput) GetChannelsFirst() int { return v.ChannelsFirst }

// GetChannelsAfter returns __UpdateInstanceInput.ChannelsAfter, and is useful for accessing the field via an interface.
func (v *__UpdateInstanceInput) GetChannelsAfter() string { return v.ChannelsAfter }

// GetLikesFirst returns __UpdateInstanceInput.LikesFirst, and is useful for accessing the field via an interface.
func (v *__UpdateInstanceInput) GetLikesFirst() int { return v.LikesFirst }

// GetLikesAfter returns __UpdateInstanceInput.LikesAfter, and is useful for accessing the field via an interface.
func (v *__UpdateInstanceInput) GetLikesAfter() string { return v.LikesAfter }

// GetAuthorsFirst returns __UpdateInstanceInput.AuthorsFirst, and is useful for accessing the field via an interface.
func (v *__UpdateInstanceInput) GetAuthorsFirst() int { return v.AuthorsFirst }

// GetAuthorsAfter returns __UpdateInstanceInput.AuthorsAfter, and is useful for accessing the field via an interface.
func (v *__UpdateInstanceInput) GetAuthorsAfter() string { return v.AuthorsAfter }

// GetAuthorsRoles returns __UpdateInstanceInput.AuthorsRoles, and is useful for accessing the field via an interface.
func (v *__UpdateInstanceInput) GetAuthorsRoles() []Role { return v.AuthorsRoles }

// GetMessagesLast returns __UpdateInstanceInput.MessagesLast, and is useful for accessing the field via an interface.
func (v *__UpdateInstanceInput) GetMessagesLast() int { return v.MessagesLast }

// GetMessagesBefore returns __UpdateInstanceInput.MessagesBefore, and is useful for accessing the field via an interface.
func (v *__UpdateInstanceInput) GetMessagesBefore() string { return v.MessagesBefore }

// __UpdateUserInput is used internally by genqlient
type __UpdateUserInput struct {
	Input               UserInput `json:"input"`
	InstancesFirst      int       `json:"instancesFirst"`
	InstancesAfter      string    `json:"instancesAfter"`
	ChannelsFirst       int       `json:"channelsFirst"`
	ChannelsAfter       string    `json:"channelsAfter"`
	LikesFirst          int       `json:"likesFirst"`
	LikesAfter          string    `json:"likesAfter"`
	AuthorsFirst        int       `json:"authorsFirst"`
	AuthorsAfter        string    `json:"authorsAfter"`
	AuthorsRoles        []Role    `json:"authorsRoles"`
	MessagesLast        int       `json:"messagesLast"`
	MessagesBefore      string    `json:"messagesBefore"`
	NotificationsLast   int       `json:"notificationsLast"`
	NotificationsBefore string    `json:"notificationsBefore"`
}

// GetInput returns __UpdateUserInput.Input, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetInput() UserInput { return v.Input }

// GetInstancesFirst returns __UpdateUserInput.InstancesFirst, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetInstancesFirst() int { return v.InstancesFirst }

// GetInstancesAfter returns __UpdateUserInput.InstancesAfter, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetInstancesAfter() string { return v.InstancesAfter }

// GetChannelsFirst returns __UpdateUserInput.ChannelsFirst, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetChannelsFirst() int { return v.ChannelsFirst }

// GetChannelsAfter returns __UpdateUserInput.ChannelsAfter, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetChannelsAfter() string { return v.ChannelsAfter }

// GetLikesFirst returns __UpdateUserInput.LikesFirst, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetLikesFirst() int { return v.LikesFirst }

// GetLikesAfter returns __UpdateUserInput.LikesAfter, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetLikesAfter() string { return v.LikesAfter }

// GetAuthorsFirst returns __UpdateUserInput.AuthorsFirst, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetAuthorsFirst() int { return v.AuthorsFirst }

// GetAuthorsAfter returns __UpdateUserInput.AuthorsAfter, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetAuthorsAfter() string { return v.AuthorsAfter }

// GetAuthorsRoles returns __UpdateUserInput.AuthorsRoles, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetAuthorsRoles() []Role { return v.AuthorsRoles }

// GetMessagesLast returns __UpdateUserInput.MessagesLast, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetMessagesLast() int { return v.MessagesLast }

// GetMessagesBefore returns __UpdateUserInput.MessagesBefore, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetMessagesBefore() string { return v.MessagesBefore }

// GetNotificationsLast returns __UpdateUserInput.NotificationsLast, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetNotificationsLast() int { return v.NotificationsLast }

// GetNotificationsBefore returns __UpdateUserInput.NotificationsBefore, and is useful for accessing the field via an interface.
func (v *__UpdateUserInput) GetNotificationsBefore() string { return v.NotificationsBefore }

// __UserInput is used internally by genqlient
type __UserInput struct {
	InstancesFirst      int    `json:"instancesFirst"`
	InstancesAfter      string `json:"instancesAfter"`
	ChannelsFirst       int    `json:"channelsFirst"`
	ChannelsAfter       string `json:"channelsAfter"`
	LikesFirst          int    `json:"likesFirst"`
	LikesAfter          string `json:"likesAfter"`
	AuthorsFirst        int    `json:"authorsFirst"`
	AuthorsAfter        string `json:"authorsAfter"`
	AuthorsRoles        []Role `json:"authorsRoles"`
	MessagesLast        int    `json:"messagesLast"`
	MessagesBefore      string `json:"messagesBefore"`
	NotificationsLast   int    `json:"notificationsLast"`
	NotificationsBefore string `json:"notificationsBefore"`
}

// GetInstancesFirst returns __UserInput.InstancesFirst, and is useful for accessing the field via an interface.
func (v *__UserInput) GetInstancesFirst() int { return v.InstancesFirst }

// GetInstancesAfter returns __UserInput.InstancesAfter, and is useful for accessing the field via an interface.
func (v *__UserInput) GetInstancesAfter() string { return v.InstancesAfter }

// GetChannelsFirst returns __UserInput.ChannelsFirst, and is useful for accessing the field via an interface.
func (v *__UserInput) GetChannelsFirst() int { return v.ChannelsFirst }

// GetChannelsAfter returns __UserInput.ChannelsAfter, and is useful for accessing the field via an interface.
func (v *__UserInput) GetChannelsAfter() string { return v.ChannelsAfter }

// GetLikesFirst returns __UserInput.LikesFirst, and is useful for accessing the field via an interface.
func (v *__UserInput) GetLikesFirst() int { return v.LikesFirst }

// GetLikesAfter returns __UserInput.LikesAfter, and is useful for accessing the field via an interface.
func (v *__UserInput) GetLikesAfter() string { return v.LikesAfter }

// GetAuthorsFirst returns __UserInput.AuthorsFirst, and is useful for accessing the field via an interface.
func (v *__UserInput) GetAuthorsFirst() int { return v.AuthorsFirst }

// GetAuthorsAfter returns __UserInput.AuthorsAfter, and is useful for accessing the field via an interface.
func (v *__UserInput) GetAuthorsAfter() string { return v.AuthorsAfter }

// GetAuthorsRoles returns __UserInput.AuthorsRoles, and is useful for accessing the field via an interface.
func (v *__UserInput) GetAuthorsRoles() []Role { return v.AuthorsRoles }

// GetMessagesLast returns __UserInput.MessagesLast, and is useful for accessing the field via an interface.
func (v *__UserInput) GetMessagesLast() int { return v.MessagesLast }

// GetMessagesBefore returns __UserInput.MessagesBefore, and is useful for accessing the field via an interface.
func (v *__UserInput) GetMessagesBefore() string { return v.MessagesBefore }

// GetNotificationsLast returns __UserInput.NotificationsLast, and is useful for accessing the field via an interface.
func (v *__UserInput) GetNotificationsLast() int { return v.NotificationsLast }

// GetNotificationsBefore returns __UserInput.NotificationsBefore, and is useful for accessing the field via an interface.
func (v *__UserInput) GetNotificationsBefore() string { return v.NotificationsBefore }

func AddChannel(
	ctx context.Context,
	client graphql.Client,
	input ChannelInput,
	messagesLast int,
	messagesBefore string,
) (*AddChannelResponse, error) {
	req := &graphql.Request{
		OpName: "AddChannel",
		Query: `
mutation AddChannel ($input: ChannelInput!, $messagesLast: Int!, $messagesBefore: String!) {
	addChannel(input: $input) {
		... InstanceChannelsEdgeFragment
	}
}
fragment InstanceChannelsEdgeFragment on InstanceChannelsEdge {
	cursor
	node {
		... ChannelFragment
	}
}
fragment ChannelFragment on Channel {
	id
	name
	rank
	instanceId
	readers
	publishers
	createdAt
	updatedAt
	lastMessageAddedAt
	messageCount
	isCategory
	isComments
	messagesConnection(last: $messagesLast, before: $messagesBefore) {
		edges {
			... ChannelMessagesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment ChannelMessagesEdgeFragment on ChannelMessagesEdge {
	cursor
	node {
		... MessageFragment
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	hasPreviousPage
}
fragment MessageFragment on Message {
	id
	author {
		... AuthorFragment
	}
	text
	createdAt
	channelId
	repliedMessage {
		id
		text
		createdAt
		channelId
		imageUrls
	}
	imageUrls
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
`,
		Variables: &__AddChannelInput{
			Input:          input,
			MessagesLast:   messagesLast,
			MessagesBefore: messagesBefore,
		},
	}
	var err error

	var data AddChannelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func AddInstance(
	ctx context.Context,
	client graphql.Client,
	input InstanceInput,
	channelsFirst int,
	channelsAfter string,
	likesFirst int,
	likesAfter string,
	authorsFirst int,
	authorsAfter string,
	authorsRoles []Role,
	messagesLast int,
	messagesBefore string,
) (*AddInstanceResponse, error) {
	req := &graphql.Request{
		OpName: "AddInstance",
		Query: `
mutation AddInstance ($input: InstanceInput!, $channelsFirst: Int!, $channelsAfter: String!, $likesFirst: Int!, $likesAfter: String!, $authorsFirst: Int!, $authorsAfter: String!, $authorsRoles: [Role!] = [], $messagesLast: Int!, $messagesBefore: String!) {
	addInstance(input: $input) {
		... UserInstancesEdgeFragment
	}
}
fragment UserInstancesEdgeFragment on UserInstancesEdge {
	cursor
	node {
		... InstanceFragment
	}
	instanceUser {
		... AuthorFragment
	}
	rank
	pinned
	likedByMe
}
fragment InstanceFragment on Instance {
	id
	name
	author {
		... AuthorFragment
	}
	readAccess
	icon
	createdAt
	description
	showAuthor
	showChat
	showLikes
	showComments
	likesCount
	commentsCount
	likesConnection(first: $likesFirst, after: $likesAfter) {
		edges {
			... InstanceLikesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	channelsConnection(first: $channelsFirst, after: $channelsAfter) {
		edges {
			... InstanceChannelsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	authorsConnection(first: $authorsFirst, after: $authorsAfter, roles: $authorsRoles) {
		edges {
			... InstanceAuthorsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
fragment InstanceLikesEdgeFragment on InstanceLikesEdge {
	cursor
	likedAt
	node {
		... AuthorFragment
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	hasPreviousPage
}
fragment InstanceChannelsEdgeFragment on InstanceChannelsEdge {
	cursor
	node {
		... ChannelFragment
	}
}
fragment InstanceAuthorsEdgeFragment on InstanceAuthorsEdge {
	cursor
	node {
		... AuthorFragment
	}
}
fragment ChannelFragment on Channel {
	id
	name
	rank
	instanceId
	readers
	publishers
	createdAt
	updatedAt
	lastMessageAddedAt
	messageCount
	isCategory
	isComments
	messagesConnection(last: $messagesLast, before: $messagesBefore) {
		edges {
			... ChannelMessagesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment ChannelMessagesEdgeFragment on ChannelMessagesEdge {
	cursor
	node {
		... MessageFragment
	}
}
fragment MessageFragment on Message {
	id
	author {
		... AuthorFragment
	}
	text
	createdAt
	channelId
	repliedMessage {
		id
		text
		createdAt
		channelId
		imageUrls
	}
	imageUrls
}
`,
		Variables: &__AddInstanceInput{
			Input:          input,
			ChannelsFirst:  channelsFirst,
			ChannelsAfter:  channelsAfter,
			LikesFirst:     likesFirst,
			LikesAfter:     likesAfter,
			AuthorsFirst:   authorsFirst,
			AuthorsAfter:   authorsAfter,
			AuthorsRoles:   authorsRoles,
			MessagesLast:   messagesLast,
			MessagesBefore: messagesBefore,
		},
	}
	var err error

	var data AddInstanceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func AddInvite(
	ctx context.Context,
	client graphql.Client,
	input InviteInput,
) (*AddInviteResponse, error) {
	req := &graphql.Request{
		OpName: "AddInvite",
		Query: `
mutation AddInvite ($input: InviteInput!) {
	addInvite(input: $input) {
		... InviteFragment
	}
}
fragment InviteFragment on Invite {
	id
	instanceId
	code
	createdAt
	expiresAt
	redemptions
	author {
		... AuthorFragment
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
`,
		Variables: &__AddInviteInput{
			Input: input,
		},
	}
	var err error

	var data AddInviteResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func AddLike(
	ctx context.Context,
	client graphql.Client,
	instanceId uuid.UUID,
) (*AddLikeResponse, error) {
	req := &graphql.Request{
		OpName: "AddLike",
		Query: `
mutation AddLike ($instanceId: Uuid!) {
	addLike(instanceId: $instanceId) {
		... InstanceLikesEdgeFragment
	}
}
fragment InstanceLikesEdgeFragment on InstanceLikesEdge {
	cursor
	likedAt
	node {
		... AuthorFragment
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
`,
		Variables: &__AddLikeInput{
			InstanceId: instanceId,
		},
	}
	var err error

	var data AddLikeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func AddMessage(
	ctx context.Context,
	client graphql.Client,
	input MessageInput,
) (*AddMessageResponse, error) {
	req := &graphql.Request{
		OpName: "AddMessage",
		Query: `
mutation AddMessage ($input: MessageInput!) {
	addMessage(input: $input) {
		... ChannelMessagesEdgeFragment
	}
}
fragment ChannelMessagesEdgeFragment on ChannelMessagesEdge {
	cursor
	node {
		... MessageFragment
	}
}
fragment MessageFragment on Message {
	id
	author {
		... AuthorFragment
	}
	text
	createdAt
	channelId
	repliedMessage {
		id
		text
		createdAt
		channelId
		imageUrls
	}
	imageUrls
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
`,
		Variables: &__AddMessageInput{
			Input: input,
		},
	}
	var err error

	var data AddMessageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func AddRole(
	ctx context.Context,
	client graphql.Client,
	authorId uuid.UUID,
	role Role,
) (*AddRoleResponse, error) {
	req := &graphql.Request{
		OpName: "AddRole",
		Query: `
mutation AddRole ($authorId: Uuid!, $role: Role!) {
	addRole(authorId: $authorId, role: $role) {
		... AuthorFragment
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
`,
		Variables: &__AddRoleInput{
			AuthorId: authorId,
			Role:     role,
		},
	}
	var err error

	var data AddRoleResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Channel(
	ctx context.Context,
	client graphql.Client,
	id uuid.UUID,
	messagesLast int,
	messagesBefore string,
) (*ChannelResponse, error) {
	req := &graphql.Request{
		OpName: "Channel",
		Query: `
query Channel ($id: Uuid!, $messagesLast: Int!, $messagesBefore: String!) {
	channel(id: $id) {
		... ChannelFragment
	}
}
fragment ChannelFragment on Channel {
	id
	name
	rank
	instanceId
	readers
	publishers
	createdAt
	updatedAt
	lastMessageAddedAt
	messageCount
	isCategory
	isComments
	messagesConnection(last: $messagesLast, before: $messagesBefore) {
		edges {
			... ChannelMessagesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment ChannelMessagesEdgeFragment on ChannelMessagesEdge {
	cursor
	node {
		... MessageFragment
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	hasPreviousPage
}
fragment MessageFragment on Message {
	id
	author {
		... AuthorFragment
	}
	text
	createdAt
	channelId
	repliedMessage {
		id
		text
		createdAt
		channelId
		imageUrls
	}
	imageUrls
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
`,
		Variables: &__ChannelInput{
			Id:             id,
			MessagesLast:   messagesLast,
			MessagesBefore: messagesBefore,
		},
	}
	var err error

	var data ChannelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CheckInvite(
	ctx context.Context,
	client graphql.Client,
	code string,
	channelsFirst int,
	channelsAfter string,
	likesFirst int,
	likesAfter string,
	authorsFirst int,
	authorsAfter string,
	authorsRoles []Role,
	messagesLast int,
	messagesBefore string,
) (*CheckInviteResponse, error) {
	req := &graphql.Request{
		OpName: "CheckInvite",
		Query: `
query CheckInvite ($code: String!, $channelsFirst: Int!, $channelsAfter: String!, $likesFirst: Int!, $likesAfter: String!, $authorsFirst: Int!, $authorsAfter: String!, $authorsRoles: [Role!]!, $messagesLast: Int!, $messagesBefore: String!) {
	checkInvite(code: $code) {
		instance {
			... InstanceFragment
		}
		... InviteFragment
	}
}
fragment InstanceFragment on Instance {
	id
	name
	author {
		... AuthorFragment
	}
	readAccess
	icon
	createdAt
	description
	showAuthor
	showChat
	showLikes
	showComments
	likesCount
	commentsCount
	likesConnection(first: $likesFirst, after: $likesAfter) {
		edges {
			... InstanceLikesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	channelsConnection(first: $channelsFirst, after: $channelsAfter) {
		edges {
			... InstanceChannelsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	authorsConnection(first: $authorsFirst, after: $authorsAfter, roles: $authorsRoles) {
		edges {
			... InstanceAuthorsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment InviteFragment on Invite {
	id
	instanceId
	code
	createdAt
	expiresAt
	redemptions
	author {
		... AuthorFragment
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
fragment InstanceLikesEdgeFragment on InstanceLikesEdge {
	cursor
	likedAt
	node {
		... AuthorFragment
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	hasPreviousPage
}
fragment InstanceChannelsEdgeFragment on InstanceChannelsEdge {
	cursor
	node {
		... ChannelFragment
	}
}
fragment InstanceAuthorsEdgeFragment on InstanceAuthorsEdge {
	cursor
	node {
		... AuthorFragment
	}
}
fragment ChannelFragment on Channel {
	id
	name
	rank
	instanceId
	readers
	publishers
	createdAt
	updatedAt
	lastMessageAddedAt
	messageCount
	isCategory
	isComments
	messagesConnection(last: $messagesLast, before: $messagesBefore) {
		edges {
			... ChannelMessagesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment ChannelMessagesEdgeFragment on ChannelMessagesEdge {
	cursor
	node {
		... MessageFragment
	}
}
fragment MessageFragment on Message {
	id
	author {
		... AuthorFragment
	}
	text
	createdAt
	channelId
	repliedMessage {
		id
		text
		createdAt
		channelId
		imageUrls
	}
	imageUrls
}
`,
		Variables: &__CheckInviteInput{
			Code:           code,
			ChannelsFirst:  channelsFirst,
			ChannelsAfter:  channelsAfter,
			LikesFirst:     likesFirst,
			LikesAfter:     likesAfter,
			AuthorsFirst:   authorsFirst,
			AuthorsAfter:   authorsAfter,
			AuthorsRoles:   authorsRoles,
			MessagesLast:   messagesLast,
			MessagesBefore: messagesBefore,
		},
	}
	var err error

	var data CheckInviteResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Instance(
	ctx context.Context,
	client graphql.Client,
	id uuid.UUID,
	channelsFirst int,
	channelsAfter string,
	likesFirst int,
	likesAfter string,
	authorsFirst int,
	authorsAfter string,
	authorsRoles []Role,
	messagesLast int,
	messagesBefore string,
) (*InstanceResponse, error) {
	req := &graphql.Request{
		OpName: "Instance",
		Query: `
query Instance ($id: Uuid!, $channelsFirst: Int!, $channelsAfter: String!, $likesFirst: Int!, $likesAfter: String!, $authorsFirst: Int!, $authorsAfter: String!, $authorsRoles: [Role!]!, $messagesLast: Int!, $messagesBefore: String!) {
	instance(id: $id) {
		... UserInstancesEdgeFragment
	}
}
fragment UserInstancesEdgeFragment on UserInstancesEdge {
	cursor
	node {
		... InstanceFragment
	}
	instanceUser {
		... AuthorFragment
	}
	rank
	pinned
	likedByMe
}
fragment InstanceFragment on Instance {
	id
	name
	author {
		... AuthorFragment
	}
	readAccess
	icon
	createdAt
	description
	showAuthor
	showChat
	showLikes
	showComments
	likesCount
	commentsCount
	likesConnection(first: $likesFirst, after: $likesAfter) {
		edges {
			... InstanceLikesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	channelsConnection(first: $channelsFirst, after: $channelsAfter) {
		edges {
			... InstanceChannelsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	authorsConnection(first: $authorsFirst, after: $authorsAfter, roles: $authorsRoles) {
		edges {
			... InstanceAuthorsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
fragment InstanceLikesEdgeFragment on InstanceLikesEdge {
	cursor
	likedAt
	node {
		... AuthorFragment
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	hasPreviousPage
}
fragment InstanceChannelsEdgeFragment on InstanceChannelsEdge {
	cursor
	node {
		... ChannelFragment
	}
}
fragment InstanceAuthorsEdgeFragment on InstanceAuthorsEdge {
	cursor
	node {
		... AuthorFragment
	}
}
fragment ChannelFragment on Channel {
	id
	name
	rank
	instanceId
	readers
	publishers
	createdAt
	updatedAt
	lastMessageAddedAt
	messageCount
	isCategory
	isComments
	messagesConnection(last: $messagesLast, before: $messagesBefore) {
		edges {
			... ChannelMessagesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment ChannelMessagesEdgeFragment on ChannelMessagesEdge {
	cursor
	node {
		... MessageFragment
	}
}
fragment MessageFragment on Message {
	id
	author {
		... AuthorFragment
	}
	text
	createdAt
	channelId
	repliedMessage {
		id
		text
		createdAt
		channelId
		imageUrls
	}
	imageUrls
}
`,
		Variables: &__InstanceInput{
			Id:             id,
			ChannelsFirst:  channelsFirst,
			ChannelsAfter:  channelsAfter,
			LikesFirst:     likesFirst,
			LikesAfter:     likesAfter,
			AuthorsFirst:   authorsFirst,
			AuthorsAfter:   authorsAfter,
			AuthorsRoles:   authorsRoles,
			MessagesLast:   messagesLast,
			MessagesBefore: messagesBefore,
		},
	}
	var err error

	var data InstanceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func InstanceUserListByIds(
	ctx context.Context,
	client graphql.Client,
	instanceId uuid.UUID,
	instanceUserIds []uuid.UUID,
) (*InstanceUserListByIdsResponse, error) {
	req := &graphql.Request{
		OpName: "InstanceUserListByIds",
		Query: `
query InstanceUserListByIds ($instanceId: Uuid!, $instanceUserIds: [Uuid!]!) {
	instanceUserListByIds(instanceId: $instanceId, instanceUserIds: $instanceUserIds) {
		... AuthorFragment
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
`,
		Variables: &__InstanceUserListByIdsInput{
			InstanceId:      instanceId,
			InstanceUserIds: instanceUserIds,
		},
	}
	var err error

	var data InstanceUserListByIdsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func Invite(
	ctx context.Context,
	client graphql.Client,
	instanceId uuid.UUID,
) (*InviteResponse, error) {
	req := &graphql.Request{
		OpName: "Invite",
		Query: `
query Invite ($instanceId: Uuid!) {
	invite(instanceId: $instanceId) {
		... InviteFragment
	}
}
fragment InviteFragment on Invite {
	id
	instanceId
	code
	createdAt
	expiresAt
	redemptions
	author {
		... AuthorFragment
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
`,
		Variables: &__InviteInput{
			InstanceId: instanceId,
		},
	}
	var err error

	var data InviteResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func PinInstance(
	ctx context.Context,
	client graphql.Client,
	input InstancePinInput,
	instanceId uuid.UUID,
	channelsFirst int,
	channelsAfter string,
	likesFirst int,
	likesAfter string,
	authorsFirst int,
	authorsAfter string,
	authorsRoles []Role,
	messagesLast int,
	messagesBefore string,
) (*PinInstanceResponse, error) {
	req := &graphql.Request{
		OpName: "PinInstance",
		Query: `
mutation PinInstance ($input: InstancePinInput!, $instanceId: Uuid!, $channelsFirst: Int!, $channelsAfter: String!, $likesFirst: Int!, $likesAfter: String!, $authorsFirst: Int!, $authorsAfter: String!, $authorsRoles: [Role!] = [], $messagesLast: Int!, $messagesBefore: String!) {
	pinInstance(input: $input, instanceId: $instanceId) {
		... UserInstancesEdgeFragment
	}
}
fragment UserInstancesEdgeFragment on UserInstancesEdge {
	cursor
	node {
		... InstanceFragment
	}
	instanceUser {
		... AuthorFragment
	}
	rank
	pinned
	likedByMe
}
fragment InstanceFragment on Instance {
	id
	name
	author {
		... AuthorFragment
	}
	readAccess
	icon
	createdAt
	description
	showAuthor
	showChat
	showLikes
	showComments
	likesCount
	commentsCount
	likesConnection(first: $likesFirst, after: $likesAfter) {
		edges {
			... InstanceLikesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	channelsConnection(first: $channelsFirst, after: $channelsAfter) {
		edges {
			... InstanceChannelsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	authorsConnection(first: $authorsFirst, after: $authorsAfter, roles: $authorsRoles) {
		edges {
			... InstanceAuthorsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
fragment InstanceLikesEdgeFragment on InstanceLikesEdge {
	cursor
	likedAt
	node {
		... AuthorFragment
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	hasPreviousPage
}
fragment InstanceChannelsEdgeFragment on InstanceChannelsEdge {
	cursor
	node {
		... ChannelFragment
	}
}
fragment InstanceAuthorsEdgeFragment on InstanceAuthorsEdge {
	cursor
	node {
		... AuthorFragment
	}
}
fragment ChannelFragment on Channel {
	id
	name
	rank
	instanceId
	readers
	publishers
	createdAt
	updatedAt
	lastMessageAddedAt
	messageCount
	isCategory
	isComments
	messagesConnection(last: $messagesLast, before: $messagesBefore) {
		edges {
			... ChannelMessagesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment ChannelMessagesEdgeFragment on ChannelMessagesEdge {
	cursor
	node {
		... MessageFragment
	}
}
fragment MessageFragment on Message {
	id
	author {
		... AuthorFragment
	}
	text
	createdAt
	channelId
	repliedMessage {
		id
		text
		createdAt
		channelId
		imageUrls
	}
	imageUrls
}
`,
		Variables: &__PinInstanceInput{
			Input:          input,
			InstanceId:     instanceId,
			ChannelsFirst:  channelsFirst,
			ChannelsAfter:  channelsAfter,
			LikesFirst:     likesFirst,
			LikesAfter:     likesAfter,
			AuthorsFirst:   authorsFirst,
			AuthorsAfter:   authorsAfter,
			AuthorsRoles:   authorsRoles,
			MessagesLast:   messagesLast,
			MessagesBefore: messagesBefore,
		},
	}
	var err error

	var data PinInstanceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func RedeemInvite(
	ctx context.Context,
	client graphql.Client,
	code string,
) (*RedeemInviteResponse, error) {
	req := &graphql.Request{
		OpName: "RedeemInvite",
		Query: `
mutation RedeemInvite ($code: String!) {
	redeemInvite(code: $code) {
		... InviteFragment
	}
}
fragment InviteFragment on Invite {
	id
	instanceId
	code
	createdAt
	expiresAt
	redemptions
	author {
		... AuthorFragment
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
`,
		Variables: &__RedeemInviteInput{
			Code: code,
		},
	}
	var err error

	var data RedeemInviteResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func RemoveChannel(
	ctx context.Context,
	client graphql.Client,
	channelId uuid.UUID,
	messagesLast int,
	messagesBefore string,
) (*RemoveChannelResponse, error) {
	req := &graphql.Request{
		OpName: "RemoveChannel",
		Query: `
mutation RemoveChannel ($channelId: Uuid!, $messagesLast: Int!, $messagesBefore: String!) {
	removeChannel(channelId: $channelId) {
		... InstanceChannelsEdgeFragment
	}
}
fragment InstanceChannelsEdgeFragment on InstanceChannelsEdge {
	cursor
	node {
		... ChannelFragment
	}
}
fragment ChannelFragment on Channel {
	id
	name
	rank
	instanceId
	readers
	publishers
	createdAt
	updatedAt
	lastMessageAddedAt
	messageCount
	isCategory
	isComments
	messagesConnection(last: $messagesLast, before: $messagesBefore) {
		edges {
			... ChannelMessagesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment ChannelMessagesEdgeFragment on ChannelMessagesEdge {
	cursor
	node {
		... MessageFragment
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	hasPreviousPage
}
fragment MessageFragment on Message {
	id
	author {
		... AuthorFragment
	}
	text
	createdAt
	channelId
	repliedMessage {
		id
		text
		createdAt
		channelId
		imageUrls
	}
	imageUrls
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
`,
		Variables: &__RemoveChannelInput{
			ChannelId:      channelId,
			MessagesLast:   messagesLast,
			MessagesBefore: messagesBefore,
		},
	}
	var err error

	var data RemoveChannelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func RemoveInstance(
	ctx context.Context,
	client graphql.Client,
	instanceId uuid.UUID,
	channelsFirst int,
	channelsAfter string,
	likesFirst int,
	likesAfter string,
	authorsFirst int,
	authorsAfter string,
	authorsRoles []Role,
	messagesLast int,
	messagesBefore string,
) (*RemoveInstanceResponse, error) {
	req := &graphql.Request{
		OpName: "RemoveInstance",
		Query: `
mutation RemoveInstance ($instanceId: Uuid!, $channelsFirst: Int!, $channelsAfter: String!, $likesFirst: Int!, $likesAfter: String!, $authorsFirst: Int!, $authorsAfter: String!, $authorsRoles: [Role!] = [], $messagesLast: Int!, $messagesBefore: String!) {
	removeInstance(instanceId: $instanceId) {
		... UserInstancesEdgeFragment
	}
}
fragment UserInstancesEdgeFragment on UserInstancesEdge {
	cursor
	node {
		... InstanceFragment
	}
	instanceUser {
		... AuthorFragment
	}
	rank
	pinned
	likedByMe
}
fragment InstanceFragment on Instance {
	id
	name
	author {
		... AuthorFragment
	}
	readAccess
	icon
	createdAt
	description
	showAuthor
	showChat
	showLikes
	showComments
	likesCount
	commentsCount
	likesConnection(first: $likesFirst, after: $likesAfter) {
		edges {
			... InstanceLikesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	channelsConnection(first: $channelsFirst, after: $channelsAfter) {
		edges {
			... InstanceChannelsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	authorsConnection(first: $authorsFirst, after: $authorsAfter, roles: $authorsRoles) {
		edges {
			... InstanceAuthorsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
fragment InstanceLikesEdgeFragment on InstanceLikesEdge {
	cursor
	likedAt
	node {
		... AuthorFragment
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	hasPreviousPage
}
fragment InstanceChannelsEdgeFragment on InstanceChannelsEdge {
	cursor
	node {
		... ChannelFragment
	}
}
fragment InstanceAuthorsEdgeFragment on InstanceAuthorsEdge {
	cursor
	node {
		... AuthorFragment
	}
}
fragment ChannelFragment on Channel {
	id
	name
	rank
	instanceId
	readers
	publishers
	createdAt
	updatedAt
	lastMessageAddedAt
	messageCount
	isCategory
	isComments
	messagesConnection(last: $messagesLast, before: $messagesBefore) {
		edges {
			... ChannelMessagesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment ChannelMessagesEdgeFragment on ChannelMessagesEdge {
	cursor
	node {
		... MessageFragment
	}
}
fragment MessageFragment on Message {
	id
	author {
		... AuthorFragment
	}
	text
	createdAt
	channelId
	repliedMessage {
		id
		text
		createdAt
		channelId
		imageUrls
	}
	imageUrls
}
`,
		Variables: &__RemoveInstanceInput{
			InstanceId:     instanceId,
			ChannelsFirst:  channelsFirst,
			ChannelsAfter:  channelsAfter,
			LikesFirst:     likesFirst,
			LikesAfter:     likesAfter,
			AuthorsFirst:   authorsFirst,
			AuthorsAfter:   authorsAfter,
			AuthorsRoles:   authorsRoles,
			MessagesLast:   messagesLast,
			MessagesBefore: messagesBefore,
		},
	}
	var err error

	var data RemoveInstanceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func RemoveLike(
	ctx context.Context,
	client graphql.Client,
	instanceId uuid.UUID,
) (*RemoveLikeResponse, error) {
	req := &graphql.Request{
		OpName: "RemoveLike",
		Query: `
mutation RemoveLike ($instanceId: Uuid!) {
	removeLike(instanceId: $instanceId) {
		... InstanceLikesEdgeFragment
	}
}
fragment InstanceLikesEdgeFragment on InstanceLikesEdge {
	cursor
	likedAt
	node {
		... AuthorFragment
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
`,
		Variables: &__RemoveLikeInput{
			InstanceId: instanceId,
		},
	}
	var err error

	var data RemoveLikeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func RemoveMessage(
	ctx context.Context,
	client graphql.Client,
	messageId uuid.UUID,
) (*RemoveMessageResponse, error) {
	req := &graphql.Request{
		OpName: "RemoveMessage",
		Query: `
mutation RemoveMessage ($messageId: Uuid!) {
	removeMessage(messageId: $messageId) {
		... ChannelMessagesEdgeFragment
	}
}
fragment ChannelMessagesEdgeFragment on ChannelMessagesEdge {
	cursor
	node {
		... MessageFragment
	}
}
fragment MessageFragment on Message {
	id
	author {
		... AuthorFragment
	}
	text
	createdAt
	channelId
	repliedMessage {
		id
		text
		createdAt
		channelId
		imageUrls
	}
	imageUrls
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
`,
		Variables: &__RemoveMessageInput{
			MessageId: messageId,
		},
	}
	var err error

	var data RemoveMessageResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func RemoveRole(
	ctx context.Context,
	client graphql.Client,
	authorId uuid.UUID,
	role Role,
) (*RemoveRoleResponse, error) {
	req := &graphql.Request{
		OpName: "RemoveRole",
		Query: `
mutation RemoveRole ($authorId: Uuid!, $role: Role!) {
	removeRole(authorId: $authorId, role: $role) {
		... AuthorFragment
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
`,
		Variables: &__RemoveRoleInput{
			AuthorId: authorId,
			Role:     role,
		},
	}
	var err error

	var data RemoveRoleResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReorderChannel(
	ctx context.Context,
	client graphql.Client,
	input ChannelReorderInput,
	channelId uuid.UUID,
	messagesLast int,
	messagesBefore string,
) (*ReorderChannelResponse, error) {
	req := &graphql.Request{
		OpName: "ReorderChannel",
		Query: `
mutation ReorderChannel ($input: ChannelReorderInput!, $channelId: Uuid!, $messagesLast: Int!, $messagesBefore: String!) {
	reorderChannel(input: $input, channelId: $channelId) {
		... InstanceChannelsEdgeFragment
	}
}
fragment InstanceChannelsEdgeFragment on InstanceChannelsEdge {
	cursor
	node {
		... ChannelFragment
	}
}
fragment ChannelFragment on Channel {
	id
	name
	rank
	instanceId
	readers
	publishers
	createdAt
	updatedAt
	lastMessageAddedAt
	messageCount
	isCategory
	isComments
	messagesConnection(last: $messagesLast, before: $messagesBefore) {
		edges {
			... ChannelMessagesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment ChannelMessagesEdgeFragment on ChannelMessagesEdge {
	cursor
	node {
		... MessageFragment
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	hasPreviousPage
}
fragment MessageFragment on Message {
	id
	author {
		... AuthorFragment
	}
	text
	createdAt
	channelId
	repliedMessage {
		id
		text
		createdAt
		channelId
		imageUrls
	}
	imageUrls
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
`,
		Variables: &__ReorderChannelInput{
			Input:          input,
			ChannelId:      channelId,
			MessagesLast:   messagesLast,
			MessagesBefore: messagesBefore,
		},
	}
	var err error

	var data ReorderChannelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReorderInstance(
	ctx context.Context,
	client graphql.Client,
	input InstanceReorderInput,
	instanceId uuid.UUID,
	channelsFirst int,
	channelsAfter string,
	likesFirst int,
	likesAfter string,
	authorsFirst int,
	authorsAfter string,
	authorsRoles []Role,
	messagesLast int,
	messagesBefore string,
) (*ReorderInstanceResponse, error) {
	req := &graphql.Request{
		OpName: "ReorderInstance",
		Query: `
mutation ReorderInstance ($input: InstanceReorderInput!, $instanceId: Uuid!, $channelsFirst: Int!, $channelsAfter: String!, $likesFirst: Int!, $likesAfter: String!, $authorsFirst: Int!, $authorsAfter: String!, $authorsRoles: [Role!] = [], $messagesLast: Int!, $messagesBefore: String!) {
	reorderInstance(input: $input, instanceId: $instanceId) {
		... UserInstancesEdgeFragment
	}
}
fragment UserInstancesEdgeFragment on UserInstancesEdge {
	cursor
	node {
		... InstanceFragment
	}
	instanceUser {
		... AuthorFragment
	}
	rank
	pinned
	likedByMe
}
fragment InstanceFragment on Instance {
	id
	name
	author {
		... AuthorFragment
	}
	readAccess
	icon
	createdAt
	description
	showAuthor
	showChat
	showLikes
	showComments
	likesCount
	commentsCount
	likesConnection(first: $likesFirst, after: $likesAfter) {
		edges {
			... InstanceLikesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	channelsConnection(first: $channelsFirst, after: $channelsAfter) {
		edges {
			... InstanceChannelsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	authorsConnection(first: $authorsFirst, after: $authorsAfter, roles: $authorsRoles) {
		edges {
			... InstanceAuthorsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
fragment InstanceLikesEdgeFragment on InstanceLikesEdge {
	cursor
	likedAt
	node {
		... AuthorFragment
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	hasPreviousPage
}
fragment InstanceChannelsEdgeFragment on InstanceChannelsEdge {
	cursor
	node {
		... ChannelFragment
	}
}
fragment InstanceAuthorsEdgeFragment on InstanceAuthorsEdge {
	cursor
	node {
		... AuthorFragment
	}
}
fragment ChannelFragment on Channel {
	id
	name
	rank
	instanceId
	readers
	publishers
	createdAt
	updatedAt
	lastMessageAddedAt
	messageCount
	isCategory
	isComments
	messagesConnection(last: $messagesLast, before: $messagesBefore) {
		edges {
			... ChannelMessagesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment ChannelMessagesEdgeFragment on ChannelMessagesEdge {
	cursor
	node {
		... MessageFragment
	}
}
fragment MessageFragment on Message {
	id
	author {
		... AuthorFragment
	}
	text
	createdAt
	channelId
	repliedMessage {
		id
		text
		createdAt
		channelId
		imageUrls
	}
	imageUrls
}
`,
		Variables: &__ReorderInstanceInput{
			Input:          input,
			InstanceId:     instanceId,
			ChannelsFirst:  channelsFirst,
			ChannelsAfter:  channelsAfter,
			LikesFirst:     likesFirst,
			LikesAfter:     likesAfter,
			AuthorsFirst:   authorsFirst,
			AuthorsAfter:   authorsAfter,
			AuthorsRoles:   authorsRoles,
			MessagesLast:   messagesLast,
			MessagesBefore: messagesBefore,
		},
	}
	var err error

	var data ReorderInstanceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateChannel(
	ctx context.Context,
	client graphql.Client,
	input ChannelInput,
	channelId uuid.UUID,
	messagesLast int,
	messagesBefore string,
) (*UpdateChannelResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateChannel",
		Query: `
mutation UpdateChannel ($input: ChannelInput!, $channelId: Uuid!, $messagesLast: Int!, $messagesBefore: String!) {
	updateChannel(input: $input, channelId: $channelId) {
		... InstanceChannelsEdgeFragment
	}
}
fragment InstanceChannelsEdgeFragment on InstanceChannelsEdge {
	cursor
	node {
		... ChannelFragment
	}
}
fragment ChannelFragment on Channel {
	id
	name
	rank
	instanceId
	readers
	publishers
	createdAt
	updatedAt
	lastMessageAddedAt
	messageCount
	isCategory
	isComments
	messagesConnection(last: $messagesLast, before: $messagesBefore) {
		edges {
			... ChannelMessagesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment ChannelMessagesEdgeFragment on ChannelMessagesEdge {
	cursor
	node {
		... MessageFragment
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	hasPreviousPage
}
fragment MessageFragment on Message {
	id
	author {
		... AuthorFragment
	}
	text
	createdAt
	channelId
	repliedMessage {
		id
		text
		createdAt
		channelId
		imageUrls
	}
	imageUrls
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
`,
		Variables: &__UpdateChannelInput{
			Input:          input,
			ChannelId:      channelId,
			MessagesLast:   messagesLast,
			MessagesBefore: messagesBefore,
		},
	}
	var err error

	var data UpdateChannelResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateInstance(
	ctx context.Context,
	client graphql.Client,
	instanceId uuid.UUID,
	input InstanceInput,
	channelsFirst int,
	channelsAfter string,
	likesFirst int,
	likesAfter string,
	authorsFirst int,
	authorsAfter string,
	authorsRoles []Role,
	messagesLast int,
	messagesBefore string,
) (*UpdateInstanceResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateInstance",
		Query: `
mutation UpdateInstance ($instanceId: Uuid!, $input: InstanceInput!, $channelsFirst: Int!, $channelsAfter: String!, $likesFirst: Int!, $likesAfter: String!, $authorsFirst: Int!, $authorsAfter: String!, $authorsRoles: [Role!] = [], $messagesLast: Int!, $messagesBefore: String!) {
	updateInstance(instanceId: $instanceId, input: $input) {
		... UserInstancesEdgeFragment
	}
}
fragment UserInstancesEdgeFragment on UserInstancesEdge {
	cursor
	node {
		... InstanceFragment
	}
	instanceUser {
		... AuthorFragment
	}
	rank
	pinned
	likedByMe
}
fragment InstanceFragment on Instance {
	id
	name
	author {
		... AuthorFragment
	}
	readAccess
	icon
	createdAt
	description
	showAuthor
	showChat
	showLikes
	showComments
	likesCount
	commentsCount
	likesConnection(first: $likesFirst, after: $likesAfter) {
		edges {
			... InstanceLikesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	channelsConnection(first: $channelsFirst, after: $channelsAfter) {
		edges {
			... InstanceChannelsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	authorsConnection(first: $authorsFirst, after: $authorsAfter, roles: $authorsRoles) {
		edges {
			... InstanceAuthorsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
fragment InstanceLikesEdgeFragment on InstanceLikesEdge {
	cursor
	likedAt
	node {
		... AuthorFragment
	}
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	hasPreviousPage
}
fragment InstanceChannelsEdgeFragment on InstanceChannelsEdge {
	cursor
	node {
		... ChannelFragment
	}
}
fragment InstanceAuthorsEdgeFragment on InstanceAuthorsEdge {
	cursor
	node {
		... AuthorFragment
	}
}
fragment ChannelFragment on Channel {
	id
	name
	rank
	instanceId
	readers
	publishers
	createdAt
	updatedAt
	lastMessageAddedAt
	messageCount
	isCategory
	isComments
	messagesConnection(last: $messagesLast, before: $messagesBefore) {
		edges {
			... ChannelMessagesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment ChannelMessagesEdgeFragment on ChannelMessagesEdge {
	cursor
	node {
		... MessageFragment
	}
}
fragment MessageFragment on Message {
	id
	author {
		... AuthorFragment
	}
	text
	createdAt
	channelId
	repliedMessage {
		id
		text
		createdAt
		channelId
		imageUrls
	}
	imageUrls
}
`,
		Variables: &__UpdateInstanceInput{
			InstanceId:     instanceId,
			Input:          input,
			ChannelsFirst:  channelsFirst,
			ChannelsAfter:  channelsAfter,
			LikesFirst:     likesFirst,
			LikesAfter:     likesAfter,
			AuthorsFirst:   authorsFirst,
			AuthorsAfter:   authorsAfter,
			AuthorsRoles:   authorsRoles,
			MessagesLast:   messagesLast,
			MessagesBefore: messagesBefore,
		},
	}
	var err error

	var data UpdateInstanceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateUser(
	ctx context.Context,
	client graphql.Client,
	input UserInput,
	instancesFirst int,
	instancesAfter string,
	channelsFirst int,
	channelsAfter string,
	likesFirst int,
	likesAfter string,
	authorsFirst int,
	authorsAfter string,
	authorsRoles []Role,
	messagesLast int,
	messagesBefore string,
	notificationsLast int,
	notificationsBefore string,
) (*UpdateUserResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateUser",
		Query: `
mutation UpdateUser ($input: UserInput!, $instancesFirst: Int!, $instancesAfter: String!, $channelsFirst: Int!, $channelsAfter: String!, $likesFirst: Int!, $likesAfter: String!, $authorsFirst: Int!, $authorsAfter: String!, $authorsRoles: [Role!] = [], $messagesLast: Int!, $messagesBefore: String!, $notificationsLast: Int!, $notificationsBefore: String!) {
	updateUser(input: $input) {
		... UserFragment
	}
}
fragment UserFragment on User {
	id
	name
	avatar
	bio
	uid
	instancesConnection(first: $instancesFirst, after: $instancesAfter) {
		edges {
			... UserInstancesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	notificationsConnection(last: $notificationsLast, before: $notificationsBefore) {
		edges {
			... UserNotificationsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
		hasUnread
	}
}
fragment UserInstancesEdgeFragment on UserInstancesEdge {
	cursor
	node {
		... InstanceFragment
	}
	instanceUser {
		... AuthorFragment
	}
	rank
	pinned
	likedByMe
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	hasPreviousPage
}
fragment UserNotificationsEdgeFragment on UserNotificationsEdge {
	cursor
	node {
		... NotificationFragment
	}
}
fragment InstanceFragment on Instance {
	id
	name
	author {
		... AuthorFragment
	}
	readAccess
	icon
	createdAt
	description
	showAuthor
	showChat
	showLikes
	showComments
	likesCount
	commentsCount
	likesConnection(first: $likesFirst, after: $likesAfter) {
		edges {
			... InstanceLikesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	channelsConnection(first: $channelsFirst, after: $channelsAfter) {
		edges {
			... InstanceChannelsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	authorsConnection(first: $authorsFirst, after: $authorsAfter, roles: $authorsRoles) {
		edges {
			... InstanceAuthorsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
fragment NotificationFragment on Notification {
	id
	kind
	author {
		... AuthorFragment
	}
	instance {
		... InstanceFragment
	}
	message {
		... MessageFragment
	}
	createdAt
}
fragment InstanceLikesEdgeFragment on InstanceLikesEdge {
	cursor
	likedAt
	node {
		... AuthorFragment
	}
}
fragment InstanceChannelsEdgeFragment on InstanceChannelsEdge {
	cursor
	node {
		... ChannelFragment
	}
}
fragment InstanceAuthorsEdgeFragment on InstanceAuthorsEdge {
	cursor
	node {
		... AuthorFragment
	}
}
fragment MessageFragment on Message {
	id
	author {
		... AuthorFragment
	}
	text
	createdAt
	channelId
	repliedMessage {
		id
		text
		createdAt
		channelId
		imageUrls
	}
	imageUrls
}
fragment ChannelFragment on Channel {
	id
	name
	rank
	instanceId
	readers
	publishers
	createdAt
	updatedAt
	lastMessageAddedAt
	messageCount
	isCategory
	isComments
	messagesConnection(last: $messagesLast, before: $messagesBefore) {
		edges {
			... ChannelMessagesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment ChannelMessagesEdgeFragment on ChannelMessagesEdge {
	cursor
	node {
		... MessageFragment
	}
}
`,
		Variables: &__UpdateUserInput{
			Input:               input,
			InstancesFirst:      instancesFirst,
			InstancesAfter:      instancesAfter,
			ChannelsFirst:       channelsFirst,
			ChannelsAfter:       channelsAfter,
			LikesFirst:          likesFirst,
			LikesAfter:          likesAfter,
			AuthorsFirst:        authorsFirst,
			AuthorsAfter:        authorsAfter,
			AuthorsRoles:        authorsRoles,
			MessagesLast:        messagesLast,
			MessagesBefore:      messagesBefore,
			NotificationsLast:   notificationsLast,
			NotificationsBefore: notificationsBefore,
		},
	}
	var err error

	var data UpdateUserResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func User(
	ctx context.Context,
	client graphql.Client,
	instancesFirst int,
	instancesAfter string,
	channelsFirst int,
	channelsAfter string,
	likesFirst int,
	likesAfter string,
	authorsFirst int,
	authorsAfter string,
	authorsRoles []Role,
	messagesLast int,
	messagesBefore string,
	notificationsLast int,
	notificationsBefore string,
) (*UserResponse, error) {
	req := &graphql.Request{
		OpName: "User",
		Query: `
query User ($instancesFirst: Int!, $instancesAfter: String!, $channelsFirst: Int!, $channelsAfter: String!, $likesFirst: Int!, $likesAfter: String!, $authorsFirst: Int!, $authorsAfter: String!, $authorsRoles: [Role!]!, $messagesLast: Int!, $messagesBefore: String!, $notificationsLast: Int!, $notificationsBefore: String!) {
	user {
		... UserFragment
	}
}
fragment UserFragment on User {
	id
	name
	avatar
	bio
	uid
	instancesConnection(first: $instancesFirst, after: $instancesAfter) {
		edges {
			... UserInstancesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	notificationsConnection(last: $notificationsLast, before: $notificationsBefore) {
		edges {
			... UserNotificationsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
		hasUnread
	}
}
fragment UserInstancesEdgeFragment on UserInstancesEdge {
	cursor
	node {
		... InstanceFragment
	}
	instanceUser {
		... AuthorFragment
	}
	rank
	pinned
	likedByMe
}
fragment PageInfoFragment on PageInfo {
	hasNextPage
	hasPreviousPage
}
fragment UserNotificationsEdgeFragment on UserNotificationsEdge {
	cursor
	node {
		... NotificationFragment
	}
}
fragment InstanceFragment on Instance {
	id
	name
	author {
		... AuthorFragment
	}
	readAccess
	icon
	createdAt
	description
	showAuthor
	showChat
	showLikes
	showComments
	likesCount
	commentsCount
	likesConnection(first: $likesFirst, after: $likesAfter) {
		edges {
			... InstanceLikesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	channelsConnection(first: $channelsFirst, after: $channelsAfter) {
		edges {
			... InstanceChannelsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
	authorsConnection(first: $authorsFirst, after: $authorsAfter, roles: $authorsRoles) {
		edges {
			... InstanceAuthorsEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment AuthorFragment on Author {
	id
	userId
	instanceId
	name
	avatar
	bio
	roles
	createdAt
}
fragment NotificationFragment on Notification {
	id
	kind
	author {
		... AuthorFragment
	}
	instance {
		... InstanceFragment
	}
	message {
		... MessageFragment
	}
	createdAt
}
fragment InstanceLikesEdgeFragment on InstanceLikesEdge {
	cursor
	likedAt
	node {
		... AuthorFragment
	}
}
fragment InstanceChannelsEdgeFragment on InstanceChannelsEdge {
	cursor
	node {
		... ChannelFragment
	}
}
fragment InstanceAuthorsEdgeFragment on InstanceAuthorsEdge {
	cursor
	node {
		... AuthorFragment
	}
}
fragment MessageFragment on Message {
	id
	author {
		... AuthorFragment
	}
	text
	createdAt
	channelId
	repliedMessage {
		id
		text
		createdAt
		channelId
		imageUrls
	}
	imageUrls
}
fragment ChannelFragment on Channel {
	id
	name
	rank
	instanceId
	readers
	publishers
	createdAt
	updatedAt
	lastMessageAddedAt
	messageCount
	isCategory
	isComments
	messagesConnection(last: $messagesLast, before: $messagesBefore) {
		edges {
			... ChannelMessagesEdgeFragment
		}
		pageInfo {
			... PageInfoFragment
		}
	}
}
fragment ChannelMessagesEdgeFragment on ChannelMessagesEdge {
	cursor
	node {
		... MessageFragment
	}
}
`,
		Variables: &__UserInput{
			InstancesFirst:      instancesFirst,
			InstancesAfter:      instancesAfter,
			ChannelsFirst:       channelsFirst,
			ChannelsAfter:       channelsAfter,
			LikesFirst:          likesFirst,
			LikesAfter:          likesAfter,
			AuthorsFirst:        authorsFirst,
			AuthorsAfter:        authorsAfter,
			AuthorsRoles:        authorsRoles,
			MessagesLast:        messagesLast,
			MessagesBefore:      messagesBefore,
			NotificationsLast:   notificationsLast,
			NotificationsBefore: notificationsBefore,
		},
	}
	var err error

	var data UserResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
